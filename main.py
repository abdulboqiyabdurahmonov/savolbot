import os
import re
import logging
import httpx
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, Update

logging.basicConfig(level=logging.INFO)

# === ENV ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # https://savolbot.onrender.com/webhook
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "savol_secret")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_API_BASE = os.getenv("OPENAI_API_BASE", "https://api.openai.com/v1")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")  # –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –≤ Env

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
app = FastAPI()

# ====== –ú–æ–¥–µ—Ä–∞—Ü–∏—è: ¬´–≤ —Ä–∞–º–∫–∞—Ö –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –†–£–∑¬ª ======
# –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞: –±–∞–Ω—ã –Ω–∞ –≤–∑–ª–æ–º, –ø–æ–¥–¥–µ–ª–∫–∏, –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏, –æ—Ä—É–∂–∏–µ, –∫–æ—Ä—Ä—É–ø—Ü–∏—é,
# –æ–±—Ö–æ–¥ –≥–æ—Å.—Å–∏—Å—Ç–µ–º, —É—Ç–µ—á–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–∞—Å–∏–ª–∏–µ –∏ —Ç.–ø.
ILLEGAL_PATTERNS = [
    # –≤–∑–ª–æ–º / –∫–∏–±–µ—Ä–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è
    r"\b(–≤–∑–ª–æ–º|–≤–∑–ª–∞–º—ã–≤|—Ö–∞–∫|—Ö–∞–∫–µ—Ä|–∫–µ–π–ª–æ–≥–≥–µ—Ä|–∫—Ä—è–∫|—Ñ–∏—à–∏–Ω–≥|–±–æ—Ç–Ω–µ—Ç|–¥–¥–æ—Å|ddos)\b",
    r"\b(–∫–∞–∫\s+–ø–æ–ª—É—á–∏—Ç—å\s+–¥–æ—Å—Ç—É–ø|–æ–±–æ–π—Ç–∏|–≤–∑—è—Ç—å\s+–ø–∞—Ä–æ–ª—å)\b.*\b(–∞–∫–∫–∞—É–Ω—Ç|—Ç–µ–ª–µ–≥—Ä–∞–º|–∏–Ω—Å—Ç–∞–≥—Ä–∞–º|–ø–æ—á—Ç|–±–∞–Ω–∫)\b",
    # –ø–æ–¥–¥–µ–ª–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    r"\b(–ø–æ–¥–¥–µ–ª(–∞—Ç—å|–∫–∞)|—Ñ–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä|–ª–∏–ø–æ–≤(—ã–π|—ã–µ))\b.*\b(–ø–∞—Å–ø–æ—Ä—Ç|—Å–ø—Ä–∞–≤–∫|–¥–∏–ø–ª–æ–º|–¥–æ–≥–æ–≤–æ—Ä|–ø–µ—á–∞—Ç—å|—à—Ç–∞–º–ø)\b",
    # –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏ / –≤–∑—Ä—ã–≤—á–∞—Ç–∫–∞ / –æ—Ä—É–∂–∏–µ –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ
    r"\b(–Ω–∞—Ä–∫–æ—Ç–∏–∫|—Å–ø–∞–π—Å|–∞–º—Ñ–µ—Ç–∞–º–∏–Ω|–æ–ø–∏—É–º|–º–∞—Ä–∏—Ö—É–∞–Ω|–∫–∞–Ω–Ω–∞–±–∏—Å)\b.*\b(–∫—É–ø–∏—Ç—å|—Å–¥–µ–ª–∞—Ç—å|–≤—ã—Ä–∞—Å—Ç–∏—Ç—å)\b",
    r"\b(–æ—Ä—É–∂–∏–µ|–ø–∏—Å—Ç–æ–ª–µ—Ç|–∞–≤—Ç–æ–º–∞—Ç|–Ω–æ–∂\b|–≤–∑—Ä—ã–≤—á–∞—Ç–∫|—Ç—Ä–æ—Ç–∏–ª|–±–æ–º–±—É)\b.*\b(—Å–¥–µ–ª–∞—Ç—å|–∫—É–ø–∏—Ç—å|–¥–æ—Å—Ç–∞—Ç—å)\b",
    # –∫–æ—Ä—Ä—É–ø—Ü–∏—è / —É—Ö–æ–¥ –æ—Ç –Ω–∞–ª–æ–≥–æ–≤ / –æ–±–Ω–∞–ª
    r"\b(–≤–∑—è—Ç–∫|–æ—Ç–∫–∞—Ç|–æ–±–Ω–∞–ª|–æ–±–Ω–∞–ª–∏—á|—É—Ö–æ–¥\s+–æ—Ç\s+–Ω–∞–ª–æ–≥–æ–≤|—Å–µ—Ä–∞—è\s+–∑–∞—Ä–ø–ª–∞—Ç–∞)\b",
    # –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ¬´–ø—Ä–æ–±–∏—Ç—å –ø–æ –±–∞–∑–µ¬ª
    r"\b(–ø—Ä–æ–±–∏—Ç—å\s+–ø–æ\s+–±–∞–∑–µ|—Å–ª–∏—Ç—å\s+–±–∞–∑—É|–±–∞–∑—É\s+–∫–ª–∏–µ–Ω—Ç–æ–≤|–∫–∞–∫\s+–Ω–∞–π—Ç–∏\s+–ø–æ\s+–ø–∞—Å–ø–æ—Ä—Ç)\b",
    # –Ω–∞—Å–∏–ª–∏–µ/–≤—Ä–µ–¥
    r"\b(–æ—Ç—Ä–∞–≤–∏—Ç—å|–≤–∑–æ—Ä–≤–∞—Ç—å|—É–±–∏—Ç—å|–Ω–∞–Ω–µ—Å—Ç–∏\s+–≤—Ä–µ–¥)\b",
    # —É–∑–±–µ–∫—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–ª—è MVP)
    r"\b(soxta|soxtalashtir|qalbakilashtir)\b.*\b(diplom|pasport|spravka|shartnoma)\b",
    r"\b(sol(iq)dan\s+qochish|pora|otkat)\b",
    r"\b(hack|xak|parolni\s+olish|akkauntga\s+k(i|e)rish)\b",
]

DENY_TEXT_RU = (
    "‚õî –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω. –Ø –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–º–∫–∞—Ö –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω "
    "–∏ –Ω–µ –¥–∞—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å."
)
DENY_TEXT_UZ = (
    "‚õî So‚Äòrov rad etildi. Men faqat O‚Äòzbekiston qonunchiligi doirasida maslahat beraman "
    "va noqonuniy harakatlar bo‚Äòyicha ko‚Äòrsatmalar bermayman. Iltimos, boshqa savol bering."
)

def is_uzbek(text: str) -> bool:
    t = text.lower()
    return bool(
        re.search(r"[“ì“õ“≥—û]", t) or
        re.search(r"\b(ha|yo'q|iltimos|rahmat|salom)\b", t)
    )

def violates_policy(text: str) -> bool:
    t = text.lower()
    for rx in ILLEGAL_PATTERNS:
        if re.search(rx, t):
            return True
    return False
# ====== –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ ======

# –ö–æ—Ä–æ—Ç–∫–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
SYSTEM_PROMPT = (
    "–¢—ã ‚Äî SavolBot, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ —è—Å–Ω–æ (–¥–æ 6‚Äì8 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π). "
    "–í—Å–µ–≥–¥–∞ —Å–æ–±–ª—é–¥–∞–π –∑–∞–∫–æ–Ω—ã –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞. –ù–µ –¥–∞–≤–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º, –ø–æ–¥–¥–µ–ª–∫–∞–º, –≤–∑–ª–æ–º–∞–º, "
    "–æ–±—Ö–æ–¥—É –≥–æ—Å.—Å–∏—Å—Ç–µ–º –∏ —Ç.–ø. –ü–æ –º–µ–¥–∏—Ü–∏–Ω–µ ‚Äî —Ç–æ–ª—å–∫–æ –æ–±—â–∏–µ —Å–ø—Ä–∞–≤–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É. "
    "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º ‚Äî –æ—Ç–≤–µ—á–∞–π –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º; –µ—Å–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º ‚Äî –Ω–∞ —Ä—É—Å—Å–∫–æ–º. "
    "–í –∫–æ–Ω—Ü–µ –¥–∞–≤–∞–π 1‚Äì2 —á—ë—Ç–∫–∏—Ö —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ."
)

async def ask_gpt(user_text: str) -> str:
    if not OPENAI_API_KEY:
        return f"–í—ã —Å–ø—Ä–æ—Å–∏–ª–∏: {user_text}"
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
    payload = {
        "model": OPENAI_MODEL,
        "temperature": 0.6,
        "messages": [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": user_text}
        ]
    }
    async with httpx.AsyncClient(timeout=30.0, base_url=OPENAI_API_BASE) as client:
        r = await client.post("/chat/completions", headers=headers, json=payload)
        r.raise_for_status()
        data = r.json()
        return data["choices"][0]["message"]["content"].strip()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! / Assalomu alaykum!\n"
        "–Ø ‚Äî SavolBot. –û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ä–∞–º–∫–∞—Ö –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –†–£–∑: –±—ã—Ç, —Ñ–∏–Ω–∞–Ω—Å—ã, –≥–æ—Å—É—Å–ª—É–≥–∏, –±–∏–∑–Ω–µ—Å, —É—á—ë–±–∞ –∏ —Ç.–¥.\n"
        "–ü–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Äî –æ—Ç–≤–µ—á—É –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."
    )
    await message.answer(text)

@dp.message(F.text)
async def handle_text(message: Message):
    user_text = message.text.strip()

    # 1) –ú–æ–¥–µ—Ä–∞—Ü–∏—è –¥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ò–ò
    if violates_policy(user_text):
        await message.answer(DENY_TEXT_UZ if is_uzbek(user_text) else DENY_TEXT_RU)
        return

    # 2) –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    try:
        reply = await ask_gpt(user_text)
        await message.answer(reply)
    except Exception as e:
        logging.exception("OpenAI error: %s", e)
        await message.answer("–ò–∑–≤–∏–Ω–∏, —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")

# === Webhook endpoints ===
@app.post("/webhook")
async def telegram_webhook(request: Request):
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        return {"ok": False, "error": "bad secret"}
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}

@app.on_event("startup")
async def on_startup():
    if TELEGRAM_TOKEN and WEBHOOK_URL:
        async with httpx.AsyncClient(timeout=15.0) as client:
            resp = await client.post(
                f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook",
                json={"url": WEBHOOK_URL, "secret_token": WEBHOOK_SECRET}
            )
            logging.info("setWebhook status: %s %s", resp.status_code, resp.text)
    else:
        logging.warning("Webhook not set: no TELEGRAM_TOKEN or WEBHOOK_URL")

@app.get("/health")
async def health():
    return {"status": "ok"}
