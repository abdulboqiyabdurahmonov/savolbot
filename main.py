# -*- coding: utf-8 -*-
import os
import re
import json
import time
import logging
import asyncio
import random
from aiogram.enums import ChatAction
from aiogram.types.error_event import ErrorEvent
from dataclasses import dataclass
from datetime import datetime, timedelta
from pathlib import Path
from contextlib import asynccontextmanager
from typing import Optional

import httpx
from httpx import HTTPError, HTTPStatusError
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, Update, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.exceptions import TelegramBadRequest

# ---- Google Sheets
import gspread
from gspread.utils import rowcol_to_a1
from google.oauth2.service_account import Credentials

# ================== LOGS ==================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s:%(lineno)d ‚Äî %(message)s"
)

# ================== ENV ===================
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # https://<app>.onrender.com/webhook
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "savol_secret")

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_API_BASE = os.getenv("OPENAI_API_BASE", "https://api.openai.com/v1")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")

# Live-–ø–æ–∏—Å–∫ (—á–µ—Ä–µ–∑ Tavily) ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
TAVILY_API_KEY = os.getenv("TAVILY_API_KEY")

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å live-–ø–æ–∏—Å–∫ –¥–ª—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–µ—Å–ª–∏ 1)
FORCE_LIVE = os.getenv("FORCE_LIVE", "0") == "1"

# –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (—Ü–∏—Ñ—Ä—ã/–≥–æ–¥—ã/—Å—Ç–∞–≤–∫–∏)
VERIFY_DYNAMIC = os.getenv("VERIFY_DYNAMIC", "1") == "1"
VERIFY_TIMEOUT_SEC = int(os.getenv("VERIFY_TIMEOUT_SEC", "12"))

# –ê–¥–º–∏–Ω
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # str

# --- Whitelist users (—á–µ—Ä–µ–∑ ENV: WHITELIST_USERS="123,456")
def _parse_ids(csv: str) -> set[int]:
    out = set()
    for chunk in (csv or "").replace(" ", "").split(","):
        if not chunk:
            continue
        try:
            out.add(int(chunk))
        except ValueError:
            pass
    return out

WHITELIST_USERS: set[int] = _parse_ids(os.getenv("WHITELIST_USERS", ""))
if ADMIN_CHAT_ID:
    try:
        WHITELIST_USERS.add(int(ADMIN_CHAT_ID))
    except ValueError:
        pass

# –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã
USERS_DB_PATH = os.getenv("USERS_DB_PATH", "users_limits.json")
HISTORY_DB_PATH = os.getenv("HISTORY_DB_PATH", "chat_history.json")

# --- Google Sheets ENV ---
GOOGLE_CREDENTIALS = os.getenv("GOOGLE_CREDENTIALS")  # JSON –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π (–∏–ª–∏ base64)
SHEETS_SPREADSHEET_ID = os.getenv("SHEETS_SPREADSHEET_ID")
USERS_SHEET = os.getenv("USERS_SHEET", "Users")
HISTORY_SHEET = os.getenv("HISTORY_SHEET", "History")
METRICS_SHEET = os.getenv("METRICS_SHEET", "Metrics")
FEEDBACK_SHEET = os.getenv("FEEDBACK_SHEET", "Feedback")

# --- HTTPX clients & timeouts (reuse) ---
HTTPX_TIMEOUT = httpx.Timeout(connect=5.0, read=60.0, write=30.0, pool=30.0)
client_openai: Optional[httpx.AsyncClient] = None
client_http: Optional[httpx.AsyncClient] = None

# –ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –º–æ–¥–µ–ª–∏ (—á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å 429)
MODEL_CONCURRENCY = int(os.getenv("MODEL_CONCURRENCY", "4"))
_model_sem = asyncio.Semaphore(MODEL_CONCURRENCY)

# –û—á–µ—Ä–µ–¥—å –∏ –≤–æ—Ä–∫–µ—Ä—ã
WORKER_CONCURRENCY = int(os.getenv("WORKER_CONCURRENCY", "2"))
QUEUE_NOTICE_THRESHOLD = int(os.getenv("QUEUE_NOTICE_THRESHOLD", "3"))
SAVOL_QUEUE: "asyncio.Queue[SavolTask]" = asyncio.Queue()
def _eta_seconds(queue_size: int) -> int:
    # –ø—Ä–æ—Å—Ç–æ–π —Ö–µ–ª–ø–µ—Ä –æ—Ü–µ–Ω–∫–∏ –æ–∂–∏–¥–∞–Ω–∏—è (‚âà 6 —Å–µ–∫/–∑–∞–¥–∞—á—É –Ω–∞ –∫–∞–∂–¥–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞)
    per_item = 6
    workers = max(1, WORKER_CONCURRENCY)
    return max(3, int(per_item * queue_size / workers))

# ================== TG/APP =================
bot = Bot(token=TELEGRAM_TOKEN) if TELEGRAM_TOKEN else None
dp = Dispatcher()

# ================== USERS (–ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ) =================
USERS: dict[int, dict] = {}
TRIAL_DAYS = int(os.getenv("TRIAL_DAYS", "7"))

def _serialize_user(u: dict) -> dict:
    return {
        "plan": u.get("plan", "trial"),
        "paid_until": u["paid_until"].isoformat() if u.get("paid_until") else None,
        "lang": u.get("lang", "ru"),
        "topic": u.get("topic"),
        "mode": u.get("mode", "gpt"),  # gpt | legal
        "registered_to_sheets": bool(u.get("registered_to_sheets", False)),
    }

def save_users():
    try:
        path = Path(USERS_DB_PATH); path.parent.mkdir(parents=True, exist_ok=True)
        with path.open("w", encoding="utf-8") as f:
            json.dump({str(k): _serialize_user(v) for k, v in USERS.items()}, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.warning("save_users failed: %s", e)

def load_users():
    global USERS
    p = Path(USERS_DB_PATH)
    if not p.exists():
        USERS = {}; return
    try:
        data = json.loads(p.read_text("utf-8"))
        USERS = {}
        for k, v in data.items():
            pu = v.get("paid_until")
            try:
                paid_until = datetime.fromisoformat(pu) if pu else None
            except Exception:
                paid_until = None
            USERS[int(k)] = {
                "plan": v.get("plan", "trial"),
                "paid_until": paid_until,
                "lang": v.get("lang", "ru"),
                "topic": v.get("topic"),
                "mode": v.get("mode", "gpt"),
                "registered_to_sheets": bool(v.get("registered_to_sheets", False)),
            }
    except Exception:
        logging.exception("load_users failed")
        USERS = {}

def has_active_sub(u: dict) -> bool:
    if u.get("plan") == "creative" and u.get("paid_until") and u["paid_until"] > datetime.utcnow():
        return True
    if u.get("plan", "trial") == "trial" and u.get("paid_until") and u["paid_until"] > datetime.utcnow():
        return True
    return False

def get_user(tg_id: int):
    is_new = tg_id not in USERS
    if is_new:
        USERS[tg_id] = {
            "plan": "trial",
            "paid_until": datetime.utcnow() + timedelta(days=TRIAL_DAYS),
            "lang": "ru",
            "topic": None,
            "mode": "gpt",
            "registered_to_sheets": False,
        }
        save_users()
        try:
            loop = asyncio.get_running_loop()
            loop.create_task(_sheets_register_user_async(tg_id))
        except RuntimeError:
            pass
    return USERS[tg_id]

def pay_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å Creative ($10/–º–µ—Å)", callback_data="subscribe_creative")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –û —Ç–∞—Ä–∏—Ñ–µ", callback_data="show_tariffs")]
    ])

# ================== –ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê (–ª–æ–∫–∞–ª—å–Ω–∞—è) =================
HISTORY: dict[int, list[dict]] = {}  # {user_id: [ {role, content, ts}, ... ]}

def _hist_path() -> Path:
    p = Path(HISTORY_DB_PATH); p.parent.mkdir(parents=True, exist_ok=True); return p

def load_history():
    global HISTORY
    p = _hist_path()
    if p.exists():
        try:
            HISTORY = {int(k): v for k, v in json.loads(p.read_text("utf-8")).items()}
        except Exception:
            logging.exception("load_history failed"); HISTORY = {}
    else:
        HISTORY = {}

def save_history():
    try:
        _hist_path().write_text(json.dumps({str(k): v for k, v in HISTORY.items()}, ensure_ascii=False, indent=2), "utf-8")
    except Exception:
        logging.exception("save_history failed")

def reset_history(user_id: int):
    HISTORY.pop(user_id, None); save_history()

def append_history(user_id: int, role: str, content: str):
    lst = HISTORY.setdefault(user_id, [])
    lst.append({"role": role, "content": content, "ts": datetime.utcnow().isoformat()})
    if len(lst) > 20:
        del lst[: len(lst) - 20]
    save_history()

def get_recent_history(user_id: int, max_chars: int = 6000) -> list[dict]:
    total = 0; picked = []
    for item in reversed(HISTORY.get(user_id, [])):
        c = item.get("content") or ""
        total += len(c)
        if total > max_chars:
            break
        picked.append({"role": item["role"], "content": c})
    return list(reversed(picked))

def build_messages(user_id: int, system: str, user_text: str) -> list[dict]:
    msgs = [{"role": "system", "content": system}]
    msgs.extend(get_recent_history(user_id))
    msgs.append({"role": "user", "content": user_text})
    return msgs

# ================== –ú–û–î–ï–†–ê–¶–ò–Ø =================
ILLEGAL_PATTERNS = [
    r"\b(–≤–∑–ª–æ–º|—Ö–∞–∫|–∫–µ–π–ª–æ–≥–≥–µ—Ä|—Ñ–∏—à–∏–Ω–≥|–±–æ—Ç–Ω–µ—Ç|–¥–¥–æ—Å|ddos)\b",
    r"\b(–∫–∞–∫\s+–ø–æ–ª—É—á–∏—Ç—å\s+–¥–æ—Å—Ç—É–ø|–æ–±–æ–π—Ç–∏|–≤–∑—è—Ç—å\s+–ø–∞—Ä–æ–ª—å)\b.*\b(–∞–∫–∫–∞—É–Ω—Ç|—Ç–µ–ª–µ–≥—Ä–∞–º|–∏–Ω—Å—Ç–∞–≥—Ä–∞–º|–±–∞–Ω–∫|–ø–æ—á—Ç)\b",
    r"\b(–ø–æ–¥–¥–µ–ª(–∞—Ç—å|–∫–∞)|—Ñ–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä|–ª–∏–ø–æ–≤(—ã–π|—ã–µ))\b.*\b(–ø–∞—Å–ø–æ—Ä—Ç|—Å–ø—Ä–∞–≤–∫|–¥–∏–ø–ª–æ–º|–¥–æ–≥–æ–≤–æ—Ä|–ø–µ—á–∞—Ç—å|—à—Ç–∞–º–ø)\b",
    r"\b(–Ω–∞—Ä–∫–æ—Ç–∏–∫|–∞–º—Ñ–µ—Ç–∞–º–∏–Ω|–º–∞—Ä–∏—Ö—É–∞–Ω|–∫–∞–Ω–Ω–∞–±–∏—Å|–æ–ø–∏—É–º|—Å–ø–∞–π—Å)\b.*\b(–∫—É–ø–∏—Ç—å|–≤—ã—Ä–∞—Å—Ç–∏—Ç—å|—Å–¥–µ–ª–∞—Ç—å)\b",
    r"\b(–æ—Ä—É–∂–∏–µ|–ø–∏—Å—Ç–æ–ª–µ—Ç|–∞–≤—Ç–æ–º–∞—Ç|–≤–∑—Ä—ã–≤—á–∞—Ç–∫|–±–æ–º–±—É|—Ç—Ä–æ—Ç–∏–ª)\b.*\b(—Å–¥–µ–ª–∞—Ç—å|–∫—É–ø–∏—Ç—å|–¥–æ—Å—Ç–∞—Ç—å)\b",
    r"\b(–≤–∑—è—Ç–∫|–æ—Ç–∫–∞—Ç|–æ–±–Ω–∞–ª–∏—á|–æ–±–Ω–∞–ª|—É—Ö–æ–¥\s+–æ—Ç\s+–Ω–∞–ª–æ–≥–æ–≤|—Å–µ—Ä–∞—è\s+–∑–∞—Ä–ø–ª–∞—Ç–∞)\b",
    r"\b(–ø—Ä–æ–±–∏—Ç—å\s+–ø–æ\s+–±–∞–∑–µ|—Å–ª–∏—Ç—å\s+–±–∞–∑—É|–±–∞–∑—É\s+–∫–ª–∏–µ–Ω—Ç–æ–≤|–Ω–∞–π—Ç–∏\s+–ø–æ\s+–ø–∞—Å–ø–æ—Ä—Ç)\b",
    r"\b(–æ—Ç—Ä–∞–≤–∏—Ç—å|–≤–∑–æ—Ä–≤–∞—Ç—å|—É–±–∏—Ç—å|–Ω–∞–Ω–µ—Å—Ç–∏\s+–≤—Ä–µ–¥)\b",
    r"\b(soxta|qalbakilashtir|soxtalashtir)\b.*\b(diplom|pasport|spravka|shartnoma)\b",
    r"\b(soliqdan\s+qochish|pora|otkat)\b",
    r"\b(hack|xak|parolni\s+olish|akkauntga\s+k(i|e)rish)\b",
]
DENY_TEXT_RU = "‚õî –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω. –Ø –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–º–∫–∞—Ö –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –†–£–∑."
DENY_TEXT_UZ = "‚õî So‚Äòrov rad etildi. Men faqat O‚Äòzbekiston qonunchiligi doirasida javob beraman."

def is_uzbek(text: str) -> bool:
    t = text.lower()
    return bool(re.search(r"[“ì“õ“≥—û]", t) or re.search(r"\b(ha|yo[‚Äô']q|iltimos|rahmat|salom)\b", t))

# ================== –°–°–´–õ–ö–ò/–û–ß–ò–°–¢–ö–ê =================
LINK_PAT = re.compile(r"https?://\S+")
MD_LINK_PAT = re.compile(r"\[([^\]]+)\]\((https?://[^\s)]+)\)")
SOURCES_BLOCK_PAT = re.compile(r"(?is)\n+–∏—Å—Ç–æ—á–Ω–∏–∫–∏:\s*.*$")

def strip_links(text: str, allow_links: bool = False) -> str:
    if not text:
        return text
    if not allow_links:
        text = MD_LINK_PAT.sub(r"\1", text)
        text = LINK_PAT.sub("", text)
        text = SOURCES_BLOCK_PAT.sub("", text)
    text = re.sub(r"[ \t]+", " ", text)
    text = re.sub(r"\n{3,}", "\n\n", text).strip()
    return text

def _sanitize_cutoff(text: str) -> str:
    s = text or ""
    for rx in [
        r"–∞–∫—Ç—É–∞–ª\w+\s+–¥–æ\s+\w+\s+20\d{2}",
        r"–∑–Ω–∞–Ω[^\.!\n]*–¥–æ\s+\w+\s+20\d{2}",
        r"\bknowledge\s+cutoff\b",
        r"\bas of\s+\w+\s+20\d{2}",
    ]:
        s = re.sub(rx, "", s, flags=re.IGNORECASE)
    s = re.sub(r"\n{3,}", "\n\n", s).strip()
    return s

def strip_links_and_cleanup(text: str, allow_links: bool = False) -> str:
    return strip_links(text or "", allow_links=allow_links)

# ================== –¢–ê–†–ò–§ =================
TARIFF = {
    "creative": {
        "title": "Creative",
        "price_usd": 10,
        "desc_ru": [
            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏ –ø–æ–º–æ—â—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏",
            "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π",
            "–£–¥–æ–±–Ω–æ –ø—Ä—è–º–æ –≤ Telegram",
        ],
        "desc_uz": [
            "Rasm generatsiyasi va hujjatlar bo‚Äòyicha yordam",
            "Cheklanmagan xabarlar soni",
            "Telegram ichida qulay",
        ],
        "duration_days": 30,
        "active": True,
    }
}

def tariffs_text(lang='ru'):
    t = TARIFF["creative"]
    badge = "(–¥–æ—Å—Ç—É–ø–µ–Ω)" if t["active"] else "(—Å–∫–æ—Ä–æ)"
    if lang == "uz":
        lines = "\n".join(f"‚Ä¢ {x}" for x in t["desc_uz"])
        return (
            f"‚≠ê {t['title']} {badge}\n"
            f"NARX: ${t['price_usd']}/oy\n"
            f"{lines}\n\n"
            f"7 kunlik BEPUL sinov ‚Üí keyin ${t['price_usd']}/oy"
        )
    else:
        lines = "\n".join(f"‚Ä¢ {x}" for x in t["desc_ru"])
        return (
            f"‚≠ê {t['title']} {badge}\n"
            f"–¶–µ–Ω–∞: ${t['price_usd']}/–º–µ—Å\n"
            f"{lines}\n\n"
            f"7 –¥–Ω–µ–π –ë–ï–°–ü–õ–ê–¢–ù–û ‚Üí –¥–∞–ª–µ–µ ${t['price_usd']}/–º–µ—Å"
        )

# ================== SHEETS =================
_sheets_client: Optional[gspread.Client] = None
_users_ws: Optional[gspread.Worksheet] = None
LAST_SHEETS_ERROR: Optional[str] = None

def _ts() -> str:
    return datetime.utcnow().isoformat()

def _open_spreadsheet():
    if not _sheets_client:
        return None
    try:
        return _sheets_client.open_by_key(SHEETS_SPREADSHEET_ID)
    except Exception:
        logging.exception("open_by_key failed")
        return None

def _users_ws_get():
    sh = _open_spreadsheet()
    if not sh:
        return None
    try:
        return sh.worksheet(USERS_SHEET)
    except gspread.WorksheetNotFound:
        try:
            ws = sh.add_worksheet(title=USERS_SHEET, rows=100000, cols=9)
            ws.append_row(["ts", "user_id", "username", "first_name", "last_name", "lang", "plan", "paid_until", "mode"], value_input_option="RAW")
            return ws
        except Exception:
            logging.exception("Create Users ws failed")
            return None
    except Exception:
        logging.exception("_users_ws failed")
        return None

def _ws_get(tab_name: str, headers: list[str]):
    sh = _open_spreadsheet()
    if not sh:
        return None
    try:
        ws = sh.worksheet(tab_name)
    except gspread.WorksheetNotFound:
        try:
            ws = sh.add_worksheet(title=tab_name, rows=200000, cols=max(len(headers), 6))
            end_a1 = rowcol_to_a1(1, len(headers))
            ws.update(f"A1:{end_a1}", [headers], value_input_option="RAW")
            return ws
        except Exception:
            logging.exception("Create ws '%s' failed", tab_name)
            return None
    except Exception:
        logging.exception("_ws_get(%s) failed", tab_name)
        return None

    try:
        need_cols = max(len(headers), 6)
        if getattr(ws, "col_count", 0) < need_cols:
            ws.resize(cols=need_cols)
        end_a1 = rowcol_to_a1(1, len(headers))
        ws.update(f"A1:{end_a1}", [headers], value_input_option="RAW")
    except Exception:
        logging.exception("ensure header for %s failed", tab_name)

    return ws

def _init_sheets():
    global _sheets_client, _users_ws, LAST_SHEETS_ERROR
    if not (GOOGLE_CREDENTIALS and SHEETS_SPREADSHEET_ID and USERS_SHEET):
        LAST_SHEETS_ERROR = "Sheets env not set: GOOGLE_CREDENTIALS / SHEETS_SPREADSHEET_ID / USERS_SHEET"
        logging.warning(LAST_SHEETS_ERROR)
        return
    try:
        raw = GOOGLE_CREDENTIALS.strip()
        try:
            import base64
            creds_text = base64.b64decode(raw).decode("utf-8") if not raw.lstrip().startswith("{") else raw
        except Exception:
            creds_text = raw

        creds_info = json.loads(creds_text)
        if isinstance(creds_info, dict) and creds_info.get("private_key"):
            pk = creds_info["private_key"]
            if "BEGIN PRIVATE KEY" in pk and "\\n" in pk:
                creds_info["private_key"] = pk.replace("\\n", "\n")

        for field in ("client_email", "private_key"):
            if not creds_info.get(field):
                raise ValueError(f"GOOGLE_CREDENTIALS is missing '{field}'")

        scopes = [
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive",
        ]
        creds = Credentials.from_service_account_info(creds_info, scopes=scopes)
        _sheets_client = gspread.authorize(creds)

        sh = _sheets_client.open_by_key(SHEETS_SPREADSHEET_ID)
        try:
            _users_ws = sh.worksheet(USERS_SHEET)
        except gspread.WorksheetNotFound:
            logging.warning("Worksheet '%s' not found, creating‚Ä¶", USERS_SHEET)
            _users_ws = sh.add_worksheet(title=USERS_SHEET, rows=100000, cols=9)
            _users_ws.append_row(["ts", "user_id", "username", "first_name", "last_name", "lang", "plan", "paid_until", "mode"], value_input_option="RAW")

        _ = _ws_get(HISTORY_SHEET, ["ts","user_id","role","content","col1","col2"])
        _ = _ws_get(METRICS_SHEET, ["ts","user_id","event","value","notes"])
        _ = _ws_get(FEEDBACK_SHEET, ["ts","user_id","username","first_name","last_name","feedback","comment"])

        LAST_SHEETS_ERROR = None
        logging.info("Sheets OK: spreadsheet=%s users_sheet=%s", SHEETS_SPREADSHEET_ID, USERS_SHEET)

    except Exception as e:
        LAST_SHEETS_ERROR = f"{type(e).__name__}: {e}"
        logging.exception("Sheets init failed")
        _sheets_client = _users_ws = None

async def _sheets_register_user_async(user_id: int):
    u = USERS.get(user_id)
    if not u or not _users_ws:
        return
    if u.get("registered_to_sheets"):
        return
    try:
        def _do():
            ws = _users_ws_get()
            if not ws:
                return
            paid = u['paid_until'].isoformat() if u.get('paid_until') else ""
            ws.append_row(
                [datetime.utcnow().isoformat(), str(user_id), "", "", "", u.get('lang', 'ru'), u.get('plan', 'trial'), paid, u.get("mode","gpt")],
                value_input_option="RAW"
            )
        await asyncio.to_thread(_do)
        u["registered_to_sheets"] = True
        save_users()
    except Exception:
        logging.exception("sheets_register_user failed")

async def _sheets_update_user_row_async(user_id: int, username: str, first_name: str, last_name: str, lang: str, plan: str, paid_until: Optional[datetime], mode: str):
    if not _users_ws:
        return
    try:
        def _do():
            ws = _users_ws_get()
            if not ws:
                return
            paid = paid_until.isoformat() if paid_until else ""
            ws.append_row(
                [datetime.utcnow().isoformat(), str(user_id), username or "", first_name or "", last_name or "", lang or "ru", plan or "", paid, mode or "gpt"],
                value_input_option="RAW"
            )
        await asyncio.to_thread(_do)
    except Exception:
        logging.exception("sheets_update_user_row failed")

async def _sheets_append_history_async(user_id: int, role: str, content: str, col1: str = "", col2: str = ""):
    if not _sheets_client:
        return
    try:
        def _do():
            ws = _ws_get(HISTORY_SHEET, ["ts","user_id","role","content","col1","col2"])
            if not ws:
                return
            ws.append_row([_ts(), str(user_id), role, content, col1, col2], value_input_option="RAW")
        await asyncio.to_thread(_do)
    except Exception:
        logging.exception("sheets_append_history failed")

async def _sheets_append_feedback_async(user_id: int, username: str, first_name: str, last_name: str, feedback: str, comment: str = ""):
    if not _sheets_client:
        return
    try:
        def _do():
            ws = _ws_get(FEEDBACK_SHEET, ["ts","user_id","username","first_name","last_name","feedback","comment"])
            if not ws:
                return
            ws.append_row([
                _ts(),
                str(user_id),
                username or "",
                first_name or "",
                last_name or "",
                feedback,
                comment or ""
            ], value_input_option="RAW")
        await asyncio.to_thread(_do)
    except Exception:
        logging.exception("sheets_append_feedback failed")

async def _sheets_append_metric_async(user_id: int, event: str, value: str = "", notes: str = ""):
    if not _sheets_client:
        return
    try:
        def _do():
            ws = _ws_get(METRICS_SHEET, ["ts","user_id","event","value","notes"])
            if not ws:
                return
            ws.append_row([_ts(), str(user_id), event, value, notes], value_input_option="RAW")
        await asyncio.to_thread(_do)
    except Exception:
        logging.exception("sheets_append_metric failed")

# ================== –ë–ï–ó–û–¢–ö–ê–ó–ù–û–°–¢–¨ =================
async def _retry(coro_factory, attempts=3, base_delay=0.8):
    last_exc = None
    for i in range(attempts):
        try:
            return await coro_factory()
        except HTTPStatusError as e:
            if e.response.status_code in (429, 500, 502, 503, 504):
                last_exc = e
            else:
                raise
        except (HTTPError, asyncio.TimeoutError) as e:
            last_exc = e
        await asyncio.sleep(base_delay * (2 ** i) + random.random() * 0.2)
    if last_exc:
        raise last_exc

def _friendly_error_text(e, lang="ru"):
    ru = {
        "timeout": "‚åõ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á—É—Ç—å –ø–æ–∑–∂–µ.",
        "429": "‚è≥ –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –º–æ–¥–µ–ª—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.",
        "401": "üîë –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–ª—é—á–æ–º OpenAI. –°–æ–æ–±—â–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.",
        "402": "üí≥ –ò—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç –æ–ø–ª–∞—Ç—ã OpenAI. –°–æ–æ–±—â–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.",
        "5xx": "‚òÅÔ∏è –ü–æ—Å—Ç–∞–≤—â–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.",
        "generic": "–ò–∑–≤–∏–Ω–∏, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
    }
    uz = {
        "timeout": "‚åõ Manba javob bermayapti. Birozdan so‚Äòng qayta urinib ko‚Äòring.",
        "429": "‚è≥ Modelga yuklama yuqori. Bir daqiqadan so‚Äòng urinib ko‚Äòring.",
        "401": "üîë OpenAI kaliti muammosi. Texnik yordamga yozing.",
        "402": "üí≥ OpenAI to‚Äòlovi limiti tugagan. Texnik yordamga yozing.",
        "5xx": "‚òÅÔ∏è Xizmat vaqtincha ishlamayapti. Keyinroq urinib ko‚Äòring.",
        "generic": "Kechirasiz, hozir javob bera olmadim. Yana urinib ko‚Äòring.",
    }
    M = uz if lang == "uz" else ru
    if isinstance(e, HTTPStatusError):
        code = e.response.status_code
        if code == 429: return M["429"]
        if code == 401: return M["401"]
        if code == 402: return M["402"]
        if 500 <= code <= 599: return M["5xx"]
    if isinstance(e, (HTTPError, asyncio.TimeoutError)):
        return M["timeout"]
    return M["generic"]

# ================== –ò–ò =================
BASE_SYSTEM_PROMPT = (
    "–¢—ã ‚Äî SavolBot (—á–∞—Å—Ç—å TripleA). –†–µ–∂–∏–º: –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –ø–æ –¥–µ–ª—É: 6‚Äì8 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, "
    "—Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Å–ø–∏—Å–∫–∞–º–∏. –õ—ë–≥–∫–∏–π —é–º–æ—Ä –¥–æ–ø—É—Å—Ç–∏–º. –°–æ–±–ª—é–¥–∞–π –∑–∞–∫–æ–Ω—ã –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞. "
    "–ù–µ –¥–∞–≤–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π. –ü–æ –º–µ–¥–∏—Ü–∏–Ω–µ ‚Äî —Ç–æ–ª—å–∫–æ –æ–±—â–∞—è —Å–ø—Ä–∞–≤–∫–∞ + —Å–æ–≤–µ—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É. "
    "–Ø–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞ = —è–∑—ã–∫ –≤–æ–ø—Ä–æ—Å–∞ (RU/UZ). –í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –Ω–µ –≤—Å—Ç–∞–≤–ª—è–π URL –∏ —Å—Å—ã–ª–∫–∏. "
    "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ–¥–∫—É –∏–∑ –ø–æ–∏—Å–∫–∞, –Ω–æ –æ—Ç–≤–µ—á–∞–π —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏. "
    "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π –¥–∞—Ç—É –æ—Ç—Å–µ—á–∫–∏ –∑–Ω–∞–Ω–∏–π. –ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ –∑–Ω–∞–µ—à—å ‚Äî –ø—Ä–æ–≤–µ—Ä—å —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –∏–ª–∏ —á–µ—Å—Ç–Ω–æ –ø—Ä–∏–∑–Ω–∞–π—Å—è."
)

LEGAL_SYSTEM_PROMPT = (
    "–¢—ã ‚Äî SavolBot (TripleA), —Ä–µ–∂–∏–º ‚öñÔ∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –†–µ—Å–ø—É–±–ª–∏–∫–∏ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω. "
    "–î–∞–π –æ–±–æ–±—â—ë–Ω–Ω—É—é –ø—Ä–∞–≤–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ù–ï –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. "
    "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–ø–∏—Ä–∞–π—Å—è –Ω–∞ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ù–ü–ê –∏–∑ lex.uz (–∑–∞–∫–æ–Ω, –∫–æ–¥–µ–∫—Å, –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –¥—Ä.). "
    "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: 1) —É–∫–∞–∂–∏ —Ç–æ—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–∫—Ç–æ–≤ –∏ –Ω–æ–º–µ—Ä–∞ —Å—Ç–∞—Ç–µ–π/–ø—É–Ω–∫—Ç–æ–≤; 2) –¥–æ–±–∞–≤—å —Å—Å—ã–ª–∫–∏ –Ω–∞ lex.uz; "
    "3) –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏; 4) –µ—Å–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –Ω–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –µ—Å—Ç—å —Ä–∏—Å–∫ —É—Å—Ç–∞—Ä–µ–≤–∞–Ω–∏—è ‚Äî –ø—Ä—è–º–æ –Ω–∞–ø–∏—à–∏ –æ–± —ç—Ç–æ–º; "
    "5) –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π. –Ø–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞ = —è–∑—ã–∫ –≤–æ–ø—Ä–æ—Å–∞ (RU/UZ). –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ, —á—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ/–∑–∞–ø—Ä–µ—â–µ–Ω–æ, "
    "–ø—Ä–æ—Ü–µ–¥—É—Ä–∞ (—à–∞–≥–∏, –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Å—Ä–æ–∫–∏ –∏ –æ—Ä–≥–∞–Ω—ã), –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å/—à—Ç—Ä–∞—Ñ—ã (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ), '–ò—Å—Ç–æ—á–Ω–∏–∫–∏' (—Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ lex.uz), "
    "–∏ —Å—Ç—Ä–æ–∫–∞ '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: <–¥–∞—Ç–∞ –ø–æ –¢–∞—à–∫–µ–Ω—Ç—É>'."
)

# ==== –î–∏–Ω–∞–º–∏–∫–∞/–∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å ====
TIME_SENSITIVE_PATTERNS = [
    r"\b(—Å–µ–≥–æ–¥–Ω—è|—Å–µ–π—á–∞—Å|–Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç|–∞–∫—Ç—É–∞–ª—å–Ω|–≤ \d{4} –≥–æ–¥—É|–≤ 20\d{2})\b",
    r"\b(–∫—É—Ä—Å|–∑–∞—Ä–ø–ª–∞—Ç|–∏–Ω—Ñ–ª—è—Ü|—Å—Ç–∞–≤–∫|—Ü–µ–Ω–∞|–Ω–æ–≤–æ—Å—Ç|—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫|–ø—Ä–æ–≥–Ω–æ–∑)\b",
    r"\b(bugun|hozir|narx|kurs|yangilik)\b",
    r"\b(–∫—Ç–æ|–∫–∞–∫ –∑–æ–≤—É—Ç|–ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª|–¥–∏—Ä–µ–∫—Ç–æ—Ä|ceo|—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª)\b",
]
def is_time_sensitive(q: str) -> bool:
    return any(re.search(rx, q.lower()) for rx in TIME_SENSITIVE_PATTERNS)

_DYNAMIC_KEYWORDS = [
    "–∫—É—Ä—Å", "—Å—Ç–∞–≤–∫", "–∏–Ω—Ñ–ª—è—Ü", "–∑–∞—Ä–ø–ª–∞—Ç", "–Ω–∞–ª–æ–≥", "—Ü–µ–Ω–∞", "—Ç–∞—Ä–∏—Ñ", "–ø–æ—Å–æ–±–∏", "–ø–µ–Ω—Å–∏", "–∫—Ä–µ–¥–∏—Ç",
    "–Ω–æ–≤–æ—Å—Ç", "–ø—Ä–æ–≥–Ω–æ–∑", "–∏–∑–º–µ–Ω–µ–Ω–∏", "–æ–±–Ω–æ–≤–ª–µ–Ω–∏", "statistika", "narx", "stavka", "yangilik", "price", "rate",
]
def _contains_fresh_year(s: str, window: int = 3) -> bool:
    try:
        y_now = datetime.utcnow().year
    except Exception:
        y_now = 2025
    years = [int(y) for y in re.findall(r"\b(20\d{2})\b", s or "")]
    return any(y_now - y <= window for y in years)

def _looks_dynamic(*texts: str) -> bool:
    low = " ".join([t.lower() for t in texts if t])
    return any(k in low for k in _DYNAMIC_KEYWORDS) or _contains_fresh_year(low)

def _tz_tashkent_date() -> str:
    dt = datetime.utcnow() + timedelta(hours=5)  # UTC+5
    return dt.strftime("%d.%m.%Y")

# ================== –í–ù–ï–®–ù–ò–ï –ó–ê–ü–†–û–°–´ (GPT + –ü–æ–∏—Å–∫) =================
async def ask_gpt(user_text: str, topic_hint: Optional[str], user_id: int, system_prompt: str, allow_links: bool) -> str:
    if not OPENAI_API_KEY:
        return f"–í—ã —Å–ø—Ä–æ—Å–∏–ª–∏: {user_text}"

    system = system_prompt + (f" –£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–º—ã: {topic_hint}" if topic_hint else "")
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
    payload = {
        "model": OPENAI_MODEL,
        "temperature": 0.6,
        "messages": build_messages(user_id, system, user_text),
    }

    async def _do():
        return await client_openai.post("/chat/completions", headers=headers, json=payload)

    try:
        async with _model_sem:
            r = await _retry(lambda: _do(), attempts=3)
        r.raise_for_status()
        raw = r.json()["choices"][0]["message"]["content"].strip()
        if re.search(r"\bknowledge\s+cutoff\b", raw, re.I) and TAVILY_API_KEY:
            try:
                return await answer_with_live_search(user_text, topic_hint, user_id, system_prompt, allow_links=allow_links)
            except Exception:
                pass
        return strip_links_and_cleanup(_sanitize_cutoff(raw), allow_links=allow_links)
    except Exception as e:
        logging.exception("ask_gpt failed")
        u = USERS.get(user_id, {"lang": "ru"})
        return _friendly_error_text(e, u.get("lang", "ru"))

async def web_search_tavily(query: str, max_results: int = 3, include_domains: Optional[list[str]] = None, depth: Optional[str] = None) -> Optional[dict]:
    if not TAVILY_API_KEY or client_http is None:
        return None
    if depth is None:
        depth = "advanced" if is_time_sensitive(query) else "basic"
    payload = {
        "api_key": TAVILY_API_KEY,
        "query": query,
        "search_depth": depth,
        "max_results": max_results,
        "include_answer": True,
        "include_domains": include_domains or [],
    }

    async def _do():
        return await client_http.post("https://api.tavily.com/search", json=payload)

    try:
        r = await _retry(lambda: _do(), attempts=2)
        r.raise_for_status()
        return r.json()
    except Exception as e:
        logging.warning("tavily search failed: %s", e)
        return None

async def answer_with_live_search(user_text: str, topic_hint: Optional[str], user_id: int, system_prompt: str, allow_links: bool = False) -> str:
    data = await web_search_tavily(user_text, max_results=4)
    if not data:
        return await ask_gpt(user_text, topic_hint, user_id, system_prompt, allow_links=allow_links)

    snippets = []
    for it in (data.get("results") or [])[:4]:
        title = (it.get("title") or "")[:100]
        content = (it.get("content") or "")[:500]
        snippets.append(f"- {title}\n{content}")

    system = system_prompt + " –û—Ç–≤–µ—á–∞–π, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–≤–æ–¥–∫—É (–±–µ–∑ —Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ). –ö—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É."
    if topic_hint:
        system += f" –£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {topic_hint}"
    user_aug = f"{user_text}\n\n–°–í–û–î–ö–ê –ò–°–¢–û–ß–ù–ò–ö–û–í (–±–µ–∑ URL):\n" + "\n\n".join(snippets)

    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
    payload = {"model": OPENAI_MODEL, "temperature": 0.35, "messages": build_messages(user_id, system, user_aug)}

    async def _do():
        return await client_openai.post("/chat/completions", headers=headers, json=payload)

    try:
        async with _model_sem:
            r = await _retry(lambda: _do(), attempts=3)
        r.raise_for_status()
        answer = r.json()["choices"][0]["message"]["content"].strip()
        final = strip_links_and_cleanup(_sanitize_cutoff(answer), allow_links=allow_links)

        if _looks_dynamic(user_text, final):
            final += f"\n\n_–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {_tz_tashkent_date()}_"
        return final
    except Exception as e:
        logging.exception("live answer failed")
        u = USERS.get(user_id, {"lang": "ru"})
        return _friendly_error_text(e, u.get("lang", "ru"))

# --- LEGAL (—Ç–æ–ª—å–∫–æ lex.uz) ---
async def legal_search_lex(query: str, max_results: int = 5) -> Optional[dict]:
    if not TAVILY_API_KEY or client_http is None:
        return None
    payload = {
        "api_key": TAVILY_API_KEY,
        "query": query,
        "search_depth": "advanced",
        "max_results": max_results,
        "include_answer": False,
        "include_domains": ["lex.uz"],
    }
    async def _do():
        return await client_http.post("https://api.tavily.com/search", json=payload)
    try:
        r = await _retry(lambda: _do(), attempts=2)
        r.raise_for_status()
        return r.json()
    except Exception as e:
        logging.warning("legal search failed: %s", e)
        return None

def _format_lex_results(data: dict, limit: int = 5) -> list[dict]:
    items = []
    for it in (data.get("results") or [])[:limit]:
        url = it.get("url") or ""
        if "lex.uz" not in url:
            continue
        items.append({
            "title": (it.get("title") or "").strip(),
            "snippet": (it.get("content") or "").strip(),
            "url": url
        })
    return items

async def answer_legal(user_text: str, user_id: int) -> str:
    data = await legal_search_lex(user_text, max_results=6)
    sources = _format_lex_results(data or {}, limit=5) if data else []
    if not sources:
        return ("–ù–µ –Ω–∞—à—ë–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–π –Ω–æ—Ä–º—ã –Ω–∞ lex.uz –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É. "
                "–£—Ç–æ—á–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É (–∑–∞–∫–æ–Ω/—Å—Ñ–µ—Ä–∞) –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —é—Ä–∏—Å—Ç—É.")
    brief = []
    for s in sources:
        t = (s["title"] or "")[:120]
        sn = (s["snippet"] or "")[:600]
        brief.append(f"- {t}\n{sn}\n{s['url']}")
    user_aug = f"–í–û–ü–†–û–°:\n{user_text}\n\n–ù–ê–ô–î–ï–ù–ù–´–ï –î–û–ö–£–ú–ï–ù–¢–´ (lex.uz):\n" + "\n\n".join(brief)

    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
    payload = {
        "model": OPENAI_MODEL,
        "temperature": 0.1,
        "messages": build_messages(user_id, LEGAL_SYSTEM_PROMPT, user_aug),
    }
    async def _do():
        return await client_openai.post("/chat/completions", headers=headers, json=payload)
    try:
        async with _model_sem:
            r = await _retry(lambda: _do(), attempts=3)
        r.raise_for_status()
        text = r.json()["choices"][0]["message"]["content"].strip()
        return strip_links_and_cleanup(_sanitize_cutoff(text), allow_links=True)
    except Exception as e:
        logging.exception("answer_legal failed")
        u = USERS.get(user_id, {"lang": "ru"})
        return _friendly_error_text(e, u.get("lang","ru"))

# ================== FEEDBACK / UI =================
def feedback_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üëç –û–∫", callback_data="fb:ok"),
            InlineKeyboardButton(text="üëé –ù–µ –æ–∫", callback_data="fb:bad"),
        ],
        [InlineKeyboardButton(text="‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="fb:comment")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ó–∞–∫—Ä—ã—Ç—å", callback_data="fb:close")],
    ])

FEEDBACK_PENDING: set[int] = set()

# ================== SAFE HELPERS =================
async def safe_answer(msg: Message, text: str, **kwargs):
    try:
        return await msg.answer(text, **kwargs)
    except TelegramBadRequest as e:
        logging.warning("answer failed: %s", e)
    except Exception:
        logging.exception("answer fatal")

async def safe_edit_text(msg, text: str, **kwargs):
    try:
        return await msg.edit_text(text, **kwargs)
    except TelegramBadRequest as e:
        logging.warning("edit_text failed: %s", e)
    except Exception:
        logging.exception("edit_text fatal")

async def safe_edit_reply_markup(msg, **kwargs):
    try:
        return await msg.edit_reply_markup(**kwargs)
    except TelegramBadRequest as e:
        logging.warning("edit_reply_markup failed: %s", e)
    except Exception:
        logging.exception("edit_reply_markup fatal")

async def safe_delete(msg):
    try:
        return await msg.delete()
    except TelegramBadRequest as e:
        logging.warning("delete failed: %s", e)
    except Exception:
        logging.exception("delete fatal")

# ================== –ö–õ–ê–í–ò–ê–¢–£–†–´ / –¢–ï–ö–°–¢–´ =================
WELCOME_RU = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî SavolBot, —á–∞—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã TripleA.\n"
    "–¢–µ–ø–µ—Ä—å —É –º–µ–Ω—è –î–í–ê —Ä–µ–∂–∏–º–∞:\n"
    "‚Ä¢ üë§ –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ (GPT)\n"
    "‚Ä¢ ‚öñÔ∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç (—Ç–æ–ª—å–∫–æ lex.uz, –±–µ–∑ —Ñ–∞–Ω—Ç–∞–∑–∏–π)\n\n"
    "–¢–∞—Ä–∏—Ñ ‚≠ê Creative: $10/–º–µ—Å, 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ. /tariffs\n"
    "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º: /mode  ‚Ä¢ –ü—Ä–∞–≤–∏–ª–∞ —é—Ä-—Ä–∞–∑–¥–µ–ª–∞: /legal_rules"
)
WELCOME_UZ = (
    "üëã Salom! Men ‚Äî SavolBot, TripleA jamoasi.\n"
    "Endi IKKI rejim:\n"
    "‚Ä¢ üë§ Kundalik yordamchi (GPT)\n"
    "‚Ä¢ ‚öñÔ∏è Yuridik maslahatchi (faqat lex.uz)\n\n"
    "‚≠ê Creative: $10/oy, 7 kun bepul. /tariffs\n"
    "Rejimni almashtirish: /mode  ‚Ä¢ Qoidalar: /legal_rules"
)

TOPICS = {
    "daily":   {"title_ru": "–ë—ã—Ç", "title_uz": "Maishiy", "hint": "–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã, —á–µ–∫-–ª–∏—Å—Ç—ã –∏ —à–∞–≥–∏."},
    "finance": {"title_ru": "–§–∏–Ω–∞–Ω—Å—ã", "title_uz": "Moliya", "hint": "–û–±—ä—è—Å–Ω—è–π —Å —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏. –ë–µ–∑ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."},
    "gov":     {"title_ru": "–ì–æ—Å—É—Å–ª—É–≥–∏", "title_uz": "Davlat xizmatlari", "hint": "–û–ø–∏—à–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —à–∞–≥–∏ –ø–æ–¥–∞—á–∏."},
    "biz":     {"title_ru": "–ë–∏–∑–Ω–µ—Å", "title_uz": "Biznes", "hint": "–ö—Ä–∞—Ç–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏/–¥–æ–∫—É–º–µ–Ω—Ç–∞–º."},
    "edu":     {"title_ru": "–£—á—ë–±–∞", "title_uz": "Ta‚Äôlim", "hint": "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ/–æ–±—É—á–µ–Ω–∏–µ –∏ —à–∞–≥–∏."},
    "it":      {"title_ru": "IT", "title_uz": "IT", "hint": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ. –ù–µ —Å–æ–≤–µ—Ç—É–π –Ω–∏—á–µ–≥–æ –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–≥–æ."},
    "health":  {"title_ru": "–ó–¥–æ—Ä–æ–≤—å–µ (–æ–±—â.)", "title_uz": "Sog‚Äòliq (umumiy)", "hint": "–¢–æ–ª—å–∫–æ –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –°–æ–≤–µ—Ç—É–π –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É."},
}

def topic_kb(lang="ru", current=None):
    rows = []
    for key, t in TOPICS.items():
        label = t["title_uz"] if lang == "uz" else t["title_ru"]
        if current == key:
            label = f"‚úÖ {label}"
        rows.append([InlineKeyboardButton(text=label, callback_data=f"topic:{key}")])
    rows.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ó–∞–∫—Ä—ã—Ç—å / Yopish", callback_data="topic:close")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def mode_kb(lang="ru", current=None):
    gpt = "üß∞ GPT-–ø–æ–º–æ—â–Ω–∏–∫" if lang == "ru" else "üß∞ GPT-yordamchi"
    legal = "‚öñÔ∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç" if lang == "ru" else "‚öñÔ∏è Yuridik maslahatchi"
    rows = [
        [InlineKeyboardButton(text=("‚úÖ " + gpt) if current == "gpt" else gpt, callback_data="mode:gpt")],
        [InlineKeyboardButton(text=("‚úÖ " + legal) if current == "legal" else legal, callback_data="mode:legal")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ó–∞–∫—Ä—ã—Ç—å / Yopish", callback_data="mode:close")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)

# ================== –ö–û–ú–ê–ù–î–´ =================
@dp.message(Command("start"))
async def cmd_start(message: Message):
    u = get_user(message.from_user.id)
    u["lang"] = "uz" if is_uzbek(message.text or "") else "ru"; save_users()
    try:
        loop = asyncio.get_running_loop()
        loop.create_task(_sheets_register_user_async(message.from_user.id))
        loop.create_task(_sheets_append_metric_async(message.from_user.id, "cmd", "start"))
        loop.create_task(_sheets_append_history_async(message.from_user.id, "user", "/start"))
    except RuntimeError:
        pass
    hello = WELCOME_UZ if u["lang"] == "uz" else WELCOME_RU
    await message.answer(hello)
    try:
        asyncio.get_running_loop().create_task(_sheets_append_history_async(message.from_user.id, "assistant", hello))
    except RuntimeError:
        pass

@dp.errors()
async def on_error(event: ErrorEvent):
    exc = getattr(event, "exception", None)
    logging.exception("Unhandled error: %s | event=%s", exc, repr(event))

    try:
        chat_id = None
        upd = getattr(event, "update", None)
        if upd:
            if getattr(upd, "message", None):
                chat_id = upd.message.chat.id
            elif getattr(upd, "callback_query", None) and getattr(upd.callback_query, "message", None):
                chat_id = upd.callback_query.message.chat.id

        if chat_id and bot:
            await bot.send_message(chat_id, "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
    except Exception:
        pass

@dp.message(Command("help"))
async def cmd_help(message: Message):
    u = get_user(message.from_user.id)
    if u["lang"] == "ru":
        txt = "‚ÑπÔ∏è –Ø —É–º–µ—é: –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (GPT) –∏ —é—Ä-—Ä–∞–∑–¥–µ–ª –ø–æ lex.uz.\n/tariffs ‚Äî —Ç–∞—Ä–∏—Ñ, /myplan ‚Äî –ø–ª–∞–Ω, /topics ‚Äî —Ç–µ–º—ã, /mode ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤, /legal_rules ‚Äî –ø—Ä–∞–≤–∏–ª–∞ —é—Ä-—Ä–∞–∑–¥–µ–ª–∞."
    else:
        txt = "‚ÑπÔ∏è Men kundalik rejim (GPT) va yuridik bo‚Äòlim (faqat lex.uz) bilan ishlayman.\n/tariffs, /myplan, /topics, /mode, /legal_rules ‚Äî foydali buyruqlar."
    await message.answer(txt)
    try:
        asyncio.get_running_loop().create_task(_sheets_append_history_async(message.from_user.id, "assistant", txt))
    except RuntimeError:
        pass

@dp.message(Command("about"))
async def cmd_about(message: Message):
    u = get_user(message.from_user.id)
    if u.get("lang", "ru") == "ru":
        txt = (
            "ü§ñ SavolBot –æ—Ç TripleA ‚Äî –¥–≤–∞ —Ä–µ–∂–∏–º–∞:\n"
            "1) üß∞ –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º (GPT): –∏–¥–µ–∏, —Ç–µ–∫—Å—Ç—ã, —Å–æ–≤–µ—Ç—ã.\n"
            "2) ‚öñÔ∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç: —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–∫–æ–Ω–∞–º –†–£–∑, —Å –ø—Ä—è–º—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ lex.uz, –±–µ–∑ –¥–æ–º—ã—Å–ª–æ–≤.\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/mode ‚Äî –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º\n"
            "/tariffs ‚Äî —Ç–∞—Ä–∏—Ñ\n"
            "/myplan ‚Äî –º–æ–π –ø–ª–∞–Ω\n"
            "/topics ‚Äî —Ç–µ–º—ã (–¥–ª—è GPT)\n"
            "/new ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç"
        )
    else:
        txt = (
            "ü§ñ SavolBot (TripleA) ‚Äî ikki rejim:\n"
            "1) üß∞ Kundalik yordamchi (GPT): g‚Äòoyalar, matnlar, maslahatlar.\n"
            "2) ‚öñÔ∏è Yuridik maslahatchi: faqat O‚ÄòzR qon—É–Ωlari, lex.uz havolalari bilan, taxminsiz.\n\n"
            "Buyruqlar:\n"
            "/mode ‚Äî rejim tanlash\n"
            "/tariffs ‚Äî tarif\n"
            "/myplan ‚Äî reja\n"
            "/topics ‚Äî mavzular (GPT uchun)\n"
            "/new ‚Äî kontekstni tozalash"
        )
    await safe_answer(message, txt, reply_markup=mode_kb(u.get("lang","ru"), current=get_mode(message.from_user.id)))

# ================== –†–ï–ñ–ò–ú–´: GPT / LEGAL ==================
def get_mode(user_id: int) -> str:
    u = get_user(user_id)
    if not u.get("mode"):
        u["mode"] = "gpt"; save_users()
    return u["mode"]

def set_mode(user_id: int, mode: str):
    u = get_user(user_id); u["mode"] = mode; save_users()

@dp.message(Command("mode"))
async def cmd_mode(message: Message):
    u = get_user(message.from_user.id)
    head = "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:" if u.get("lang","ru") == "ru" else "Rejimni tanlang:"
    await safe_answer(message, head, reply_markup=mode_kb(u.get("lang","ru"), current=get_mode(message.from_user.id)))

@dp.callback_query(F.data.startswith("mode:"))
async def cb_mode(call: CallbackQuery):
    u = get_user(call.from_user.id)
    _, m = call.data.split(":", 1)
    if m == "close":
        await safe_delete(call.message)
        return await call.answer("OK")
    if m in ("gpt", "legal"):
        set_mode(call.from_user.id, m)
        lang = u.get("lang","ru")
        label = ("GPT-–ø–æ–º–æ—â–Ω–∏–∫" if lang=="ru" else "GPT-yordamchi") if m=="gpt" else ("–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç" if lang=="ru" else "Yuridik maslahatchi")
        await safe_edit_reply_markup(call.message, reply_markup=mode_kb(lang, current=m))
        return await call.answer(("–†–µ–∂–∏–º: " + label) if lang == "ru" else ("Rejim: " + label))

LEGAL_RULES_RU = (
    "‚öñÔ∏è –ü—Ä–∞–≤–∏–ª–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞:\n"
    "‚Ä¢ –û—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–º–∫–∞—Ö –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω –∏ —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –Ω–æ—Ä–º–∞–º —Å lex.uz.\n"
    "‚Ä¢ –ï—Å–ª–∏ –Ω–µ –Ω–∞—Ö–æ–∂—É —Ç–æ—á–Ω—É—é –Ω–æ—Ä–º—É ‚Äî —á–µ—Å—Ç–Ω–æ —Å–æ–æ–±—â–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç, –±–µ–∑ –¥–æ–º—ã—Å–ª–æ–≤.\n"
    "‚Ä¢ –î–∞—é –∫–æ—Ä–æ—Ç–∫–∏–µ –≤—ã–¥–µ—Ä–∂–∫–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ç–∞—Ç—å–∏/–ø—É–Ω–∫—Ç–∞ –∏ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ lex.uz.\n"
    "‚Ä¢ –≠—Ç–æ –Ω–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å –∏ –Ω–µ –∑–∞–º–µ–Ω–∞ –∞–¥–≤–æ–∫–∞—Ç—É."
)
LEGAL_RULES_UZ = (
    "‚öñÔ∏è Yuridik bo‚Äòlim qoidalari:\n"
    "‚Ä¢ Faqat O‚Äòzbekiston Respublikasi qonunchiligiga tayangan holda va faqat lex.uz manbalari bilan javob beraman.\n"
    "‚Ä¢ Aniq norma topilmasa ‚Äî taxminsiz, halol javob: hozircha topilmadi.\n"
    "‚Ä¢ Qisqa iqtiboslar: modda/band raqami va to‚Äòg‚Äòridan-to‚Äòg‚Äòri lex.uz havolasi bilan.\n"
    "‚Ä¢ Bu shaxsiy yuridik yordam emas, advokat o‚Äòrnini bosa olmaydi."
)

@dp.message(Command("legal"))
async def cmd_legal(message: Message):
    u = get_user(message.from_user.id)
    set_mode(message.from_user.id, "legal")
    txt_rules = LEGAL_RULES_RU if u.get("lang","ru") == "ru" else LEGAL_RULES_UZ
    head = "–†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω: ‚öñÔ∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç.\n\n" if u.get("lang","ru")=="ru" else "Rejim almashtirildi: ‚öñÔ∏è Yuridik maslahatchi.\n\n"
    await safe_answer(message, head + txt_rules, reply_markup=mode_kb(u.get("lang","ru"), current="legal"))

# ================== –¢–ï–ö–°–¢-–•–ï–ù–î–õ–ï–† ==================
@dp.message(F.text)
async def handle_text(message: Message):
    text = (message.text or "").strip()
    uid = message.from_user.id
    u = get_user(uid)

    # –Ø–∑—ã–∫
    if is_uzbek(text):
        u["lang"] = "uz"; save_users()

    # –§–∏–¥–±–µ–∫-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    if uid in FEEDBACK_PENDING:
        FEEDBACK_PENDING.discard(uid)
        comment_text = text
        try:
            loop = asyncio.get_running_loop()
            loop.create_task(_sheets_append_feedback_async(
                uid, message.from_user.username or "", message.from_user.first_name or "",
                message.from_user.last_name or "", "comment_only", comment_text
            ))
            loop.create_task(_sheets_append_metric_async(uid, "feedback", "comment"))
        except RuntimeError:
            pass
        ok_txt = "–°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ –∑–∞–ø–∏—Å–∞–Ω üôå" if u["lang"]=="ru" else "Rahmat! Fikringiz yozib olindi üôå"
        await message.answer(ok_txt)
        append_history(uid, "user", comment_text)
        append_history(uid, "assistant", ok_txt)
        try:
            asyncio.get_running_loop().create_task(_sheets_append_history_async(uid, "user", comment_text))
            asyncio.get_running_loop().create_task(_sheets_append_history_async(uid, "assistant", ok_txt))
        except RuntimeError:
            pass
        return

    # –ü–æ–ª–∏—Ç–∏–∫–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    low = text.lower()
    if any(re.search(rx, low) for rx in ILLEGAL_PATTERNS):
        deny = DENY_TEXT_UZ if u["lang"] == "uz" else DENY_TEXT_RU
        await safe_answer(message, deny)
        try:
            loop = asyncio.get_running_loop()
            loop.create_task(_sheets_append_history_async(uid, "user", text))
            loop.create_task(_sheets_append_history_async(uid, "assistant", deny))
            loop.create_task(_sheets_append_metric_async(uid, "deny", "policy"))
        except RuntimeError:
            pass
        return

    # Paywall (–µ—Å–ª–∏ –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ)
    if (uid not in WHITELIST_USERS) and (not has_active_sub(u)):
        txt = "üí≥ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ ‚≠ê Creative, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:"
        await safe_answer(message, txt, reply_markup=pay_kb())
        try:
            loop = asyncio.get_running_loop()
            loop.create_task(_sheets_append_history_async(uid, "user", text))
            loop.create_task(_sheets_append_history_async(uid, "assistant", txt))
            loop.create_task(_sheets_append_metric_async(uid, "paywall", "shown"))
        except RuntimeError:
            pass
        return

    # –ó–∞–ø–∏—à–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é + –∏—Å—Ç–æ—Ä–∏—é/–º–µ—Ç—Ä–∏–∫–∏
    try:
        loop = asyncio.get_running_loop()
        loop.create_task(_sheets_update_user_row_async(
            uid,
            (message.from_user.username or ""),
            (message.from_user.first_name or ""),
            (message.from_user.last_name or ""),
            u.get("lang", "ru"),
            u.get("plan", "trial"),
            u.get("paid_until"),
            u.get("mode", "gpt"),
        ))
        loop.create_task(_sheets_append_history_async(uid, "user", text))
        loop.create_task(_sheets_append_metric_async(uid, "msg", value=str(len(text)), notes="user_len"))
    except RuntimeError:
        pass

    # –†–æ—É—Ç–∏–Ω–≥ –ø–æ —Ä–µ–∂–∏–º–∞–º
    cur_mode = get_mode(uid)

    # –û—á–µ—Ä–µ–¥—å + ACK
    topic_hint = TOPICS.get(u.get("topic"), {}).get("hint")
    use_live = (cur_mode == "legal") or FORCE_LIVE or is_time_sensitive(text)

    if cur_mode == "legal":
        # LEGAL –æ—Ç–≤–µ—Ç (–±–µ–∑ –æ—á–µ—Ä–µ–¥–∏)
        try:
            reply = await asyncio.wait_for(answer_legal(text, uid), timeout=REPLY_TIMEOUT_SEC)
            reply = strip_links_and_cleanup(reply, allow_links=True)
        except asyncio.TimeoutError:
            reply = _friendly_error_text(asyncio.TimeoutError(), u.get("lang","ru"))
        except Exception as e:
            logging.exception("legal reply fatal")
            reply = _friendly_error_text(e, u.get("lang","ru"))
        await safe_answer(message, reply)

        append_history(uid, "assistant", reply)
        try:
            loop = asyncio.get_running_loop()
            loop.create_task(_sheets_append_history_async(uid, "assistant", reply))
            loop.create_task(_sheets_append_metric_async(uid, "msg", value=str(len(reply)), notes="assistant_len_legal"))
        except RuntimeError:
            pass
        return

    # GPT —Ä–µ–∂–∏–º ‚Äî —Å—Ç–∞–≤–∏–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
    task = SavolTask(
        chat_id=message.chat.id,
        uid=uid,
        text=text,
        lang=u.get("lang","ru"),
        topic_hint=topic_hint,
        use_live=use_live,
    )
    SAVOL_QUEUE.put_nowait(task)

    pos = SAVOL_QUEUE.qsize()
    if pos >= QUEUE_NOTICE_THRESHOLD:
        eta = _eta_seconds(pos)
        if u.get("lang","ru") == "uz":
            ack = f"‚è≥ So‚Äòrov navbatga qo‚Äòyildi (‚Ññ{pos}). Taxminiy kutish ~ {eta} soniya. Javob shu yerga keladi."
        else:
            ack = f"‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å (‚Ññ{pos}). –û–∂–∏–¥–∞–Ω–∏–µ ~ {eta} —Å–µ–∫. –û—Ç–≤–µ—Ç –ø—Ä–∏–¥—ë—Ç —Å—é–¥–∞."
    else:
        ack = "üîé Qabul qildim! Fikr yuritayapman ‚Äî javob tez orada keladi." if u.get("lang","ru")=="uz" else "üîé –ü—Ä–∏–Ω—è–ª! –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º ‚Äî –ø—Ä–∏—à–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —á—É—Ç—å –ø–æ–∑–∂–µ."

    await safe_answer(message, ack)
    append_history(uid, "assistant", ack)
    try:
        asyncio.get_running_loop().create_task(_sheets_append_history_async(uid, "assistant", ack))
    except RuntimeError:
        pass

# ================== –û–ß–ï–†–ï–î–¨/–í–û–†–ö–ï–†–´ =================
@dataclass
class SavolTask:
    chat_id: int
    uid: int
    text: str
    lang: str = "ru"
    topic_hint: Optional[str] = None
    use_live: bool = False

REPLY_TIMEOUT_SEC = int(os.getenv("REPLY_TIMEOUT_SEC", "15"))

async def _process_task(t: SavolTask):
    u = get_user(t.uid)
    allow_links = False
    system_prompt = BASE_SYSTEM_PROMPT
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞
    try:
        if t.use_live and TAVILY_API_KEY:
            draft = await asyncio.wait_for(
                answer_with_live_search(t.text, t.topic_hint, t.uid, system_prompt, allow_links=allow_links),
                timeout=REPLY_TIMEOUT_SEC
            )
        else:
            draft = await asyncio.wait_for(
                ask_gpt(t.text, t.topic_hint, t.uid, system_prompt, allow_links=allow_links),
                timeout=REPLY_TIMEOUT_SEC
            )
    except asyncio.TimeoutError:
        draft = _friendly_error_text(asyncio.TimeoutError(), u.get("lang","ru"))
    except Exception as e:
        logging.exception("process_task draft failed")
        draft = _friendly_error_text(e, u.get("lang","ru"))

    # –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏–∫–∏ –ø–æ –∂–µ–ª–∞–Ω–∏—é
    final = draft
    if VERIFY_DYNAMIC and _looks_dynamic(t.text, draft) and TAVILY_API_KEY:
        try:
            final = await asyncio.wait_for(
                verify_with_live_sources(t.text, draft, t.topic_hint, t.uid),
                timeout=VERIFY_TIMEOUT_SEC
            )
        except Exception:
            pass

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —á–∞—Ç
    try:
        if bot:
            await bot.send_message(t.chat_id, final, reply_markup=feedback_kb())
    except Exception:
        logging.exception("send_message failed")

    # –ò—Å—Ç–æ—Ä–∏—è/–º–µ—Ç—Ä–∏–∫–∏
    append_history(t.uid, "assistant", final)
    try:
        loop = asyncio.get_running_loop()
        loop.create_task(_sheets_append_history_async(t.uid, "assistant", final))
        loop.create_task(_sheets_append_metric_async(t.uid, "msg", value=str(len(final)), notes="assistant_len"))
    except RuntimeError:
        pass

async def _queue_worker(name: str):
    logging.info("worker %s: started", name)
    while True:
        t: SavolTask = await SAVOL_QUEUE.get()
        try:
            await _process_task(t)
        except Exception:
            logging.exception("worker %s: task failed", name)
        finally:
            SAVOL_QUEUE.task_done()

# ================== LIFESPAN & APP =================
@asynccontextmanager
async def lifespan(app: FastAPI):
    # –ª–æ–∫–∞–ª—å–Ω—ã–µ –±–∞–∑—ã
    load_users()
    load_history()

    # Sheets
    _init_sheets()

    # HTTPX
    HTTP2_ENABLED = os.getenv("HTTP2_ENABLED", "0") == "1"
    try:
        import h2  # noqa
        _h2_ok = True
    except Exception:
        _h2_ok = False
    use_http2 = HTTP2_ENABLED and _h2_ok

    global client_openai, client_http
    client_openai = httpx.AsyncClient(base_url=OPENAI_API_BASE, timeout=HTTPX_TIMEOUT, http2=use_http2)
    client_http = httpx.AsyncClient(timeout=HTTPX_TIMEOUT, http2=use_http2)

    # –í–µ–±—Ö—É–∫ Telegram
    if TELEGRAM_TOKEN and WEBHOOK_URL and client_http:
        try:
            resp = await client_http.post(
                f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook",
                json={
                    "url": WEBHOOK_URL,
                    "secret_token": WEBHOOK_SECRET,
                    "drop_pending_updates": True,
                    "max_connections": 80,
                    "allowed_updates": ["message", "callback_query"],
                },
            )
            logging.info("setWebhook: %s %s", resp.status_code, resp.text)
        except Exception:
            logging.exception("Failed to set webhook")

    # –°—Ç–∞—Ä—Ç –≤–æ—Ä–∫–µ—Ä–æ–≤
    worker_tasks = []
    try:
        for i in range(WORKER_CONCURRENCY):
            worker_tasks.append(asyncio.create_task(_queue_worker(f"w{i+1}")))
        logging.info("Queue workers started: %s", WORKER_CONCURRENCY)
    except Exception:
        logging.exception("Failed to start workers")

    try:
        yield
    finally:
        try:
            for t in worker_tasks:
                t.cancel()
            await asyncio.gather(*worker_tasks, return_exceptions=True)
        except Exception:
            pass
        try:
            if client_openai:
                await client_openai.aclose()
        except Exception:
            pass
        try:
            if client_http:
                await client_http.aclose()
        except Exception:
            pass

# === FastAPI app (–í–ê–ñ–ù–û: –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ) ===
app = FastAPI(lifespan=lifespan)

# ================== WEBHOOK =================
@app.post("/webhook")
async def telegram_webhook(request: Request):
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        return {"ok": False, "error": "bad secret"}
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}

@app.get("/health")
async def health():
    return {"status": "ok"}
