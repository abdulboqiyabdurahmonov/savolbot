import os
import re
import logging
from datetime import datetime, timedelta

import httpx
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, Update, InlineKeyboardMarkup, InlineKeyboardButton

logging.basicConfig(level=logging.INFO)

# === ENV ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # https://savolbot.onrender.com/webhook
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "savol_secret")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_API_BASE = os.getenv("OPENAI_API_BASE", "https://api.openai.com/v1")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")

# –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ —É–¥–æ–±–Ω–æ –¥–ª—è —Ä—É—á–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # –Ω–∞–ø—Ä–∏–º–µ—Ä 123456789 (—Å—Ç—Ä–æ–∫–æ–π –æ–∫)

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
app = FastAPI()

# ====== –ú–æ–¥–µ—Ä–∞—Ü–∏—è: –≤ —Ä–∞–º–∫–∞—Ö –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –†–£–∑ ======
ILLEGAL_PATTERNS = [
    r"\b(–≤–∑–ª–æ–º|–≤–∑–ª–∞–º—ã–≤|—Ö–∞–∫|—Ö–∞–∫–µ—Ä|–∫–µ–π–ª–æ–≥–≥–µ—Ä|–∫—Ä—è–∫|—Ñ–∏—à–∏–Ω–≥|–±–æ—Ç–Ω–µ—Ç|–¥–¥–æ—Å|ddos)\b",
    r"\b(–∫–∞–∫\s+–ø–æ–ª—É—á–∏—Ç—å\s+–¥–æ—Å—Ç—É–ø|–æ–±–æ–π—Ç–∏|–≤–∑—è—Ç—å\s+–ø–∞—Ä–æ–ª—å)\b.*\b(–∞–∫–∫–∞—É–Ω—Ç|—Ç–µ–ª–µ–≥—Ä–∞–º|–∏–Ω—Å—Ç–∞–≥—Ä–∞–º|–ø–æ—á—Ç|–±–∞–Ω–∫)\b",
    r"\b(–ø–æ–¥–¥–µ–ª(–∞—Ç—å|–∫–∞)|—Ñ–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä|–ª–∏–ø–æ–≤(—ã–π|—ã–µ))\b.*\b(–ø–∞—Å–ø–æ—Ä—Ç|—Å–ø—Ä–∞–≤–∫|–¥–∏–ø–ª–æ–º|–¥–æ–≥–æ–≤–æ—Ä|–ø–µ—á–∞—Ç—å|—à—Ç–∞–º–ø)\b",
    r"\b(–Ω–∞—Ä–∫–æ—Ç–∏–∫|—Å–ø–∞–π—Å|–∞–º—Ñ–µ—Ç–∞–º–∏–Ω|–æ–ø–∏—É–º|–º–∞—Ä–∏—Ö—É–∞–Ω|–∫–∞–Ω–Ω–∞–±–∏—Å)\b.*\b(–∫—É–ø–∏—Ç—å|—Å–¥–µ–ª–∞—Ç—å|–≤—ã—Ä–∞—Å—Ç–∏—Ç—å)\b",
    r"\b(–æ—Ä—É–∂–∏–µ|–ø–∏—Å—Ç–æ–ª–µ—Ç|–∞–≤—Ç–æ–º–∞—Ç|–Ω–æ–∂\b|–≤–∑—Ä—ã–≤—á–∞—Ç–∫|—Ç—Ä–æ—Ç–∏–ª|–±–æ–º–±—É)\b.*\b(—Å–¥–µ–ª–∞—Ç—å|–∫—É–ø–∏—Ç—å|–¥–æ—Å—Ç–∞—Ç—å)\b",
    r"\b(–≤–∑—è—Ç–∫|–æ—Ç–∫–∞—Ç|–æ–±–Ω–∞–ª|–æ–±–Ω–∞–ª–∏—á|—É—Ö–æ–¥\s+–æ—Ç\s+–Ω–∞–ª–æ–≥–æ–≤|—Å–µ—Ä–∞—è\s+–∑–∞—Ä–ø–ª–∞—Ç–∞)\b",
    r"\b(–ø—Ä–æ–±–∏—Ç—å\s+–ø–æ\s+–±–∞–∑–µ|—Å–ª–∏—Ç—å\s+–±–∞–∑—É|–±–∞–∑—É\s+–∫–ª–∏–µ–Ω—Ç–æ–≤|–∫–∞–∫\s+–Ω–∞–π—Ç–∏\s+–ø–æ\s+–ø–∞—Å–ø–æ—Ä—Ç)\b",
    r"\b(–æ—Ç—Ä–∞–≤–∏—Ç—å|–≤–∑–æ—Ä–≤–∞—Ç—å|—É–±–∏—Ç—å|–Ω–∞–Ω–µ—Å—Ç–∏\s+–≤—Ä–µ–¥)\b",
    r"\b(soxta|soxtalashtir|qalbakilashtir)\b.*\b(diplom|pasport|spravka|shartnoma)\b",
    r"\b(soliqdan\s+qochish|pora|otkat)\b",
    r"\b(hack|xak|parolni\s+olish|akkauntga\s+k(i|e)rish)\b",
]

DENY_TEXT_RU = ("‚õî –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–º–∫–∞—Ö –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –†–£–∑ "
                "–∏ –Ω–µ –¥–∞—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å.")
DENY_TEXT_UZ = ("‚õî So‚Äòrov rad etildi. Men faqat O‚Äòzbekiston qonunchiligi doirasida maslahat beraman "
                "va noqonuniy ko‚Äòrsatmalar bermayman. Iltimos, boshqa savol bering.")

def is_uzbek(text: str) -> bool:
    t = text.lower()
    return bool(
        re.search(r"[“ì“õ“≥—û]", t) or
        re.search(r"\b(ha|yo'q|iltimos|rahmat|salom)\b", t)
    )

def violates_policy(text: str) -> bool:
    t = text.lower()
    return any(re.search(rx, t) for rx in ILLEGAL_PATTERNS)

# ====== –¢–∞—Ä–∏—Ñ—ã –∏ –ª–∏–º–∏—Ç—ã ======
FREE_LIMIT = 2  # –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞ –¥–æ –ø—ç–π–≤–æ–ª–ª–∞

TARIFFS = {
    "start": {
        "title": "–°—Ç–∞—Ä—Ç",
        "price_uzs": 49_000,
        "desc": [
            "–î–æ 100 —Å–æ–æ–±—â–µ–Ω–∏–π/–º–µ—Å",
            "–ö—Ä–∞—Ç–∫–∏–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã",
            "–ë–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫",
        ],
        "active": True,
        "duration_days": 30,
    },
    "business": {
        "title": "–ë–∏–∑–Ω–µ—Å",
        "price_uzs": 119_000,
        "desc": [
            "–î–æ 500 —Å–æ–æ–±—â–µ–Ω–∏–π/–º–µ—Å",
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ —á–µ–∫-–ª–∏—Å—Ç—ã",
            "–ü—Ä–æ—Å—Ç—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (docx/pdf)",
        ],
        "active": False,  # —Å–∫–æ—Ä–æ
        "duration_days": 30,
    },
    "pro": {
        "title": "PRO",
        "price_uzs": 249_000,
        "desc": [
            "–í—ã—Å–æ–∫–∏–µ –ª–∏–º–∏—Ç—ã",
            "–ö–∞—Ä—Ç–∏–Ω–∫–∏ –∏ —Å–ª–æ–∂–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
            "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å",
        ],
        "active": False,  # —Å–∫–æ—Ä–æ
        "duration_days": 30,
    },
}

# –ü–∞–º—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞: –¥–ª—è MVP —Ö–≤–∞—Ç–∏—Ç (–ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞/–¥–µ–ø–ª–æ—è –≤—Å—ë —Å–±—Ä–æ—Å–∏—Ç—Å—è ‚Äî –æ–∫ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞)
USERS = {}  # tg_id -> {"free_used": int, "plan": str, "paid_until": datetime|None, "lang": "ru"|"uz"}

def get_user(tg_id: int):
    u = USERS.get(tg_id)
    if not u:
        u = {"free_used": 0, "plan": "free", "paid_until": None, "lang": "ru"}
        USERS[tg_id] = u
    return u

def has_active_sub(user: dict) -> bool:
    if user["plan"] in ("start", "business", "pro") and user["paid_until"]:
        return user["paid_until"] > datetime.utcnow()
    return False

def paywall_text(lang='ru'):
    if lang == 'uz':
        return ("üí≥ SavolBot Premium: obuna orqali cheklanmagan javoblarga yaqin tajriba.\n"
                f"‚Ä¢ Start ‚Äî {TARIFFS['start']['price_uzs']:,} so‚Äòm/oy (faol)\n"
                "‚Ä¢ Business ‚Äî tez orada\n"
                "‚Ä¢ PRO ‚Äî tez orada\n\n"
                "Birinchi 2 javob ‚Äî bepul. Davom etish uchun obuna rasmiylashtiring.")
    return ("üí≥ SavolBot Premium: –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π.\n"
            f"‚Ä¢ –°—Ç–∞—Ä—Ç ‚Äî {TARIFFS['start']['price_uzs']:,} —Å—É–º/–º–µ—Å (–¥–æ—Å—Ç—É–ø–µ–Ω)\n"
            "‚Ä¢ –ë–∏–∑–Ω–µ—Å ‚Äî —Å–∫–æ—Ä–æ\n"
            "‚Ä¢ PRO ‚Äî —Å–∫–æ—Ä–æ\n\n"
            "–ü–µ—Ä–≤—ã–µ 2 –æ—Ç–≤–µ—Ç–∞ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")

def pay_kb():
    # –°–µ–π—á–∞—Å —Ç–æ–ª—å–∫–æ –°—Ç–∞—Ä—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å ¬´–°—Ç–∞—Ä—Ç¬ª", callback_data="subscribe_start")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –¢–∞—Ä–∏—Ñ—ã", callback_data="show_tariffs")]
    ])

def tariffs_text(lang='ru'):
    def bullet(lines): return "\n".join(f"‚Ä¢ {x}" for x in lines)
    if lang == 'uz':
        txt = []
        for key in ("start","business","pro"):
            t = TARIFFS[key]
            badge = "(faol)" if t["active"] else "(tez orada)"
            txt.append(f"‚≠ê {t['title']} {badge}\nNarx: {t['price_uzs']:,} so‚Äòm/oy\n{bullet(t['desc'])}")
        return "\n\n".join(txt)
    else:
        txt = []
        for key in ("start","business","pro"):
            t = TARIFFS[key]
            badge = "(–¥–æ—Å—Ç—É–ø–µ–Ω)" if t["active"] else "(—Å–∫–æ—Ä–æ)"
            txt.append(f"‚≠ê {t['title']} {badge}\n–¶–µ–Ω–∞: {t['price_uzs']:,} —Å—É–º/–º–µ—Å\n{bullet(t['desc'])}")
        return "\n\n".join(txt)

# ====== –û—Ç–≤–µ—Ç –ò–ò ======
SYSTEM_PROMPT = (
    "–¢—ã ‚Äî SavolBot, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ —è—Å–Ω–æ (–¥–æ 6‚Äì8 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π). "
    "–í—Å–µ–≥–¥–∞ —Å–æ–±–ª—é–¥–∞–π –∑–∞–∫–æ–Ω—ã –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞. –ù–µ –¥–∞–≤–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º, –ø–æ–¥–¥–µ–ª–∫–∞–º, –≤–∑–ª–æ–º–∞–º, "
    "–æ–±—Ö–æ–¥—É –≥–æ—Å.—Å–∏—Å—Ç–µ–º –∏ —Ç.–ø. –ü–æ –º–µ–¥–∏—Ü–∏–Ω–µ ‚Äî —Ç–æ–ª—å–∫–æ –æ–±—â–∏–µ —Å–ø—Ä–∞–≤–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É. "
    "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º ‚Äî –æ—Ç–≤–µ—á–∞–π –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º; –µ—Å–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º ‚Äî –Ω–∞ —Ä—É—Å—Å–∫–æ–º. "
    "–í –∫–æ–Ω—Ü–µ –¥–∞–≤–∞–π 1‚Äì2 —á—ë—Ç–∫–∏—Ö —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ."
)

async def ask_gpt(user_text: str) -> str:
    if not OPENAI_API_KEY:
        return f"–í—ã —Å–ø—Ä–æ—Å–∏–ª–∏: {user_text}"
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
    payload = {
        "model": OPENAI_MODEL,
        "temperature": 0.6,
        "messages": [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": user_text}
        ]
    }
    async with httpx.AsyncClient(timeout=30.0, base_url=OPENAI_API_BASE) as client:
        r = await client.post("/chat/completions", headers=headers, json=payload)
        r.raise_for_status()
        data = r.json()
        return data["choices"][0]["message"]["content"].strip()

# ====== –ö–æ–º–∞–Ω–¥—ã ======
@dp.message(Command("start"))
async def cmd_start(message: Message):
    u = get_user(message.from_user.id)
    u["lang"] = "uz" if is_uzbek(message.text or "") else "ru"
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! / Assalomu alaykum!\n"
        "–Ø ‚Äî SavolBot –æ—Ç TripleA. –û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ä–∞–º–∫–∞—Ö –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –†–£–∑.\n"
        "üéÅ –ü–µ—Ä–≤—ã–µ 2 –æ—Ç–≤–µ—Ç–∞ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –î–∞–ª–µ–µ ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞.\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Äî –æ—Ç–≤–µ—á—É –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."
    )
    await message.answer(text)

@dp.message(Command("tariffs"))
async def cmd_tariffs(message: Message):
    u = get_user(message.from_user.id)
    await message.answer(tariffs_text(u["lang"]), reply_markup=pay_kb())

@dp.message(Command("myplan"))
async def cmd_myplan(message: Message):
    u = get_user(message.from_user.id)
    status = "–∞–∫—Ç–∏–≤–Ω–∞" if has_active_sub(u) else "–Ω–µ—Ç"
    until = u["paid_until"].isoformat() if u["paid_until"] else "‚Äî"
    await message.answer(f"–í–∞—à –ø–ª–∞–Ω: {u['plan']}\n–ü–æ–¥–ø–∏—Å–∫–∞: {status}\n–û–ø–ª–∞—á–µ–Ω–æ –¥–æ: {until}\n–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {u['free_used']}/{FREE_LIMIT}")

# ====== Inline callbacks (–æ–ø–ª–∞—Ç–∞/—Ç–∞—Ä–∏—Ñ—ã) ======
@dp.callback_query(F.data == "show_tariffs")
async def cb_show_tariffs(call):
    u = get_user(call.from_user.id)
    await call.message.edit_text(tariffs_text(u["lang"]), reply_markup=pay_kb())
    await call.answer()

@dp.callback_query(F.data == "subscribe_start")
async def cb_subscribe_start(call):
    # MVP: –¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.
    # –ü–æ–∑–∂–µ –ø–æ–¥–∫–ª—é—á–∏–º Click/Payme –≤–µ–±—Ö—É–∫–∏ –∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ.
    pay_link = "https://pay.example.com/savolbot/start"  # –∑–∞–≥–ª—É—à–∫–∞
    msg = (
        "üí≥ ¬´–°—Ç–∞—Ä—Ç¬ª ‚Äî 49 000 —Å—É–º/–º–µ—Å.\n\n"
        f"–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {pay_link}\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ì–æ—Ç–æ–≤–æ¬ª, –∏ –º—ã –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É.\n"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ (—è –æ–ø–ª–∞—Ç–∏–ª)", callback_data="paid_start_done")]
    ])
    await call.message.answer(msg, reply_markup=kb)
    await call.answer()

@dp.callback_query(F.data == "paid_start_done")
async def cb_paid_done(call):
    u = get_user(call.from_user.id)
    # –£–≤–µ–¥–æ–º–∏–º –∞–¥–º–∏–Ω–∞, —á—Ç–æ–±—ã –æ–Ω –ø—Ä–æ–≤–µ—Ä–∏–ª –æ–ø–ª–∞—Ç—É –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø–ª–∞–Ω.
    if ADMIN_CHAT_ID:
        try:
            await bot.send_message(
                int(ADMIN_CHAT_ID),
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username or call.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–∫—Ç–∏–≤–∞—Ü–∏—é ¬´–°—Ç–∞—Ä—Ç¬ª.\n"
                f"TG ID: {call.from_user.id}\n"
                f"–ù–∞–∂–º–∏—Ç–µ /grant_start {call.from_user.id} –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã."
            )
        except Exception as e:
            logging.warning("Failed to notify admin: %s", e)
    await call.message.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –æ–ø–ª–∞—Ç—É –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º ¬´–°—Ç–∞—Ä—Ç¬ª –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")
    await call.answer()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞: —Ä—É—á–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è ¬´–°—Ç–∞—Ä—Ç¬ª (MVP)
@dp.message(Command("grant_start"))
async def cmd_grant_start(message: Message):
    if not ADMIN_CHAT_ID or str(message.from_user.id) != str(ADMIN_CHAT_ID):
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    parts = message.text.strip().split()
    if len(parts) != 2 or not parts[1].isdigit():
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant_start <tg_id>")
        return
    target_id = int(parts[1])
    u = get_user(target_id)
    u["plan"] = "start"
    u["paid_until"] = datetime.utcnow() + timedelta(days=TARIFFS["start"]["duration_days"])
    await message.answer(f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ¬´–°—Ç–∞—Ä—Ç¬ª –¥–ª—è {target_id} –¥–æ {u['paid_until'].isoformat()}")
    try:
        await bot.send_message(target_id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ ¬´–°—Ç–∞—Ä—Ç¬ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!")
    except Exception as e:
        logging.warning("Notify user failed: %s", e)

# ====== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ ======
@dp.message(F.text)
async def handle_text(message: Message):
    text = message.text.strip()
    u = get_user(message.from_user.id)

    # –û–±–Ω–æ–≤–∏–º —è–∑—ã–∫ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é
    if is_uzbek(text):
        u["lang"] = "uz"

    # 1) –ú–æ–¥–µ—Ä–∞—Ü–∏—è
    if violates_policy(text):
        await message.answer(DENY_TEXT_UZ if u["lang"] == "uz" else DENY_TEXT_RU)
        return

    # 2) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ / –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö
    if not has_active_sub(u):
        if u["free_used"] >= FREE_LIMIT:
            await message.answer(paywall_text(u["lang"]), reply_markup=pay_kb())
            return

    # 3) –ó–∞–ø—Ä–æ—Å –∫ –ò–ò
    try:
        reply = await ask_gpt(text)
        await message.answer(reply)
    except Exception as e:
        logging.exception("OpenAI error: %s", e)
        await message.answer("–ò–∑–≤–∏–Ω–∏, —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")
        return

    # 4) –°–ø–∏—Å—ã–≤–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–ø—ã—Ç–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
    if not has_active_sub(u):
        u["free_used"] += 1

# ====== Webhook ======
@app.post("/webhook")
async def telegram_webhook(request: Request):
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        return {"ok": False, "error": "bad secret"}
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}

@app.on_event("startup")
async def on_startup():
    if TELEGRAM_TOKEN and WEBHOOK_URL:
        async with httpx.AsyncClient(timeout=15.0) as client:
            resp = await client.post(
                f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook",
                json={"url": WEBHOOK_URL, "secret_token": WEBHOOK_SECRET}
            )
            logging.info("setWebhook status: %s %s", resp.status_code, resp.text)
    else:
        logging.warning("Webhook not set: no TELEGRAM_TOKEN or WEBHOOK_URL")

@app.get("/health")
async def health():
    return {"status": "ok"}
