import os
import re
import logging
from datetime import datetime, timedelta

import httpx
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, Update, InlineKeyboardMarkup, InlineKeyboardButton

# ================== –õ–û–ì–ò ==================
logging.basicConfig(level=logging.INFO)

# ================== ENV ==================
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # https://<your-app>.onrender.com/webhook
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "savol_secret")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_API_BASE = os.getenv("OPENAI_API_BASE", "https://api.openai.com/v1")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # –Ω–∞–ø—Ä–∏–º–µ—Ä 123456789

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
app = FastAPI()

# ================== –ú–û–î–ï–†–ê–¶–ò–Ø ==================
ILLEGAL_PATTERNS = [
    r"\b(–≤–∑–ª–æ–º|—Ö–∞–∫|–∫–µ–π–ª–æ–≥–≥–µ—Ä|—Ñ–∏—à–∏–Ω–≥|–±–æ—Ç–Ω–µ—Ç|–¥–¥–æ—Å|ddos)\b",
    r"\b(–∫–∞–∫\s+–ø–æ–ª—É—á–∏—Ç—å\s+–¥–æ—Å—Ç—É–ø|–æ–±–æ–π—Ç–∏|–≤–∑—è—Ç—å\s+–ø–∞—Ä–æ–ª—å)\b.*\b(–∞–∫–∫–∞—É–Ω—Ç|—Ç–µ–ª–µ–≥—Ä–∞–º|–∏–Ω—Å—Ç–∞–≥—Ä–∞–º|–±–∞–Ω–∫)\b",
    r"\b(–ø–æ–¥–¥–µ–ª(–∞—Ç—å|–∫–∞)|—Ñ–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä|–ª–∏–ø–æ–≤(—ã–π|—ã–µ))\b.*\b(–ø–∞—Å–ø–æ—Ä—Ç|—Å–ø—Ä–∞–≤–∫|–¥–∏–ø–ª–æ–º|–¥–æ–≥–æ–≤–æ—Ä)\b",
    r"\b(–Ω–∞—Ä–∫–æ—Ç–∏–∫|–∞–º—Ñ–µ—Ç–∞–º–∏–Ω|–º–∞—Ä–∏—Ö—É–∞–Ω|–∫–∞–Ω–Ω–∞–±–∏—Å)\b.*\b(–∫—É–ø–∏—Ç—å|–≤—ã—Ä–∞—Å—Ç–∏—Ç—å)\b",
    r"\b(–æ—Ä—É–∂–∏–µ|–ø–∏—Å—Ç–æ–ª–µ—Ç|–∞–≤—Ç–æ–º–∞—Ç|–≤–∑—Ä—ã–≤—á–∞—Ç–∫|–±–æ–º–±—É)\b.*\b(—Å–¥–µ–ª–∞—Ç—å|–∫—É–ø–∏—Ç—å)\b",
    r"\b(–≤–∑—è—Ç–∫|–æ—Ç–∫–∞—Ç|–æ–±–Ω–∞–ª–∏—á|—É—Ö–æ–¥\s+–æ—Ç\s+–Ω–∞–ª–æ–≥–æ–≤)\b",
    r"\b(–ø—Ä–æ–±–∏—Ç—å\s+–ø–æ\s+–±–∞–∑–µ|—Å–ª–∏—Ç—å\s+–±–∞–∑—É)\b",
    r"\b(–æ—Ç—Ä–∞–≤–∏—Ç—å|–≤–∑–æ—Ä–≤–∞—Ç—å|—É–±–∏—Ç—å)\b",
    r"\b(soxta|qalbakilashtir)\b.*\b(diplom|pasport|spravka)\b",
    r"\b(soliqdan\s+qochish|pora|otkat)\b",
    r"\b(hack|xak|parolni\s+olish)\b",
]
DENY_TEXT_RU = "‚õî –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω. –Ø –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–º–∫–∞—Ö –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –†–£–∑."
DENY_TEXT_UZ = "‚õî So‚Äòrov rad etildi. Men faqat O‚Äòzbekiston qonunchiligi doirasida javob beraman."

def is_uzbek(text: str) -> bool:
    t = text.lower()
    return bool(re.search(r"[“ì“õ“≥—û]", t) or re.search(r"\b(ha|yo'q|iltimos|rahmat)\b", t))

def violates_policy(text: str) -> bool:
    t = text.lower()
    return any(re.search(rx, t) for rx in ILLEGAL_PATTERNS)

# ================== –¢–ê–†–ò–§–´ ==================
FREE_LIMIT = 2
TARIFFS = {
    "start": {
        "title": "–°—Ç–∞—Ä—Ç",
        "price_uzs": 49_000,
        "desc": ["–î–æ 100 —Å–æ–æ–±—â–µ–Ω–∏–π/–º–µ—Å", "–ö—Ä–∞—Ç–∫–∏–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã", "–ë–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫"],
        "active": True,
        "duration_days": 30,
    },
    "business": {"title": "–ë–∏–∑–Ω–µ—Å", "price_uzs": 119_000, "desc": [], "active": False, "duration_days": 30},
    "pro": {"title": "PRO", "price_uzs": 249_000, "desc": [], "active": False, "duration_days": 30},
}

USERS = {}  # tg_id -> {"free_used": int, "plan": str, "paid_until": datetime|None, "lang": "ru"|"uz"}

def get_user(tg_id: int):
    if tg_id not in USERS:
        USERS[tg_id] = {"free_used": 0, "plan": "free", "paid_until": None, "lang": "ru"}
    return USERS[tg_id]

def has_active_sub(user: dict) -> bool:
    return user["plan"] in ("start", "business", "pro") and user["paid_until"] and user["paid_until"] > datetime.utcnow()

def pay_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å ¬´–°—Ç–∞—Ä—Ç¬ª", callback_data="subscribe_start")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –¢–∞—Ä–∏—Ñ—ã", callback_data="show_tariffs")]
    ])

def tariffs_text(lang='ru'):
    def bullet(lines): return "\n".join(f"‚Ä¢ {x}" for x in lines)
    txt = []
    for key in ("start", "business", "pro"):
        t = TARIFFS[key]
        badge = "(–¥–æ—Å—Ç—É–ø–µ–Ω)" if t["active"] else "(—Å–∫–æ—Ä–æ)"
        if lang == 'uz':
            badge = "(faol)" if t["active"] else "(tez orada)"
            txt.append(f"‚≠ê {t['title']} {badge}\nNarx: {t['price_uzs']:,} so‚Äòm/oy\n{bullet(t['desc'])}")
        else:
            txt.append(f"‚≠ê {t['title']} {badge}\n–¶–µ–Ω–∞: {t['price_uzs']:,} —Å—É–º/–º–µ—Å\n{bullet(t['desc'])}")
    return "\n\n".join(txt)

# ================== –ò–ò ==================
SYSTEM_PROMPT = (
    "–¢—ã ‚Äî SavolBot, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ —è—Å–Ω–æ (–¥–æ 6‚Äì8 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π). "
    "–°–æ–±–ª—é–¥–∞–π –∑–∞–∫–æ–Ω—ã –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞. –ù–µ –¥–∞–≤–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º. "
    "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º ‚Äî –æ—Ç–≤–µ—á–∞–π –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º; –µ—Å–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º ‚Äî –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
)

async def ask_gpt(user_text: str) -> str:
    if not OPENAI_API_KEY:
        return f"–í—ã —Å–ø—Ä–æ—Å–∏–ª–∏: {user_text}"
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
    payload = {"model": OPENAI_MODEL, "temperature": 0.6,
               "messages": [{"role": "system", "content": SYSTEM_PROMPT},
                            {"role": "user", "content": user_text}]}
    async with httpx.AsyncClient(timeout=30.0, base_url=OPENAI_API_BASE) as client:
        r = await client.post("/chat/completions", headers=headers, json=payload)
        r.raise_for_status()
        return r.json()["choices"][0]["message"]["content"].strip()

# ================== –ö–û–ú–ê–ù–î–´ ==================
@dp.message(Command("start"))
async def cmd_start(message: Message):
    u = get_user(message.from_user.id)
    u["lang"] = "uz" if is_uzbek(message.text or "") else "ru"
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! / Assalomu alaykum!\n"
                         "–Ø ‚Äî SavolBot. –ü–µ—Ä–≤—ã–µ 2 –æ—Ç–≤–µ—Ç–∞ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –¥–∞–ª–µ–µ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.\n"
                         "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.")

@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer("‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n"
                         "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º.\n"
                         "2. –ü–µ—Ä–≤—ã–µ 2 –æ—Ç–≤–µ—Ç–∞ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n"
                         "3. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ /tariffs.\n"
                         "4. –°–æ–±–ª—é–¥–∞–π—Ç–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –†–£–∑.")

@dp.message(Command("about"))
async def cmd_about(message: Message):
    await message.answer("ü§ñ SavolBot –æ—Ç TripleA ‚Äî —ç—Ç–æ —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.\n"
                         "–†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –±–∞–∑–µ GPT. –í—Å–µ–≥–¥–∞ –≤ —Ä–∞–º–∫–∞—Ö –∑–∞–∫–æ–Ω–∞.")

@dp.message(Command("tariffs"))
async def cmd_tariffs(message: Message):
    u = get_user(message.from_user.id)
    await message.answer(tariffs_text(u["lang"]), reply_markup=pay_kb())

@dp.message(Command("myplan"))
async def cmd_myplan(message: Message):
    u = get_user(message.from_user.id)
    status = "–∞–∫—Ç–∏–≤–Ω–∞" if has_active_sub(u) else "–Ω–µ—Ç"
    until = u["paid_until"].isoformat() if u["paid_until"] else "‚Äî"
    await message.answer(f"–í–∞—à –ø–ª–∞–Ω: {u['plan']}\n–ü–æ–¥–ø–∏—Å–∫–∞: {status}\n–û–ø–ª–∞—á–µ–Ω–æ –¥–æ: {until}\n"
                         f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {u['free_used']}/{FREE_LIMIT}")

# ================== –ö–ù–û–ü–ö–ò ==================
@dp.callback_query(F.data == "show_tariffs")
async def cb_show_tariffs(call):
    u = get_user(call.from_user.id)
    await call.message.edit_text(tariffs_text(u["lang"]), reply_markup=pay_kb())
    await call.answer()

@dp.callback_query(F.data == "subscribe_start")
async def cb_subscribe_start(call):
    pay_link = "https://pay.example.com/savolbot/start"  # –∑–∞–≥–ª—É—à–∫–∞
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ (—è –æ–ø–ª–∞—Ç–∏–ª)", callback_data="paid_start_done")]
    ])
    await call.message.answer(f"üí≥ ¬´–°—Ç–∞—Ä—Ç¬ª ‚Äî 49 000 —Å—É–º/–º–µ—Å.\n–û–ø–ª–∞—Ç–∞: {pay_link}", reply_markup=kb)
    await call.answer()

@dp.callback_query(F.data == "paid_start_done")
async def cb_paid_done(call):
    if ADMIN_CHAT_ID:
        await bot.send_message(int(ADMIN_CHAT_ID),
                               f"üë§ @{call.from_user.username or call.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–∫—Ç–∏–≤–∞—Ü–∏—é ¬´–°—Ç–∞—Ä—Ç¬ª.\n"
                               f"TG ID: {call.from_user.id}\n"
                               f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /grant_start {call.from_user.id}")
    await call.message.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –æ–ø–ª–∞—Ç—É –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É.")
    await call.answer()

@dp.message(Command("grant_start"))
async def cmd_grant_start(message: Message):
    if str(message.from_user.id) != str(ADMIN_CHAT_ID):
        return await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    parts = message.text.strip().split()
    if len(parts) != 2 or not parts[1].isdigit():
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant_start <tg_id>")
    target_id = int(parts[1])
    u = get_user(target_id)
    u["plan"] = "start"
    u["paid_until"] = datetime.utcnow() + timedelta(days=TARIFFS["start"]["duration_days"])
    await message.answer(f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ¬´–°—Ç–∞—Ä—Ç¬ª –¥–ª—è {target_id}")
    await bot.send_message(target_id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ ¬´–°—Ç–∞—Ä—Ç¬ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")

# ================== –û–ë–†–ê–ë–û–¢–ö–ê –í–û–ü–†–û–°–û–í ==================
@dp.message(F.text)
async def handle_text(message: Message):
    text = message.text.strip()
    u = get_user(message.from_user.id)
    if is_uzbek(text):
        u["lang"] = "uz"
    if violates_policy(text):
        return await message.answer(DENY_TEXT_UZ if u["lang"] == "uz" else DENY_TEXT_RU)
    if not has_active_sub(u) and u["free_used"] >= FREE_LIMIT:
        return await message.answer("üí≥ –î–æ—Å—Ç—É–ø –∫ –æ—Ç–≤–µ—Ç–∞–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:", reply_markup=pay_kb())
    try:
        reply = await ask_gpt(text)
        await message.answer(reply)
    except Exception as e:
        logging.exception("OpenAI error: %s", e)
        return await message.answer("–ò–∑–≤–∏–Ω–∏, —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    if not has_active_sub(u):
        u["free_used"] += 1

# ================== WEBHOOK ==================
@app.post("/webhook")
async def telegram_webhook(request: Request):
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        return {"ok": False, "error": "bad secret"}
    update = Update.model_validate(await request.json())
    await dp.feed_update(bot, update)
    return {"ok": True}

@app.on_event("startup")
async def on_startup():
    if TELEGRAM_TOKEN and WEBHOOK_URL:
        async with httpx.AsyncClient(timeout=15.0) as client:
            resp = await client.post(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook",
                                     json={"url": WEBHOOK_URL, "secret_token": WEBHOOK_SECRET})
            logging.info("setWebhook: %s %s", resp.status_code, resp.text)

@app.get("/health")
async def health():
    return {"status": "ok"}
