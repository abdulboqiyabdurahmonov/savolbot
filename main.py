import os
import re
import json
import time
import logging
import asyncio
import random
from datetime import datetime, timedelta
from pathlib import Path
from contextlib import asynccontextmanager
from typing import Optional
from gspread.utils import rowcol_to_a1

import httpx
from httpx import HTTPError, HTTPStatusError
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, Update, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

# ---- Google Sheets
import gspread
from google.oauth2.service_account import Credentials

# ================== LOGS ==================
logging.basicConfig(level=logging.INFO)

# ================== ENV ===================
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # https://<app>.onrender.com/webhook
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "savol_secret")

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_API_BASE = os.getenv("OPENAI_API_BASE", "https://api.openai.com/v1")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")

# Live-–ø–æ–∏—Å–∫ (—á–µ—Ä–µ–∑ Tavily) ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
TAVILY_API_KEY = os.getenv("TAVILY_API_KEY")

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å live-–ø–æ–∏—Å–∫ –¥–ª—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–µ—Å–ª–∏ 1)
FORCE_LIVE = os.getenv("FORCE_LIVE", "0") == "1"

# –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (—Ü–∏—Ñ—Ä—ã/–≥–æ–¥—ã/—Å—Ç–∞–≤–∫–∏)
VERIFY_DYNAMIC = os.getenv("VERIFY_DYNAMIC", "1") == "1"
VERIFY_TIMEOUT_SEC = int(os.getenv("VERIFY_TIMEOUT_SEC", "10"))

# –ê–¥–º–∏–Ω
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # str

# –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã
USERS_DB_PATH = os.getenv("USERS_DB_PATH", "users_limits.json")
HISTORY_DB_PATH = os.getenv("HISTORY_DB_PATH", "chat_history.json")

# --- Google Sheets ENV ---
GOOGLE_CREDENTIALS = os.getenv("GOOGLE_CREDENTIALS")  # JSON –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π (–∏–ª–∏ base64)
SHEETS_SPREADSHEET_ID = os.getenv("SHEETS_SPREADSHEET_ID")

# –ù–∞–∑–≤–∞–Ω–∏—è –ª–∏—Å—Ç–æ–≤ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ ENV)
USERS_SHEET = os.getenv("USERS_SHEET", "Users")        # –ª–∏—Å—Ç-—Ä–µ–µ—Å—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
HISTORY_SHEET = os.getenv("HISTORY_SHEET", "History")  # –ª–æ–≥ –¥–∏–∞–ª–æ–≥–∞
METRICS_SHEET = os.getenv("METRICS_SHEET", "Metrics")  # —Å–æ–±—ã—Ç–∏—è/–º–µ—Ç—Ä–∏–∫–∏
FEEDBACK_SHEET = os.getenv("FEEDBACK_SHEET", "Feedback")  # –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å

# --- HTTPX clients & timeouts (reuse) ---
HTTPX_TIMEOUT = httpx.Timeout(connect=5.0, read=60.0, write=30.0, pool=30.0)
client_openai: Optional[httpx.AsyncClient] = None
client_http: Optional[httpx.AsyncClient] = None

# –ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –º–æ–¥–µ–ª–∏ (—á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å 429)
MODEL_CONCURRENCY = int(os.getenv("MODEL_CONCURRENCY", "4"))
_model_sem = asyncio.Semaphore(MODEL_CONCURRENCY)

# –û–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –Ω–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Å–µ–∫—É–Ω–¥—ã)
REPLY_TIMEOUT_SEC = int(os.getenv("REPLY_TIMEOUT_SEC", "12"))

# –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ (VIP) ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
WL_RAW = os.getenv("WHITELIST_USERS", "557891018,1942344627")
try:
    WHITELIST_USERS = {int(x) for x in WL_RAW.split(",") if x.strip().isdigit()}
except Exception:
    WHITELIST_USERS = set()

def is_whitelisted(uid: int) -> bool:
    return uid in WHITELIST_USERS

# ================== TG/APP =================
bot = Bot(token=TELEGRAM_TOKEN) if TELEGRAM_TOKEN else None
dp = Dispatcher()

# ================== USERS (–ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ) =================
USERS: dict[int, dict] = {}
TRIAL_DAYS = int(os.getenv("TRIAL_DAYS", "7"))

def _serialize_user(u: dict) -> dict:
    return {
        "plan": u.get("plan", "trial"),
        "paid_until": u["paid_until"].isoformat() if u.get("paid_until") else None,
        "lang": u.get("lang", "ru"),
        "topic": u.get("topic"),
        "registered_to_sheets": bool(u.get("registered_to_sheets", False)),
    }

def save_users():
    try:
        path = Path(USERS_DB_PATH); path.parent.mkdir(parents=True, exist_ok=True)
        with path.open("w", encoding="utf-8") as f:
            json.dump({str(k): _serialize_user(v) for k, v in USERS.items()}, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.warning("save_users failed: %s", e)

def load_users():
    global USERS
    p = Path(USERS_DB_PATH)
    if not p.exists():
        USERS = {}; return
    try:
        data = json.loads(p.read_text("utf-8"))
        USERS = {}
        for k, v in data.items():
            pu = v.get("paid_until")
            try:
                paid_until = datetime.fromisoformat(pu) if pu else None
            except Exception:
                paid_until = None
            USERS[int(k)] = {
                "plan": v.get("plan", "trial"),
                "paid_until": paid_until,
                "lang": v.get("lang", "ru"),
                "topic": v.get("topic"),
                "registered_to_sheets": bool(v.get("registered_to_sheets", False)),
            }
    except Exception:
        logging.exception("load_users failed")
        USERS = {}

def has_active_sub(u: dict) -> bool:
    if u.get("plan") == "creative" and u.get("paid_until") and u["paid_until"] > datetime.utcnow():
        return True
    if u.get("plan", "trial") == "trial" and u.get("paid_until") and u["paid_until"] > datetime.utcnow():
        return True
    return False

def get_user(tg_id: int):
    is_new = tg_id not in USERS
    if is_new:
        USERS[tg_id] = {
            "plan": "trial",
            "paid_until": datetime.utcnow() + timedelta(days=TRIAL_DAYS),
            "lang": "ru",
            "topic": None,
            "registered_to_sheets": False,
        }
        save_users()
        try:
            loop = asyncio.get_running_loop()
            loop.create_task(_sheets_register_user_async(tg_id))
        except RuntimeError:
            pass
    return USERS[tg_id]

def pay_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å Creative ($10/–º–µ—Å)", callback_data="subscribe_creative")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –û —Ç–∞—Ä–∏—Ñ–µ", callback_data="show_tariffs")]
    ])

# ================== –ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê (–ª–æ–∫–∞–ª—å–Ω–∞—è) =================
HISTORY: dict[int, list[dict]] = {}  # {user_id: [ {role:"user"/"assistant", content:str, ts:str}, ... ]}

def _hist_path() -> Path:
    p = Path(HISTORY_DB_PATH); p.parent.mkdir(parents=True, exist_ok=True); return p

def load_history():
    global HISTORY
    p = _hist_path()
    if p.exists():
        try:
            HISTORY = {int(k): v for k, v in json.loads(p.read_text("utf-8")).items()}
        except Exception:
            logging.exception("load_history failed"); HISTORY = {}
    else:
        HISTORY = {}

def save_history():
    try:
        _hist_path().write_text(json.dumps({str(k): v for k, v in HISTORY.items()}, ensure_ascii=False, indent=2), "utf-8")
    except Exception:
        logging.exception("save_history failed")

def reset_history(user_id: int):
    HISTORY.pop(user_id, None); save_history()

def append_history(user_id: int, role: str, content: str):
    lst = HISTORY.setdefault(user_id, [])
    lst.append({"role": role, "content": content, "ts": datetime.utcnow().isoformat()})
    if len(lst) > 20:
        del lst[: len(lst) - 20]
    save_history()

def get_recent_history(user_id: int, max_chars: int = 6000) -> list[dict]:
    total = 0; picked = []
    for item in reversed(HISTORY.get(user_id, [])):
        c = item.get("content") or ""
        total += len(c)
        if total > max_chars:
            break
        picked.append({"role": item["role"], "content": c})
    return list(reversed(picked))

def build_messages(user_id: int, system: str, user_text: str) -> list[dict]:
    msgs = [{"role": "system", "content": system}]
    msgs.extend(get_recent_history(user_id))
    msgs.append({"role": "user", "content": user_text})
    return msgs

# ================== –ú–û–î–ï–†–ê–¶–ò–Ø =================
ILLEGAL_PATTERNS = [
    r"\b(–≤–∑–ª–æ–º|—Ö–∞–∫|–∫–µ–π–ª–æ–≥–≥–µ—Ä|—Ñ–∏—à–∏–Ω–≥|–±–æ—Ç–Ω–µ—Ç|–¥–¥–æ—Å|ddos)\b",
    r"\b(–∫–∞–∫\s+–ø–æ–ª—É—á–∏—Ç—å\s+–¥–æ—Å—Ç—É–ø|–æ–±–æ–π—Ç–∏|–≤–∑—è—Ç—å\s+–ø–∞—Ä–æ–ª—å)\b.*\b(–∞–∫–∫–∞—É–Ω—Ç|—Ç–µ–ª–µ–≥—Ä–∞–º|–∏–Ω—Å—Ç–∞–≥—Ä–∞–º|–±–∞–Ω–∫|–ø–æ—á—Ç)\b",
    r"\b(–ø–æ–¥–¥–µ–ª(–∞—Ç—å|–∫–∞)|—Ñ–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä|–ª–∏–ø–æ–≤(—ã–π|—ã–µ))\b.*\b(–ø–∞—Å–ø–æ—Ä—Ç|—Å–ø—Ä–∞–≤–∫|–¥–∏–ø–ª–æ–º|–¥–æ–≥–æ–≤–æ—Ä|–ø–µ—á–∞—Ç—å|—à—Ç–∞–º–ø)\b",
    r"\b(–Ω–∞—Ä–∫–æ—Ç–∏–∫|–∞–º—Ñ–µ—Ç–∞–º–∏–Ω|–º–∞—Ä–∏—Ö—É–∞–Ω|–∫–∞–Ω–Ω–∞–±–∏—Å|–æ–ø–∏—É–º|—Å–ø–∞–π—Å)\b.*\b(–∫—É–ø–∏—Ç—å|–≤—ã—Ä–∞—Å—Ç–∏—Ç—å|—Å–¥–µ–ª–∞—Ç—å)\b",
    r"\b(–æ—Ä—É–∂–∏–µ|–ø–∏—Å—Ç–æ–ª–µ—Ç|–∞–≤—Ç–æ–º–∞—Ç|–≤–∑—Ä—ã–≤—á–∞—Ç–∫|–±–æ–º–±—É|—Ç—Ä–æ—Ç–∏–ª)\b.*\b(—Å–¥–µ–ª–∞—Ç—å|–∫—É–ø–∏—Ç—å|–¥–æ—Å—Ç–∞—Ç—å)\b",
    r"\b(–≤–∑—è—Ç–∫|–æ—Ç–∫–∞—Ç|–æ–±–Ω–∞–ª–∏—á|–æ–±–Ω–∞–ª|—É—Ö–æ–¥\s+–æ—Ç\s+–Ω–∞–ª–æ–≥–æ–≤|—Å–µ—Ä–∞—è\s+–∑–∞—Ä–ø–ª–∞—Ç–∞)\b",
    r"\b(–ø—Ä–æ–±–∏—Ç—å\s+–ø–æ\s+–±–∞–∑–µ|—Å–ª–∏—Ç—å\s+–±–∞–∑—É|–±–∞–∑—É\s+–∫–ª–∏–µ–Ω—Ç–æ–≤|–Ω–∞–π—Ç–∏\s+–ø–æ\s+–ø–∞—Å–ø–æ—Ä—Ç)\b",
    r"\b(–æ—Ç—Ä–∞–≤–∏—Ç—å|–≤–∑–æ—Ä–≤–∞—Ç—å|—É–±–∏—Ç—å|–Ω–∞–Ω–µ—Å—Ç–∏\s+–≤—Ä–µ–¥)\b",
    r"\b(soxta|qalbakilashtir|soxtalashtir)\b.*\b(diplom|pasport|spravka|shartnoma)\b",
    r"\b(soliqdan\s+qochish|pora|otkat)\b",
    r"\b(hack|xak|parolni\s+olish|akkauntga\s+k(i|e)rish)\b",
]
DENY_TEXT_RU = "‚õî –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω. –Ø –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–º–∫–∞—Ö –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –†–£–∑."
DENY_TEXT_UZ = "‚õî So‚Äòrov rad etildi. Men faqat O‚Äòzbekiston qonunchiligi doirasida javob beraman."

def is_uzbek(text: str) -> bool:
    t = text.lower()
    return bool(re.search(r"[“ì“õ“≥—û]", t) or re.search(r"\b(ha|yo[‚Äô']q|iltimos|rahmat|salom)\b", t))

# ================== –ê–ù–¢–ò–°–°–´–õ–ö–ò =================
LINK_PAT = re.compile(r"https?://\S+")
MD_LINK_PAT = re.compile(r"\[([^\]]+)\]\((https?://[^\s)]+)\)")
SOURCES_BLOCK_PAT = re.compile(r"(?is)\n+–∏—Å—Ç–æ—á–Ω–∏–∫–∏:\s*.*$")

def strip_links(text: str) -> str:
    if not text:
        return text
    text = MD_LINK_PAT.sub(r"\1", text)
    text = LINK_PAT.sub("", text)
    text = SOURCES_BLOCK_PAT.sub("", text)
    text = re.sub(r"[ \t]+", " ", text)
    text = re.sub(r"\n{3,}", "\n\n", text).strip()
    return text

def strip_links_and_cleanup(text: str) -> str:
    return strip_links(text or "")

# ================== –¢–ê–†–ò–§ =================
TARIFF = {
    "creative": {
        "title": "Creative",
        "price_usd": 10,
        "desc_ru": [
            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏ –ø–æ–º–æ—â—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏",
            "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π",
            "–£–¥–æ–±–Ω–æ –ø—Ä—è–º–æ –≤ Telegram",
        ],
        "desc_uz": [
            "Rasm generatsiyasi va hujjatlar bo‚Äòyicha yordam",
            "Cheklanmagan xabarlar soni",
            "Telegram ichida qulay",
        ],
        "duration_days": 30,
        "active": True,
    }
}

def tariffs_text(lang='ru'):
    t = TARIFF["creative"]
    badge = "(–¥–æ—Å—Ç—É–ø–µ–Ω)" if t["active"] else "(—Å–∫–æ—Ä–æ)"
    if lang == "uz":
        lines = "\n".join(f"‚Ä¢ {x}" for x in t["desc_uz"])
        return (
            f"‚≠ê {t['title']} {badge}\n"
            f"NARX: ${t['price_usd']}/oy\n"
            f"{lines}\n\n"
            f"7 kunlik BEPUL sinov ‚Üí keyin ${t['price_usd']}/oy"
        )
    else:
        lines = "\n".join(f"‚Ä¢ {x}" for x in t["desc_ru"])
        return (
            f"‚≠ê {t['title']} {badge}\n"
            f"–¶–µ–Ω–∞: ${t['price_usd']}/–º–µ—Å\n"
            f"{lines}\n\n"
            f"7 –¥–Ω–µ–π –ë–ï–°–ü–õ–ê–¢–ù–û ‚Üí –¥–∞–ª–µ–µ ${t['price_usd']}/–º–µ—Å"
        )

# ================== SHEETS (Users + History + Metrics + Feedback) =================
_sheets_client: Optional[gspread.Client] = None
_users_ws: Optional[gspread.Worksheet] = None
LAST_SHEETS_ERROR: Optional[str] = None

def _ts() -> str:
    return datetime.utcnow().isoformat()

def _open_spreadsheet():
    if not _sheets_client:
        return None
    try:
        return _sheets_client.open_by_key(SHEETS_SPREADSHEET_ID)
    except Exception:
        logging.exception("open_by_key failed")
        return None

def _users_ws_get():
    sh = _open_spreadsheet()
    if not sh:
        return None
    try:
        return sh.worksheet(USERS_SHEET)
    except gspread.WorksheetNotFound:
        try:
            ws = sh.add_worksheet(title=USERS_SHEET, rows=100000, cols=8)
            ws.append_row(["ts", "user_id", "username", "first_name", "last_name", "lang", "plan", "paid_until"], value_input_option="RAW")
            return ws
        except Exception:
            logging.exception("Create Users ws failed")
            return None
    except Exception:
        logging.exception("_users_ws failed")
        return None

# --- generic getter –¥–ª—è –ª–∏—Å—Ç–æ–≤ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º ensure header (–±–µ–∑ —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—Ç—Ä–æ–∫) ---
def _ws_get(tab_name: str, headers: list[str]):
    sh = _open_spreadsheet()
    if not sh:
        return None
    try:
        ws = sh.worksheet(tab_name)
    except gspread.WorksheetNotFound:
        try:
            ws = sh.add_worksheet(title=tab_name, rows=200000, cols=max(len(headers), 6))
            end_a1 = rowcol_to_a1(1, len(headers))
            ws.update(f"A1:{end_a1}", [headers], value_input_option="RAW")
            return ws
        except Exception:
            logging.exception("Create ws '%s' failed", tab_name)
            return None
    except Exception:
        logging.exception("_ws_get(%s) failed", tab_name)
        return None

    try:
        need_cols = max(len(headers), 6)
        if getattr(ws, "col_count", 0) < need_cols:
            ws.resize(cols=need_cols)  # –Ω–µ —Ç—Ä–æ–≥–∞–µ–º rows
        end_a1 = rowcol_to_a1(1, len(headers))
        ws.update(f"A1:{end_a1}", [headers], value_input_option="RAW")
    except Exception:
        logging.exception("ensure header for %s failed", tab_name)

    return ws

def _init_sheets():
    """
    –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Sheets:
    - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ raw JSON –∏ base64
    - –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è private_key —Å \\n -> \n
    - Users/History/Metrics/Feedback ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
    """
    global _sheets_client, _users_ws, LAST_SHEETS_ERROR
    if not (GOOGLE_CREDENTIALS and SHEETS_SPREADSHEET_ID and USERS_SHEET):
        LAST_SHEETS_ERROR = "Sheets env not set: GOOGLE_CREDENTIALS / SHEETS_SPREADSHEET_ID / USERS_SHEET"
        logging.warning(LAST_SHEETS_ERROR)
        return
    try:
        raw = GOOGLE_CREDENTIALS.strip()
        try:
            import base64
            creds_text = base64.b64decode(raw).decode("utf-8") if not raw.lstrip().startswith("{") else raw
        except Exception:
            creds_text = raw

        creds_info = json.loads(creds_text)
        if isinstance(creds_info, dict) and creds_info.get("private_key"):
            pk = creds_info["private_key"]
            if "BEGIN PRIVATE KEY" in pk and "\\n" in pk:
                creds_info["private_key"] = pk.replace("\\n", "\n")

        for field in ("client_email", "private_key"):
            if not creds_info.get(field):
                raise ValueError(f"GOOGLE_CREDENTIALS is missing '{field}'")

        scopes = [
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive",
        ]
        creds = Credentials.from_service_account_info(creds_info, scopes=scopes)
        _sheets_client = gspread.authorize(creds)

        sh = _sheets_client.open_by_key(SHEETS_SPREADSHEET_ID)
        # Users
        try:
            _users_ws = sh.worksheet(USERS_SHEET)
        except gspread.WorksheetNotFound:
            logging.warning("Worksheet '%s' not found, creating‚Ä¶", USERS_SHEET)
            _users_ws = sh.add_worksheet(title=USERS_SHEET, rows=100000, cols=8)
            _users_ws.append_row(["ts", "user_id", "username", "first_name", "last_name", "lang", "plan", "paid_until"], value_input_option="RAW")
        # Ensure –¥—Ä—É–≥–∏–µ –ª–∏—Å—Ç—ã
        _ = _ws_get(HISTORY_SHEET, ["ts","user_id","role","content","col1","col2"])
        _ = _ws_get(METRICS_SHEET, ["ts","user_id","event","value","notes"])
        _ = _ws_get(FEEDBACK_SHEET, ["ts","user_id","username","first_name","last_name","feedback","comment"])

        LAST_SHEETS_ERROR = None
        logging.info("Sheets OK: spreadsheet=%s users_sheet=%s", SHEETS_SPREADSHEET_ID, USERS_SHEET)

    except Exception as e:
        LAST_SHEETS_ERROR = f"{type(e).__name__}: {e}"
        logging.exception("Sheets init failed")
        _sheets_client = _users_ws = None

async def _sheets_register_user_async(user_id: int):
    """–†–∞–∑–æ–≤–∞—è –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏—Å—Ç Users (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –∑–∞–ø–∏—Å–∞–Ω)."""
    u = USERS.get(user_id)
    if not u or not _users_ws:
        return
    if u.get("registered_to_sheets"):
        return
    try:
        def _do():
            ws = _users_ws_get()
            if not ws:
                return
            paid = u['paid_until'].isoformat() if u.get('paid_until') else ""
            ws.append_row(
                [datetime.utcnow().isoformat(), str(user_id), "", "", "", u.get('lang', 'ru'), u.get('plan', 'trial'), paid],
                value_input_option="RAW"
            )
        await asyncio.to_thread(_do)
        u["registered_to_sheets"] = True
        save_users()
    except Exception:
        logging.exception("sheets_register_user failed")

async def _sheets_update_user_row_async(user_id: int, username: str, first_name: str, last_name: str, lang: str, plan: str, paid_until: Optional[datetime]):
    """–£–ø—Ä–æ—â—ë–Ω–Ω–æ: –¥–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É (–ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)."""
    if not _users_ws:
        return
    try:
        def _do():
            ws = _users_ws_get()
            if not ws:
                return
            paid = paid_until.isoformat() if paid_until else ""
            ws.append_row(
                [datetime.utcnow().isoformat(), str(user_id), username or "", first_name or "", last_name or "", lang or "ru", plan or "", paid],
                value_input_option="RAW"
            )
        await asyncio.to_thread(_do)
    except Exception:
        logging.exception("sheets_update_user_row failed")

# --- append –≤ History/Metrics/Feedback ---
async def _sheets_append_history_async(user_id: int, role: str, content: str, col1: str = "", col2: str = ""):
    if not _sheets_client:
        return
    try:
        def _do():
            ws = _ws_get(HISTORY_SHEET, ["ts","user_id","role","content","col1","col2"])
            if not ws:
                return
            ws.append_row([_ts(), str(user_id), role, content, col1, col2], value_input_option="RAW")
        await asyncio.to_thread(_do)
    except Exception:
        logging.exception("sheets_append_history failed")

async def _sheets_append_feedback_async(
    user_id: int, username: str, first_name: str, last_name: str, feedback: str, comment: str = ""
):
    if not _sheets_client:
        return
    try:
        def _do():
            ws = _ws_get(FEEDBACK_SHEET, ["ts","user_id","username","first_name","last_name","feedback","comment"])
            if not ws:
                return
            ws.append_row([
                _ts(),
                str(user_id),
                username or "",
                first_name or "",
                last_name or "",
                feedback,
                comment or ""
            ], value_input_option="RAW")
        await asyncio.to_thread(_do)
    except Exception:
        logging.exception("sheets_append_feedback failed")

async def _sheets_append_metric_async(user_id: int, event: str, value: str = "", notes: str = ""):
    if not _sheets_client:
        return
    try:
        def _do():
            ws = _ws_get(METRICS_SHEET, ["ts","user_id","event","value","notes"])
            if not ws:
                return
            ws.append_row([_ts(), str(user_id), event, value, notes], value_input_option="RAW")
        await asyncio.to_thread(_do)
    except Exception:
        logging.exception("sheets_append_metric failed")

# ================== –ë–ï–ó–û–¢–ö–ê–ó–ù–û–°–¢–¨: retry + –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ –æ—à–∏–±–∫–∏ =================
async def _retry(coro_factory, attempts=3, base_delay=0.8):
    last_exc = None
    for i in range(attempts):
        try:
            return await coro_factory()
        except HTTPStatusError as e:
            if e.response.status_code in (429, 500, 502, 503, 504):
                last_exc = e
            else:
                raise
        except (HTTPError, asyncio.TimeoutError) as e:
            last_exc = e
        await asyncio.sleep(base_delay * (2 ** i) + random.random() * 0.2)
    if last_exc:
        raise last_exc

def _friendly_error_text(e, lang="ru"):
    ru = {
        "timeout": "‚åõ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á—É—Ç—å –ø–æ–∑–∂–µ.",
        "429": "‚è≥ –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –º–æ–¥–µ–ª—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.",
        "401": "üîë –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–ª—é—á–æ–º OpenAI. –°–æ–æ–±—â–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.",
        "402": "üí≥ –ò—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç –æ–ø–ª–∞—Ç—ã OpenAI. –°–æ–æ–±—â–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.",
        "5xx": "‚òÅÔ∏è –ü–æ—Å—Ç–∞–≤—â–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.",
        "generic": "–ò–∑–≤–∏–Ω–∏, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
    }
    uz = {
        "timeout": "‚åõ Manba javob bermayapti. Birozdan so‚Äòng qayta urinib ko‚Äòring.",
        "429": "‚è≥ Modelga yuklama yuqori. Bir daqiqadan so‚Äòng urinib ko‚Äòring.",
        "401": "üîë OpenAI kaliti muammosi. Texnik yordamga yozing.",
        "402": "üí≥ OpenAI to‚Äòlovi limiti tugagan. Texnik yordamga yozing.",
        "5xx": "‚òÅÔ∏è Xizmat vaqtincha ishlamayapti. Keyinroq urinib ko‚Äòring.",
        "generic": "Kechirasiz, hozir javob bera olmadim. Yana urinib ko‚Äòring.",
    }
    M = uz if lang == "uz" else ru
    if isinstance(e, HTTPStatusError):
        code = e.response.status_code
        if code == 429: return M["429"]
        if code == 401: return M["401"]
        if code == 402: return M["402"]
        if 500 <= code <= 599: return M["5xx"]
    if isinstance(e, (HTTPError, asyncio.TimeoutError)):
        return M["timeout"]
    return M["generic"]

# ================== –ò–ò =================
BASE_SYSTEM_PROMPT = (
    "–¢—ã ‚Äî SavolBot (—á–∞—Å—Ç—å TripleA). –û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –ø–æ –¥–µ–ª—É: 6‚Äì8 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –±–µ–∑ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç–∞, "
    "—Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ —Å–ø–∏—Å–∫–∞–º–∏ –ø–æ –º–µ—Å—Ç—É. –õ—ë–≥–∫–∏–π —é–º–æ—Ä –¥–æ–ø—É—Å—Ç–∏–º. –°–æ–±–ª—é–¥–∞–π –∑–∞–∫–æ–Ω—ã –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞. "
    "–ù–µ –¥–∞–≤–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π. –ü–æ –º–µ–¥–∏—Ü–∏–Ω–µ ‚Äî —Ç–æ–ª—å–∫–æ –æ–±—â–∞—è —Å–ø—Ä–∞–≤–∫–∞ –∏ —Å–æ–≤–µ—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É. "
    "–Ø–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞ = —è–∑—ã–∫ –≤–æ–ø—Ä–æ—Å–∞ (RU/UZ). –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—Å—Ç–∞–≤–ª—è–π —Å—Å—ã–ª–∫–∏ –∏ URL. "
    "–ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–∞–ª–æ ‚Äî –≤–µ–∂–ª–∏–≤–æ –ø–æ–ø—Ä–æ—Å–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ –¥–µ—Ç–∞–ª–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π. "
    "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ–¥–∫—É –∏–∑ –ø–æ–∏—Å–∫–∞, –Ω–æ –æ—Ç–≤–µ—á–∞–π —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π –¥–∞—Ç—É –æ—Ç—Å–µ—á–∫–∏ –∑–Ω–∞–Ω–∏–π; –Ω–µ –ø–∏—à–∏, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ ¬´–∞–∫—Ç—É–∞–ª—å–Ω—ã –¥–æ ...¬ª. –ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ –∑–Ω–∞–µ—à—å ‚Äî –ø—Ä–æ–≤–µ—Ä—å —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫."
)

# (–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∏–º–ø–æ—Ä—Ç asyncio/httpx –≤ –∏—Å—Ö–æ–¥–Ω–∏–∫–µ –±—ã–ª ‚Äî –Ω–µ —Ç—Ä–æ–≥–∞—é)
import asyncio as _asyncio_shadow  # –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
import httpx as _httpx_shadow     # –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

# –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –º–æ–¥–µ–ª–∏
if not isinstance(_model_sem, asyncio.Semaphore):
    _model_sem = asyncio.Semaphore(MODEL_CONCURRENCY)

async def ask_gpt(user_text: str, topic_hint: Optional[str], user_id: int) -> str:
    if not OPENAI_API_KEY:
        return f"–í—ã —Å–ø—Ä–æ—Å–∏–ª–∏: {user_text}"

    system = BASE_SYSTEM_PROMPT + (f" –£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–º—ã: {topic_hint}" if topic_hint else "")
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
    payload = {
        "model": OPENAI_MODEL,
        "temperature": 0.6,
        "messages": build_messages(user_id, system, user_text),
    }

    async def _do():
        return await client_openai.post("/chat/completions", headers=headers, json=payload)

    try:
        async with _model_sem:
            r = await _retry(lambda: _do(), attempts=3)
        r.raise_for_status()
        raw = r.json()["choices"][0]["message"]["content"].strip()
        # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –≤–¥—Ä—É–≥ –≤–µ—Ä–Ω—É–ª–∞ –¥–∏—Å–∫–ª–µ–π–º–µ—Ä –ø—Ä–æ —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞–Ω–∏—è ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–π–¥—ë–º –≤ live-–ø–æ–∏—Å–∫
        if _has_cutoff_disclaimer(raw) and TAVILY_API_KEY:
            try:
                return await answer_with_live_search(user_text, topic_hint, user_id)
            except Exception:
                pass
        return strip_links_and_cleanup(_sanitize_cutoff(raw))
    except Exception as e:
        logging.exception("ask_gpt failed")
        u = USERS.get(user_id, {"lang": "ru"})
        return _friendly_error_text(e, u.get("lang", "ru"))

TIME_SENSITIVE_PATTERNS = [
    r"\b(—Å–µ–≥–æ–¥–Ω—è|—Å–µ–π—á–∞—Å|–Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç|–∞–∫—Ç—É–∞–ª—å–Ω|–≤ \d{4} –≥–æ–¥—É|–≤ 20\d{2})\b",
    r"\b(–∫—É—Ä—Å|–∑–∞—Ä–ø–ª–∞—Ç|–∏–Ω—Ñ–ª—è—Ü|—Å—Ç–∞–≤–∫|—Ü–µ–Ω–∞|–Ω–æ–≤–æ—Å—Ç|—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫|–ø—Ä–æ–≥–Ω–æ–∑)\b",
    r"\b(bugun|hozir|narx|kurs|yangilik)\b",
    r"\b(–∫—Ç–æ|–∫–∞–∫ –∑–æ–≤—É—Ç|–ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª|–¥–∏—Ä–µ–∫—Ç–æ—Ä|ceo|—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª)\b",
]

def is_time_sensitive(q: str) -> bool:
    return any(re.search(rx, q.lower()) for rx in TIME_SENSITIVE_PATTERNS)

# === –û—Ç—Å–µ–∫–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∏—Å–∫–ª–µ–π–º–µ—Ä—ã –ø—Ä–æ "–∑–Ω–∞–Ω–∏—è –¥–æ 2023" ===
_CUTOFF_PATTERNS = [
    r"–∞–∫—Ç—É–∞–ª\w+\s+–¥–æ\s+\w+\s+20\d{2}",
    r"–∑–Ω–∞–Ω[^\.!\n]*–¥–æ\s+\w+\s+20\d{2}",
    r"\bknowledge\s+cutoff\b",
    r"\bas of\s+\w+\s+20\d{2}",
]
def _has_cutoff_disclaimer(text: str) -> bool:
    low = (text or "").lower()
    import re as _re
    return any(_re.search(rx, low) for rx in _CUTOFF_PATTERNS)

def _sanitize_cutoff(text: str) -> str:
    import re as _re
    s = text or ""
    for rx in _CUTOFF_PATTERNS:
        s = _re.sub(rx, "", s, flags=_re.IGNORECASE)
    s = _re.sub(r"\n{3,}", "\n\n", s).strip()
    return s



# === –≠–≤—Ä–∏—Å—Ç–∏–∫–∏ ¬´–¥–∏–Ω–∞–º–∏—á–Ω–æ—Å—Ç–∏¬ª –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ ===
_DYNAMIC_KEYWORDS = [
    "–∫—É—Ä—Å", "—Å—Ç–∞–≤–∫", "–∏–Ω—Ñ–ª—è—Ü", "–∑–∞—Ä–ø–ª–∞—Ç", "–Ω–∞–ª–æ–≥", "—Ü–µ–Ω–∞", "—Ç–∞—Ä–∏—Ñ", "–ø–æ—Å–æ–±–∏", "–ø–µ–Ω—Å–∏", "–∫—Ä–µ–¥–∏—Ç",
    "–Ω–æ–≤–æ—Å—Ç", "–ø—Ä–æ–≥–Ω–æ–∑", "–∏–∑–º–µ–Ω–µ–Ω–∏", "–æ–±–Ω–æ–≤–ª–µ–Ω–∏", "statistika", "narx", "stavka", "yangilik", "price", "rate",
]
import re as _re2
def _contains_fresh_year(s: str, window: int = 3) -> bool:
    try:
        y_now = datetime.utcnow().year
    except Exception:
        y_now = 2025
    years = [int(y) for y in _re2.findall(r"\\b(20\\d{2})\\b", s or "")]
    return any(y_now - y <= window for y in years)

def _looks_dynamic(*texts: str) -> bool:
    low = " ".join([t.lower() for t in texts if t])
    return any(k in low for k in _DYNAMIC_KEYWORDS) or _contains_fresh_year(low)

async def verify_with_live_sources(user_text: str, draft_answer: str, topic_hint: Optional[str], user_id: int) -> str:
    \"\"\"–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ live-–∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Ü–∏—Ñ—Ä—ã/–¥–∞—Ç—ã.\"\"\"
    if not TAVILY_API_KEY:
        return draft_answer

    data = await web_search_tavily(user_text, max_results=5)
    if not data:
        return draft_answer

    snippets = []
    for it in (data.get("results") or [])[:5]:
        title = (it.get("title") or "")[:100]
        content = (it.get("content") or "")[:400]
        snippets.append(f"- {title}\\n{content}")

    system = (
        BASE_SYSTEM_PROMPT
        + " –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–∫—Ç—ã –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π —á–∏—Å–ª–∞/–¥–∞—Ç—ã/—Å—Ç–∞–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤. "
          "–ï—Å–ª–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—à—å ‚Äî —á—ë—Ç–∫–æ –ø–µ—Ä–µ–ø–∏—à–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã, –Ω–µ —Å—Å—ã–ª–∞–π—Å—è –Ω–∞ URL, –Ω–µ —É–ø–æ–º–∏–Ω–∞–π '–∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–∏–∂–µ'. "
          "–ü–∏—à–∏ –∫–æ–º–ø–∞–∫—Ç–Ω–æ, –±–µ–∑ –¥–∏—Å–∫–ª–µ–π–º–µ—Ä–æ–≤ –æ–± –æ—Ç—Å–µ—á–∫–µ –∑–Ω–∞–Ω–∏–π."
    )
    if topic_hint:
        system += f" –£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–º—ã: {topic_hint}"

    user_aug = (\
        "–í–û–ü–†–û–°:\\n" + (user_text or "") + "\\n\\n"
        "–ß–ï–†–ù–û–í–ò–ö –û–¢–í–ï–¢–ê:\\n" + (draft_answer or "") + "\\n\\n"
        "–°–í–û–î–ö–ê –ò–°–¢–û–ß–ù–ò–ö–û–í (–±–µ–∑ —Å—Å—ã–ª–æ–∫):\\n" + "\\n\\n".join(snippets)
    )

    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
    payload = {"model": OPENAI_MODEL, "temperature": 0.2, "messages": build_messages(user_id, system, user_aug)}

    async def _do():
        return await client_openai.post("/chat/completions", headers=headers, json=payload)

    try:
        async with _model_sem:
            r = await _retry(lambda: _do(), attempts=2)
        r.raise_for_status()
        corrected = r.json()["choices"][0]["message"]["content"].strip()
        corrected = strip_links_and_cleanup(_sanitize_cutoff(corrected))
        # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ ‚Äî –æ—Å—Ç–∞–≤–∏–º —á–µ—Ä–Ω–æ–≤–∏–∫
        return corrected if corrected else draft_answer
    except Exception:
        return draft_answer

# === LIVE CACHE (–±—ã–ª–æ) ===
CACHE_TTL_SECONDS = int(os.getenv("LIVE_CACHE_TTL", "86400"))
CACHE_MAX_ENTRIES = int(os.getenv("LIVE_CACHE_MAX", "500"))
LIVE_CACHE: dict[str, dict] = {}

def _norm_query(q: str) -> str:
    return re.sub(r"\s+", " ", q.strip().lower())

def live_cache_get(q: str):
    k = _norm_query(q); it = LIVE_CACHE.get(k)
    if not it:
        return None
    if time.time() - it["ts"] > CACHE_TTL_SECONDS:
        LIVE_CACHE.pop(k, None); return None
    return it["answer"]

def live_cache_set(q: str, a: str):
    if len(LIVE_CACHE) >= CACHE_MAX_ENTRIES:
        oldest = min(LIVE_CACHE, key=lambda x: LIVE_CACHE[x]["ts"])
        LIVE_CACHE.pop(oldest, None)
    LIVE_CACHE[_norm_query(q)] = {"ts": time.time(), "answer": a}

async def web_search_tavily(query: str, max_results: int = 3) -> Optional[dict]:
    if not TAVILY_API_KEY:
        return None
    depth = "advanced" if is_time_sensitive(query) else "basic"
    payload = {
        "api_key": TAVILY_API_KEY,
        "query": query,
        "search_depth": depth,
        "max_results": max_results,
        "include_answer": True,
        "include_domains": [],
    }

    async def _do():
        return await client_http.post("https://api.tavily.com/search", json=payload)

    try:
        r = await _retry(lambda: _do(), attempts=2)
        r.raise_for_status()
        return r.json()
    except Exception as e:
        logging.warning("tavily search failed: %s", e)
        return None

async def answer_with_live_search(user_text: str, topic_hint: Optional[str], user_id: int) -> str:
    c = live_cache_get(user_text)
    if c:
        return c

    data = await web_search_tavily(user_text)
    if not data:
        return await ask_gpt(user_text, topic_hint, user_id)

    snippets = []
    for it in (data.get("results") or [])[:3]:
        title = (it.get("title") or "")[:80]
        content = (it.get("content") or "")[:350]
        snippets.append(f"- {title}\n{content}")

    system = BASE_SYSTEM_PROMPT + " –û—Ç–≤–µ—á–∞–π, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–Ω–æ –±–µ–∑ —Å—Å—ã–ª–æ–∫). –ö—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É."
    if topic_hint:
        system += f" –£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–º—ã: {topic_hint}"
    user_aug = f"{user_text}\n\n–ò–°–¢–û–ß–ù–ò–ö–ò (—Å–≤–æ–¥–∫–∞ –±–µ–∑ URL):\n" + "\n\n".join(snippets)

    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
    payload = {"model": OPENAI_MODEL, "temperature": 0.3, "messages": build_messages(user_id, system, user_aug)}

    async def _do():
        return await client_openai.post("/chat/completions", headers=headers, json=payload)

    try:
        async with _model_sem:
            r = await _retry(lambda: _do(), attempts=3)
        r.raise_for_status()
        answer = r.json()["choices"][0]["message"]["content"].strip()
        final = strip_links_and_cleanup(answer)
        live_cache_set(user_text, final)
        return final
    except Exception as e:
        logging.exception("live answer failed")
        u = USERS.get(user_id, {"lang": "ru"})
        return _friendly_error_text(e, u.get("lang", "ru"))

# ================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï: —ç—Ñ—Ñ–µ–∫—Ç ¬´–¥—É–º–∞—é‚Ä¶¬ª (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏) =================
async def send_thinking_progress(message: Message) -> Message:
    try:
        m = await message.answer("‚è≥ –î—É–º–∞—é‚Ä¶")
        await asyncio.sleep(0.4)
        await m.edit_text("üîé –°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é‚Ä¶")
        return m
    except Exception:
        return await message.answer("üîé –°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é‚Ä¶")

# ================== FEEDBACK UI =================
def feedback_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üëç –û–∫", callback_data="fb:ok"),
            InlineKeyboardButton(text="üëé –ù–µ –æ–∫", callback_data="fb:bad"),
        ],
        [InlineKeyboardButton(text="‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="fb:comment")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ó–∞–∫—Ä—ã—Ç—å", callback_data="fb:close")],
    ])

# —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {user_id}
FEEDBACK_PENDING: set[int] = set()

# ================== –ö–û–ú–ê–ù–î–´ =================
WELCOME_RU = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî SavolBot, —á–∞—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã TripleA.\n"
    "–ú—ã –¥–µ–ª–∞–µ–º –∞–≤—Ç–æ–æ–±–∑–≤–æ–Ω—ã, —á–∞—Ç-–±–æ—Ç—ã –∏ GPT –≤ Telegram. "
    "–ù–∞—à –ø–ª—é—Å: —É–¥–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ ChatGPT –ø—Ä—è–º–æ –≤ Telegram ‚Äî –≤—Å–µ–≥–æ –∑–∞ $10/–º–µ—Å (–≤–º–µ—Å—Ç–æ $20 —É –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏).\n\n"
    "–¢–∞—Ä–∏—Ñ: ‚≠ê Creative ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫–∏, –ø–æ–º–æ–≥–∞—é —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π. "
    "–°–µ–π—á–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç 7-–¥–Ω–µ–≤–Ω—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ü–æ—Ç–æ–º ‚Äî $10/–º–µ—Å.\n\n"
    "–ü–æ–ª–µ–∑–Ω–æ–µ: /tariffs ‚Äî –ø—Ä–æ —Ç–∞—Ä–∏—Ñ, /myplan ‚Äî –º–æ–π –ø–ª–∞–Ω, /topics ‚Äî –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É.\n"
    "–ü–∏—à–∏ –≤–æ–ø—Ä–æ—Å ‚Äî –Ω–∞—á–Ω—ë–º!"
)
WELCOME_UZ = (
    "üëã Salom! Men ‚Äî SavolBot, TripleA jamoasining qismi.\n"
    "Biz avtoqo‚Äòng‚Äòiroqlar, chat-botlar va Telegramda GPT xizmatlarini qilamiz. "
    "Afzalligimiz: ChatGPT‚Äôga Telegramning o‚Äòzida qulay kirish ‚Äî oyiga atigi $10 (rasmiy $20 o‚Äòrniga).\n\n"
    "Tarif: ‚≠ê Creative ‚Äî suratlar generatsiyasi, hujjatlar bo‚Äòyicha yordam, cheklanmagan xabarlar. "
    "Hozir 7 kunlik bepul davr. Keyin ‚Äî $10/oy.\n\n"
    "Foydali: /tariffs ‚Äî tarif, /myplan ‚Äî reja, /topics ‚Äî mavzu tanlash.\n"
    "Savolingizni yozing ‚Äî boshlaymiz!"
)

TOPICS = {
    "daily":   {"title_ru": "–ë—ã—Ç", "title_uz": "Maishiy", "hint": "–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã, —á–µ–∫-–ª–∏—Å—Ç—ã –∏ —à–∞–≥–∏."},
    "finance": {"title_ru": "–§–∏–Ω–∞–Ω—Å—ã", "title_uz": "Moliya", "hint": "–û–±—ä—è—Å–Ω—è–π —Å —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏. –ë–µ–∑ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."},
    "gov":     {"title_ru": "–ì–æ—Å—É—Å–ª—É–≥–∏", "title_uz": "Davlat xizmatlari", "hint": "–û–ø–∏—à–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —à–∞–≥–∏ –ø–æ–¥–∞—á–∏."},
    "biz":     {"title_ru": "–ë–∏–∑–Ω–µ—Å", "title_uz": "Biznes", "hint": "–ö—Ä–∞—Ç–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏/–¥–æ–∫—É–º–µ–Ω—Ç–∞–º."},
    "edu":     {"title_ru": "–£—á—ë–±–∞", "title_uz": "Ta‚Äôlim", "hint": "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ/–æ–±—É—á–µ–Ω–∏–µ –∏ —à–∞–≥–∏."},
    "it":      {"title_ru": "IT", "title_uz": "IT", "hint": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ. –ù–µ —Å–æ–≤–µ—Ç—É–π –Ω–∏—á–µ–≥–æ –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–≥–æ."},
    "health":  {"title_ru": "–ó–¥–æ—Ä–æ–≤—å–µ (–æ–±—â.)", "title_uz": "Sog‚Äòliq (umumiy)", "hint": "–¢–æ–ª—å–∫–æ –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –°–æ–≤–µ—Ç—É–π –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É."},
}

def topic_kb(lang="ru", current=None):
    rows = []
    for key, t in TOPICS.items():
        label = t["title_uz"] if lang == "uz" else t["title_ru"]
        if current == key:
            label = f"‚úÖ {label}"
        rows.append([InlineKeyboardButton(text=label, callback_data=f"topic:{key}")])
    rows.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ó–∞–∫—Ä—ã—Ç—å / Yopish", callback_data="topic:close")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

@dp.message(Command("start"))
async def cmd_start(message: Message):
    u = get_user(message.from_user.id)
    u["lang"] = "uz" if is_uzbek(message.text or "") else "ru"; save_users()
    try:
        loop = asyncio.get_running_loop()
        loop.create_task(_sheets_register_user_async(message.from_user.id))
        loop.create_task(_sheets_append_metric_async(message.from_user.id, "cmd", "start"))
        loop.create_task(_sheets_append_history_async(message.from_user.id, "user", "/start"))
    except RuntimeError:
        pass
    hello = WELCOME_UZ if u["lang"] == "uz" else WELCOME_RU
    await message.answer(hello)
    try:
        asyncio.get_running_loop().create_task(_sheets_append_history_async(message.from_user.id, "assistant", hello))
    except RuntimeError:
        pass

@dp.message(Command("help"))
async def cmd_help(message: Message):
    u = get_user(message.from_user.id)
    txt = "‚ÑπÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å (RU/UZ). –Ø —É–º–µ—é –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –ø–æ–º–æ–≥–∞—Ç—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏.\n/tariffs ‚Äî —Ç–∞—Ä–∏—Ñ, /myplan ‚Äî –ø–ª–∞–Ω, /topics ‚Äî —Ç–µ–º–∞." \
        if u["lang"] == "ru" else \
        "‚ÑπÔ∏è Savolingizni yozing (RU/UZ). Surat generatsiyasi va hujjatlar bo‚Äòyicha yordam.\n/tariffs ‚Äî tarif, /myplan ‚Äî reja, /topics ‚Äî mavzu."
    await message.answer(txt)
    try:
        asyncio.get_running_loop().create_task(_sheets_append_history_async(message.from_user.id, "assistant", txt))
    except RuntimeError:
        pass

@dp.message(Command("about"))
async def cmd_about(message: Message):
    u = get_user(message.from_user.id)
    txt = (
        "ü§ñ SavolBot –æ—Ç TripleA: –∞–≤—Ç–æ–æ–±–∑–≤–æ–Ω—ã, —á–∞—Ç-–±–æ—Ç—ã –∏ GPT –≤ Telegram. "
        "Creative ‚Äî $10/–º–µ—Å, 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ. /tariffs"
        if u["lang"] == "ru"
        else "ü§ñ SavolBot (TripleA): avtoqo‚Äòng‚Äòiroqlar, chat-botlar, Telegramda GPT. "
             "Creative ‚Äî $10/oy, 7 kun bepul. /tariffs"
    )
    await message.answer(txt)

@dp.message(Command("tariffs"))
async def cmd_tariffs(message: Message):
    u = get_user(message.from_user.id)
    await message.answer(tariffs_text(u["lang"]), reply_markup=pay_kb())

@dp.message(Command("myplan"))
async def cmd_myplan(message: Message):
    u = get_user(message.from_user.id)
    status = "–∞–∫—Ç–∏–≤–Ω–∞" if has_active_sub(u) else "–Ω–µ—Ç"
    until = u["paid_until"].isoformat() if u.get("paid_until") else "‚Äî"
    topic = u.get("topic") or "‚Äî"
    is_wl = is_whitelisted(message.from_user.id)
    plan_label = "whitelist (–±–µ–∑–ª–∏–º–∏—Ç)" if is_wl else u.get("plan", "trial")
    await message.answer(
        f"–í–∞—à –ø–ª–∞–Ω: {plan_label}\n–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞: {status} (–¥–æ {until})\n–¢–µ–º–∞: {topic}"
        if u["lang"] == "ru" else
        f"Rejangiz: {plan_label}\nFaollik: {status} (gacha {until})\nMavzu: {topic}"
    )

@dp.message(Command("topics"))
async def cmd_topics(message: Message):
    u = get_user(message.from_user.id); lang = u["lang"]
    head = "üóÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:" if lang == "ru" else "üóÇ Mavzuni tanlang:"
    await message.answer(head, reply_markup=topic_kb(lang, current=u.get("topic")))

@dp.message(Command("new"))
async def cmd_new(message: Message):
    reset_history(message.from_user.id)
    txt = "üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É." if get_user(message.from_user.id)["lang"] == "ru" else "üßπ Kontekst tozalandi. Yangi mavzu."
    await message.answer(txt)

# -------- Feedback –∫–æ–º–∞–Ω–¥–æ–π ----------
@dp.message(Command("feedback"))
async def cmd_feedback(message: Message):
    u = get_user(message.from_user.id)
    txt = "–í–∞–º —É–¥–æ–±–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º?" if u["lang"] == "ru" else "Bizning botdan foydalanish qulaymi?"
    await message.answer(txt, reply_markup=feedback_kb())
    try:
        asyncio.get_running_loop().create_task(_sheets_append_metric_async(message.from_user.id, "feedback_prompt", "manual"))
    except RuntimeError:
        pass

# -------- Sheets –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ----------
@dp.message(Command("gs_debug"))
async def cmd_gs_debug(message: Message):
    has_env = all([GOOGLE_CREDENTIALS, SHEETS_SPREADSHEET_ID, USERS_SHEET])
    await message.answer(
        "ENV OK: {env}\nID: {sid}\nUsers WS: {ws}\nCred len: {cl}\nUsers inited: {ok}\nErr: {err}".format(
            env=has_env,
            sid=SHEETS_SPREADSHEET_ID or "‚Äî",
            ws=USERS_SHEET or "‚Äî",
            cl=len(GOOGLE_CREDENTIALS or ""),
            ok=bool(_users_ws),
            err=LAST_SHEETS_ERROR or "‚Äî",
        )
    )

@dp.message(Command("gs_reinit"))
async def cmd_gs_reinit(message: Message):
    _init_sheets()
    await message.answer("Reinit ‚Üí " + ("‚úÖ OK" if _users_ws else f"‚ùå Fail: {LAST_SHEETS_ERROR}"))

@dp.message(Command("gs_users"))
async def cmd_gs_users(message: Message):
    try:
        if not _sheets_client:
            return await message.answer("‚ùå Sheets client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. /gs_reinit")
        sh = _sheets_client.open_by_key(SHEETS_SPREADSHEET_ID)
        titles = [ws.title for ws in sh.worksheets()]
        await message.answer("–õ–∏—Å—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ:\n" + "\n".join("‚Ä¢ " + t for t in titles))
    except Exception as e:
        logging.exception("gs_users failed")
        await message.answer(f"‚ùå gs_users –æ—à–∏–±–∫–∞: {e}")

# ================== CALLBACKS (–æ–ø–ª–∞—Ç–∞) =================
@dp.callback_query(F.data == "show_tariffs")
async def cb_show_tariffs(call: CallbackQuery):
    u = get_user(call.from_user.id)
    await call.message.edit_text(tariffs_text(u["lang"]), reply_markup=pay_kb())
    await call.answer()

@dp.callback_query(F.data == "subscribe_creative")
async def cb_subscribe_creative(call: CallbackQuery):
    pay_link = "https://pay.example.com/savolbot/creative"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid_creative_done")]
    ])
    txt = (
        f"üí≥ –¢–∞—Ä–∏—Ñ ‚≠ê Creative ‚Äî ${TARIFF['creative']['price_usd']}/–º–µ—Å.\n–û–ø–ª–∞—Ç–∞: {pay_link}\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )
    await call.message.answer(txt, reply_markup=kb)
    await call.answer()

@dp.callback_query(F.data == "paid_creative_done")
async def cb_paid_done(call: CallbackQuery):
    if ADMIN_CHAT_ID and bot:
        try:
            await bot.send_message(
                int(ADMIN_CHAT_ID),
                f"üë§ @{call.from_user.username or call.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–∫—Ç–∏–≤–∞—Ü–∏—é ¬´Creative¬ª.\n"
                f"TG ID: {call.from_user.id}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /grant_creative {call.from_user.id}"
            )
        except Exception:
            logging.exception("Notify admin failed")
    await call.message.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –æ–ø–ª–∞—Ç—É –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É.")
    await call.answer()

@dp.callback_query(F.data.startswith("topic:"))
async def cb_topic(call: CallbackQuery):
    u = get_user(call.from_user.id)
    _, key = call.data.split(":", 1)
    if key == "close":
        try:
            await call.message.delete()
        except Exception:
            pass
        return await call.answer("OK")
    if key in TOPICS:
        u["topic"] = key; save_users()
        lang = u["lang"]; title = TOPICS[key]["title_uz"] if lang == "uz" else TOPICS[key]["title_ru"]
        await call.message.edit_reply_markup(reply_markup=topic_kb(lang, current=key))
        await call.answer(f"–í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞: {title}" if lang == "ru" else f"Mavzu tanlandi: {title}")

# ================== CALLBACKS (feedback) =================
@dp.callback_query(F.data == "fb:close")
async def cb_fb_close(call: CallbackQuery):
    try:
        await call.message.delete()
    except Exception:
        pass
    await call.answer("–°–ø–∞—Å–∏–±–æ!")

@dp.callback_query(F.data == "fb:ok")
async def cb_fb_ok(call: CallbackQuery):
    uid = call.from_user.id
    try:
        loop = asyncio.get_running_loop()
        loop.create_task(_sheets_append_feedback_async(
            uid,
            call.from_user.username or "",
            call.from_user.first_name or "",
            call.from_user.last_name or "",
            "ok",
            ""
        ))
        loop.create_task(_sheets_append_metric_async(uid, "feedback", "ok"))
    except RuntimeError:
        pass
    await call.message.edit_text("–ü—Ä–∏–Ω—è—Ç–æ: üëç –û–∫. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!" if get_user(uid)["lang"]=="ru" else "Qabul qilindi: üëç Ok. Rahmat!")
    await call.answer()

@dp.callback_query(F.data == "fb:bad")
async def cb_fb_bad(call: CallbackQuery):
    uid = call.from_user.id
    try:
        loop = asyncio.get_running_loop()
        loop.create_task(_sheets_append_feedback_async(
            uid,
            call.from_user.username or "",
            call.from_user.first_name or "",
            call.from_user.last_name or "",
            "not_ok",
            ""
        ))
        loop.create_task(_sheets_append_metric_async(uid, "feedback", "not_ok"))
    except RuntimeError:
        pass
    await call.message.edit_text("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª: üëé –ù–µ –æ–∫. –°–ø–∞—Å–∏–±–æ!" if get_user(uid)["lang"]=="ru" else "Yozib oldim: üëé Not ok. Rahmat!")
    await call.answer()

@dp.callback_query(F.data == "fb:comment")
async def cb_fb_comment(call: CallbackQuery):
    uid = call.from_user.id
    FEEDBACK_PENDING.add(uid)
    txt = (
        "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∏–ª–∏ /cancel):"
        if get_user(uid)["lang"] == "ru"
        else "Bitta xabar bilan qisqa izoh yozing (yoki /cancel):"
    )
    await call.message.edit_text(txt)
    await call.answer()

# ================== –ê–î–ú–ò–ù: –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ =================
@dp.message(Command("grant_creative"))
async def cmd_grant_creative(message: Message):
    if str(message.from_user.id) != str(ADMIN_CHAT_ID):
        return await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    parts = message.text.strip().split()
    if len(parts) != 2 or not parts[1].isdigit():
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant_creative <tg_id>")
    target_id = int(parts[1]); u = get_user(target_id)
    u["plan"] = "creative"
    u["paid_until"] = datetime.utcnow() + timedelta(days=TARIFF["creative"]["duration_days"]); save_users()
    await message.answer(f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ¬´Creative¬ª –¥–ª—è {target_id} –¥–æ {u['paid_until'].isoformat()}")
    try:
        if bot:
            await bot.send_message(target_id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ ¬´Creative¬ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!")
        try:
            loop = asyncio.get_running_loop()
            loop.create_task(_sheets_update_user_row_async(
                target_id, "", "", "", get_user(target_id).get("lang","ru"), "creative", u["paid_until"]
            ))
            loop.create_task(_sheets_append_metric_async(target_id, "grant", "creative"))
        except RuntimeError:
            pass
    except Exception:
        logging.warning("Notify user failed")

# ================== QUEUE + CACHE –î–õ–Ø Q/A ==================
# --- –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –∏ –æ—Ü–µ–Ω–∫–∏ ETA
WORKER_CONCURRENCY = int(os.getenv("WORKER_CONCURRENCY", "4"))   # –∫–æ–ª-–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤
QUEUE_NOTICE_THRESHOLD = int(os.getenv("QUEUE_NOTICE_THRESHOLD", "3"))
ETA_MIN_SEC = int(os.getenv("ETA_MIN_SEC", "5"))
ETA_MAX_SEC = int(os.getenv("ETA_MAX_SEC", "120"))

SAVOL_QUEUE: asyncio.Queue = asyncio.Queue()
_avg_service_sec: float | None = None
_service_alpha = float(os.getenv("SERVICE_ALPHA", "0.2"))

# --- –ö—ç—à Q/A (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞)
QA_CACHE: dict[str, dict] = {}
QA_CACHE_MAX = int(os.getenv("QA_CACHE_MAX", "1000"))
QA_CACHE_TTL = int(os.getenv("QA_CACHE_TTL", "86400"))  # 24h

def _qa_norm(q: str) -> str:
    return re.sub(r"\s+", " ", q.strip().lower())

def qa_cache_get(q: str) -> Optional[str]:
    k = _qa_norm(q)
    it = QA_CACHE.get(k)
    if not it:
        return None
    if time.time() - it["ts"] > QA_CACHE_TTL:
        QA_CACHE.pop(k, None); return None
    return it["answer"]

def qa_cache_set(q: str, a: str):
    k = _qa_norm(q)
    if len(QA_CACHE) >= QA_CACHE_MAX:
        oldest = min(QA_CACHE, key=lambda x: QA_CACHE[x]["ts"])
        QA_CACHE.pop(oldest, None)
    QA_CACHE[k] = {"ts": time.time(), "answer": a}

def _eta_seconds(pos: int) -> int:
    if pos <= 1:
        return ETA_MIN_SEC
    avg = _avg_service_sec if (_avg_service_sec and _avg_service_sec > 0.1) else 6.0
    est = int(((pos - 1) * avg) / max(1, WORKER_CONCURRENCY))
    return max(ETA_MIN_SEC, min(ETA_MAX_SEC, est))

def _update_avg_service(elapsed: float):
    global _avg_service_sec
    if _avg_service_sec is None:
        _avg_service_sec = float(elapsed)
    else:
        _avg_service_sec = _service_alpha * float(elapsed) + (1 - _service_alpha) * _avg_service_sec

class SavolTask(dict):
    """ chat_id, uid, text, lang, topic_hint, use_live """
    pass

async def _process_task(task: SavolTask):
    uid = task["uid"]; chat_id = task["chat_id"]; text = task["text"]
    lang = task["lang"]; topic_hint = task["topic_hint"]; use_live = task["use_live"]
    t0 = time.time()
    try:
        # 1) –ö—ç—à Q/A
        cached = qa_cache_get(text)
        if cached:
            try:
                await bot.send_message(chat_id, f"(–∏–∑ –±–∞–∑—ã) {cached}")
            except Exception:
                pass
            append_history(uid, "assistant", cached)
            try:
                loop = asyncio.get_running_loop()
                loop.create_task(_sheets_append_history_async(uid, "assistant", cached))
                loop.create_task(_sheets_append_metric_async(uid, "msg", value=str(len(cached)), notes="assistant_len_cached"))
            except RuntimeError:
                pass
            return

        # 2) GPT –∑–∞–ø—Ä–æ—Å (live –∏–ª–∏ –æ–±—ã—á–Ω—ã–π)
        async def _get_answer():
            return await (answer_with_live_search(text, topic_hint, uid) if use_live else ask_gpt(text, topic_hint, uid))

        reply = await asyncio.wait_for(_get_answer(), timeout=REPLY_TIMEOUT_SEC)
        reply = strip_links_and_cleanup(reply)

        # 3) –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ live-–∏—Å—Ç–æ—á–Ω–∏–∫–∞–º (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        if VERIFY_DYNAMIC and _looks_dynamic(text, reply):
            try:
                reply_v = await asyncio.wait_for(verify_with_live_sources(text, reply, topic_hint, uid), timeout=VERIFY_TIMEOUT_SEC)
                if reply_v and reply_v.strip():
                    reply = reply_v
            except Exception:
                pass

        # 4) –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await bot.send_message(chat_id, reply)
        except Exception:
            pass

        # 5) –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        qa_cache_set(text, reply)

        # 6) –ò—Å—Ç–æ—Ä–∏—è –∏ –º–µ—Ç—Ä–∏–∫–∏
        append_history(uid, "user", text)      # –∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ (–ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞)
        append_history(uid, "assistant", reply)
        try:
            loop = asyncio.get_running_loop()
            loop.create_task(_sheets_append_history_async(uid, "assistant", reply))
            loop.create_task(_sheets_append_metric_async(uid, "msg", value=str(len(reply)), notes="assistant_len"))
        except RuntimeError:
            pass

    except asyncio.TimeoutError:
        err_txt = _friendly_error_text(asyncio.TimeoutError(), lang)
        try:
            await bot.send_message(chat_id, err_txt)
        except Exception:
            pass
        try:
            asyncio.get_running_loop().create_task(_sheets_append_metric_async(uid, "error", "timeout"))
        except RuntimeError:
            pass
    except Exception as e:
        logging.exception("worker _process_task fatal")
        err_txt = _friendly_error_text(e, lang)
        try:
            await bot.send_message(chat_id, err_txt)
        except Exception:
            pass
        try:
            asyncio.get_running_loop().create_task(_sheets_append_metric_async(uid, "error", "generic", notes=str(e)))
        except RuntimeError:
            pass
    finally:
        _update_avg_service(time.time() - t0)

async def _queue_worker(name: str):
    while True:
        task: SavolTask = await SAVOL_QUEUE.get()
        try:
            await _process_task(task)
        finally:
            SAVOL_QUEUE.task_done()

# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–û–ü–†–û–°–û–í =================
@dp.message(F.text)
async def handle_text(message: Message):
    text = (message.text or "").strip()
    uid = message.from_user.id
    u = get_user(uid)

    # –Ø–∑—ã–∫
    if is_uzbek(text):
        u["lang"] = "uz"; save_users()

    # --- –ø–µ—Ä–µ—Ö–≤–∞—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ —Ñ–∏–¥–±—ç–∫—É ---
    if uid in FEEDBACK_PENDING:
        FEEDBACK_PENDING.discard(uid)
        comment_text = text
        try:
            loop = asyncio.get_running_loop()
            loop.create_task(_sheets_append_feedback_async(
                uid,
                message.from_user.username or "",
                message.from_user.first_name or "",
                message.from_user.last_name or "",
                "comment_only",
                comment_text
            ))
            loop.create_task(_sheets_append_metric_async(uid, "feedback", "comment"))
        except RuntimeError:
            pass
        ok_txt = "–°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ –∑–∞–ø–∏—Å–∞–Ω üôå" if u["lang"]=="ru" else "Rahmat! Fikringiz yozib olindi üôå"
        await message.answer(ok_txt)
        append_history(uid, "user", comment_text)
        append_history(uid, "assistant", ok_txt)
        try:
            loop.create_task(_sheets_append_history_async(uid, "user", comment_text))
            loop.create_task(_sheets_append_history_async(uid, "assistant", ok_txt))
        except RuntimeError:
            pass
        return

    # –ü–æ–ª–∏—Ç–∏–∫–∞
    low = text.lower()
    if any(re.search(rx, low) for rx in ILLEGAL_PATTERNS):
        deny = DENY_TEXT_UZ if u["lang"] == "uz" else DENY_TEXT_RU
        await message.answer(deny)
        try:
            loop = asyncio.get_running_loop()
            loop.create_task(_sheets_append_history_async(uid, "user", text))
            loop.create_task(_sheets_append_history_async(uid, "assistant", deny))
            loop.create_task(_sheets_append_metric_async(uid, "deny", "policy"))
        except RuntimeError:
            pass
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ / —Ç—Ä–∏–∞–ª–∞ (–µ—Å–ª–∏ –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ)
    if (not is_whitelisted(uid)) and (not has_active_sub(u)):
        txt = "üí≥ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ ‚≠ê Creative, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:"
        await message.answer(txt, reply_markup=pay_kb())
        try:
            loop = asyncio.get_running_loop()
            loop.create_task(_sheets_append_history_async(uid, "user", text))
            loop.create_task(_sheets_append_history_async(uid, "assistant", txt))
            loop.create_task(_sheets_append_metric_async(uid, "paywall", "shown"))
        except RuntimeError:
            pass
        return

    # –°–æ—Ö—Ä–∞–Ω–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ Users-—Ä–µ–µ—Å—Ç—Ä (username/–∏–º—è)
    try:
        loop = asyncio.get_running_loop()
        loop.create_task(_sheets_update_user_row_async(
            uid,
            (message.from_user.username or ""),
            (message.from_user.first_name or ""),
            (message.from_user.last_name or ""),
            u.get("lang", "ru"),
            u.get("plan", "trial"),
            u.get("paid_until"),
        ))
        loop.create_task(_sheets_append_history_async(uid, "user", text))
        loop.create_task(_sheets_append_metric_async(uid, "msg", value=str(len(text)), notes="user_len"))
    except RuntimeError:
        pass

    # === –û–ß–ï–†–ï–î–¨: —Å—Ç–∞–≤–∏–º –∑–∞–¥–∞—á—É –∏ –æ—Ç–≤–µ—á–∞–µ–º —Å—Ç–∞—Ç—É—Å–æ–º
    topic_hint = TOPICS.get(u.get("topic"), {}).get("hint")
    use_live = (FORCE_LIVE or is_time_sensitive(text))

    task = SavolTask({
        "chat_id": message.chat.id,
        "uid": uid,
        "text": text,
        "lang": u.get("lang","ru"),
        "topic_hint": topic_hint,
        "use_live": use_live,
    })
    SAVOL_QUEUE.put_nowait(task)

    pos = SAVOL_QUEUE.qsize()
    if pos >= QUEUE_NOTICE_THRESHOLD:
        eta = _eta_seconds(pos)
        if u.get("lang","ru") == "uz":
            ack = f"‚è≥ So‚Äòrov navbatga qo‚Äòyildi (‚Ññ{pos}). Taxminiy kutish ~ {eta} soniya. Javob shu yerga keladi."
        else:
            ack = f"‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å (‚Ññ{pos}). –û–∂–∏–¥–∞–Ω–∏–µ ~ {eta} —Å–µ–∫. –û—Ç–≤–µ—Ç –ø—Ä–∏–¥—ë—Ç —Å—é–¥–∞."
    else:
        if u.get("lang","ru") == "uz":
            ack = "üîé Qabul qildim! Fikr yuritayapman ‚Äî javob tez orada keladi."
        else:
            ack = "üîé –ü—Ä–∏–Ω—è–ª! –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º ‚Äî –ø—Ä–∏—à–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —á—É—Ç—å –ø–æ–∑–∂–µ."

    await message.answer(ack)

    append_history(uid, "assistant", ack)
    try:
        loop = asyncio.get_running_loop()
        loop.create_task(_sheets_append_history_async(uid, "assistant", ack))
    except RuntimeError:
        pass

    return

# ================== Lifespan (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è/–∑–∞–∫—Ä—ã—Ç–∏–µ) =================
@asynccontextmanager
async def lifespan(app: FastAPI):
    load_users()
    load_history()
    _init_sheets()

    HTTP2_ENABLED = os.getenv("HTTP2_ENABLED", "0") == "1"
    try:
        import h2  # noqa: F401
        _h2_ok = True
    except Exception:
        _h2_ok = False
    use_http2 = HTTP2_ENABLED and _h2_ok

    global client_openai, client_http
    client_openai = httpx.AsyncClient(base_url=OPENAI_API_BASE, timeout=HTTPX_TIMEOUT, http2=use_http2)
    client_http = httpx.AsyncClient(timeout=HTTPX_TIMEOUT, http2=use_http2)

    # –í–µ–±—Ö—É–∫ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
    if TELEGRAM_TOKEN and WEBHOOK_URL and client_http:
        try:
            resp = await client_http.post(
                f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook",
                json={
                    "url": WEBHOOK_URL,
                    "secret_token": WEBHOOK_SECRET,
                    "drop_pending_updates": True,
                    "max_connections": 80,
                    "allowed_updates": ["message", "callback_query"],
                },
            )
            logging.info("setWebhook: %s %s", resp.status_code, resp.text)
        except Exception:
            logging.exception("Failed to set webhook")

    # === –û–ß–ï–†–ï–î–¨: —Å—Ç–∞—Ä—Ç –≤–æ—Ä–∫–µ—Ä–æ–≤ ===
    worker_tasks = []
    try:
        for i in range(WORKER_CONCURRENCY):
            worker_tasks.append(asyncio.create_task(_queue_worker(f"w{i+1}")))
        logging.info("Queue workers started: %s", WORKER_CONCURRENCY)
    except Exception:
        logging.exception("Failed to start workers")

    try:
        yield
    finally:
        try:
            for t in worker_tasks:
                t.cancel()
            await asyncio.gather(*worker_tasks, return_exceptions=True)
        except Exception:
            pass
        try:
            if client_openai:
                await client_openai.aclose()
        except Exception:
            pass
        try:
            if client_http:
                await client_http.aclose()
        except Exception:
            pass

app = FastAPI(lifespan=lifespan)

# ================== WEBHOOK =================
@app.post("/webhook")
async def telegram_webhook(request: Request):
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        return {"ok": False, "error": "bad secret"}
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}

@app.get("/health")
async def health():
    return {"status": "ok"}
