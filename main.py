import os
import re
import json
import time
import logging
import asyncio
from datetime import datetime, timedelta
from pathlib import Path
from collections import Counter
from contextlib import asynccontextmanager

import httpx
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, Update, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

# ---- Google Sheets
import gspread
from google.oauth2.service_account import Credentials

# ================== LOGS ==================
logging.basicConfig(level=logging.INFO)

# ================== ENV ===================
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # https://<app>.onrender.com/webhook
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "savol_secret")

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_API_BASE = os.getenv("OPENAI_API_BASE", "https://api.openai.com/v1")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")

# Live-–ø–æ–∏—Å–∫ (—á–µ—Ä–µ–∑ Tavily)
TAVILY_API_KEY = os.getenv("TAVILY_API_KEY")

# –ê–¥–º–∏–Ω
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # str

# –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã
USERS_DB_PATH = os.getenv("USERS_DB_PATH", "users_limits.json")
ANALYTICS_DB_PATH = os.getenv("ANALYTICS_DB_PATH", "analytics_events.jsonl")
HISTORY_DB_PATH = os.getenv("HISTORY_DB_PATH", "chat_history.json")

# --- Google Sheets ENV ---
GOOGLE_CREDENTIALS = os.getenv("GOOGLE_CREDENTIALS")  # JSON –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π (–∏–ª–∏ base64)
SHEETS_SPREADSHEET_ID = os.getenv("SHEETS_SPREADSHEET_ID")

# --- HTTPX clients & timeouts (reuse) ---
HTTPX_TIMEOUT = httpx.Timeout(connect=5.0, read=15.0, write=15.0, pool=15.0)
client_openai: httpx.AsyncClient | None = None
client_http: httpx.AsyncClient | None = None

# –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ (VIP) ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤
WL_RAW = os.getenv("WHITELIST_USERS", "557891018,1942344627")
try:
    WHITELIST_USERS = {int(x) for x in WL_RAW.split(",") if x.strip().isdigit()}
except Exception:
    WHITELIST_USERS = set()

def is_whitelisted(uid: int) -> bool:
    return uid in WHITELIST_USERS

# ================== TG/APP =================
bot = Bot(token=TELEGRAM_TOKEN) if TELEGRAM_TOKEN else None
dp = Dispatcher()

# ================== USERS (–ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ) =================
USERS: dict[int, dict] = {}

def _serialize_user(u: dict) -> dict:
    return {
        "free_used": int(u.get("free_used", 0)),
        "plan": u.get("plan", "free"),
        "paid_until": u["paid_until"].isoformat() if u.get("paid_until") else None,
        "lang": u.get("lang", "ru"),
        "topic": u.get("topic"),
        "live": bool(u.get("live", False)),  # —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    }

def save_users():
    try:
        path = Path(USERS_DB_PATH); path.parent.mkdir(parents=True, exist_ok=True)
        with path.open("w", encoding="utf-8") as f:
            json.dump({str(k): _serialize_user(v) for k, v in USERS.items()}, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.warning("save_users failed: %s", e)

def load_users():
    global USERS
    p = Path(USERS_DB_PATH)
    if not p.exists():
        USERS = {}; return
    try:
        data = json.loads(p.read_text("utf-8"))
        USERS = {}
        for k, v in data.items():
            pu = v.get("paid_until")
            try:
                paid_until = datetime.fromisoformat(pu) if pu else None
            except Exception:
                paid_until = None
            USERS[int(k)] = {
                "free_used": int(v.get("free_used", 0)),
                "plan": v.get("plan", "free"),
                "paid_until": paid_until,
                "lang": v.get("lang", "ru"),
                "topic": v.get("topic"),
                "live": bool(v.get("live", False)),
            }
    except Exception:
        logging.exception("load_users failed")
        USERS = {}

# ====== –¢–ê–†–ò–§–´ ======
# –û—Å—Ç–∞–≤–∏–ª–∏ –æ–¥–∏–Ω —Ç–∞—Ä–∏—Ñ ‚Äî Creative (10$).
FREE_LIMIT = 5
TARIFFS = {
    "creative": {"title": "Creative", "price_usd": 10,
                 "desc": ["GPT-–ø–æ–º–æ—â–Ω–∏–∫ –≤ Telegram", "–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏ –±–∞–∑–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "–ë–µ–∑ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π*"],
                 "active": True, "duration_days": 30},
}
DEFAULT_PLAN = "creative"

def has_active_sub(u: dict) -> bool:
    return u["plan"] in ("creative",) and u.get("paid_until") and u["paid_until"] > datetime.utcnow()

def get_user(tg_id: int):
    is_new = tg_id not in USERS
    if is_new:
        USERS[tg_id] = {"free_used": 0, "plan": "free", "paid_until": None, "lang": "ru", "topic": None, "live": False}
        save_users()
        try:
            loop = asyncio.get_running_loop()
            loop.create_task(_metrics_users_count_async())
        except RuntimeError:
            pass
    return USERS[tg_id]

def pay_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å ¬´Creative¬ª", callback_data="subscribe_creative")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –¢–∞—Ä–∏—Ñ", callback_data="show_tariffs")]
    ])

# ================== –ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê =================
HISTORY: dict[int, list[dict]] = {}

def _hist_path() -> Path:
    p = Path(HISTORY_DB_PATH); p.parent.mkdir(parents=True, exist_ok=True); return p

def load_history():
    global HISTORY
    p = _hist_path()
    if p.exists():
        try:
            HISTORY = {int(k): v for k, v in json.loads(p.read_text("utf-8")).items()}
        except Exception:
            logging.exception("load_history failed"); HISTORY = {}
    else:
        HISTORY = {}

def save_history():
    try:
        _hist_path().write_text(json.dumps({str(k): v for k, v in HISTORY.items()}, ensure_ascii=False, indent=2), "utf-8")
    except Exception:
        logging.exception("save_history failed")

def reset_history(user_id: int):
    HISTORY.pop(user_id, None); save_history()

def append_history(user_id: int, role: str, content: str):
    lst = HISTORY.setdefault(user_id, [])
    lst.append({"role": role, "content": content, "ts": datetime.utcnow().isoformat()})
    if len(lst) > 20:
        del lst[: len(lst) - 20]
    save_history()
    # –ó–∞–ø–∏—Å—å –≤ Sheets ‚Üí –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ
    try:
        loop = asyncio.get_running_loop()
        loop.create_task(_sheets_append_history_async(user_id, role, content))
    except RuntimeError:
        pass

def get_recent_history(user_id: int, max_chars: int = 6000) -> list[dict]:
    total = 0; picked = []
    for item in reversed(HISTORY.get(user_id, [])):
        c = item.get("content") or ""
        total += len(c)
        if total > max_chars:
            break
        picked.append({"role": item["role"], "content": c})
    return list(reversed(picked))

def build_messages(user_id: int, system: str, user_text: str) -> list[dict]:
    msgs = [{"role": "system", "content": system}]
    msgs.extend(get_recent_history(user_id))
    msgs.append({"role": "user", "content": user_text})
    return msgs

# ================== –Ø–ó–´–ö / –ú–û–î–ï–†–ê–¶–ò–Ø =================
def is_uzbek(text: str) -> bool:
    t = (text or "").lower()
    return bool(re.search(r"[“ì“õ“≥—û]", t) or re.search(r"\b(ha|yo[‚Äô']q|iltimos|rahmat|salom)\b", t))

ILLEGAL_PATTERNS = [
    r"\b(–≤–∑–ª–æ–º|—Ö–∞–∫|–∫–µ–π–ª–æ–≥–≥–µ—Ä|—Ñ–∏—à–∏–Ω–≥|–±–æ—Ç–Ω–µ—Ç|–¥–¥–æ—Å|ddos)\b",
    r"\b(–∫–∞–∫\s+–ø–æ–ª—É—á–∏—Ç—å\s+–¥–æ—Å—Ç—É–ø|–æ–±–æ–π—Ç–∏|–≤–∑—è—Ç—å\s+–ø–∞—Ä–æ–ª—å)\b.*\b(–∞–∫–∫–∞—É–Ω—Ç|—Ç–µ–ª–µ–≥—Ä–∞–º|–∏–Ω—Å—Ç–∞–≥—Ä–∞–º|–±–∞–Ω–∫|–ø–æ—á—Ç)\b",
    r"\b(–ø–æ–¥–¥–µ–ª(–∞—Ç—å|–∫–∞)|—Ñ–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä|–ª–∏–ø–æ–≤(—ã–π|—ã–µ))\b.*\b(–ø–∞—Å–ø–æ—Ä—Ç|—Å–ø—Ä–∞–≤–∫|–¥–∏–ø–ª–æ–º|–¥–æ–≥–æ–≤–æ—Ä|–ø–µ—á–∞—Ç—å|—à—Ç–∞–º–ø)\b",
    r"\b(–Ω–∞—Ä–∫–æ—Ç–∏–∫|–∞–º—Ñ–µ—Ç–∞–º–∏–Ω|–º–∞—Ä–∏—Ö—É–∞–Ω|–∫–∞–Ω–Ω–∞–±–∏—Å|–æ–ø–∏—É–º|—Å–ø–∞–π—Å)\b.*\b(–∫—É–ø–∏—Ç—å|–≤—ã—Ä–∞—Å—Ç–∏—Ç—å|—Å–¥–µ–ª–∞—Ç—å)\b",
    r"\b(–æ—Ä—É–∂–∏–µ|–ø–∏—Å—Ç–æ–ª–µ—Ç|–∞–≤—Ç–æ–º–∞—Ç|–≤–∑—Ä—ã–≤—á–∞—Ç–∫|–±–æ–º–±—É|—Ç—Ä–æ—Ç–∏–ª)\b.*\b(—Å–¥–µ–ª–∞—Ç—å|–∫—É–ø–∏—Ç—å|–¥–æ—Å—Ç–∞—Ç—å)\b",
    r"\b(–≤–∑—è—Ç–∫|–æ—Ç–∫–∞—Ç|–æ–±–Ω–∞–ª–∏—á|–æ–±–Ω–∞–ª|—É—Ö–æ–¥\s+–æ—Ç\s+–Ω–∞–ª–æ–≥–æ–≤|—Å–µ—Ä–∞—è\s+–∑–∞—Ä–ø–ª–∞—Ç–∞)\b",
    r"\b(–ø—Ä–æ–±–∏—Ç—å\s+–ø–æ\s+–±–∞–∑–µ|—Å–ª–∏—Ç—å\s+–±–∞–∑—É|–±–∞–∑—É\s+–∫–ª–∏–µ–Ω—Ç–æ–≤|–Ω–∞–π—Ç–∏\s+–ø–æ\s+–ø–∞—Å–ø–æ—Ä—Ç)\b",
    r"\b(–æ—Ç—Ä–∞–≤–∏—Ç—å|–≤–∑–æ—Ä–≤–∞—Ç—å|—É–±–∏—Ç—å|–Ω–∞–Ω–µ—Å—Ç–∏\s+–≤—Ä–µ–¥)\b",
    r"\b(soxta|qalbakilashtir|soxtalashtir)\b.*\b(diplom|pasport|spravka|shartnoma)\b",
    r"\b(soliqdan\s+qochish|pora|otkat)\b",
    r"\b(hack|xak|parolni\s+olish|akkauntga\s+k(i|e)rish)\b",
]
DENY_TEXT_RU = "‚õî –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω. –Ø –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–º–∫–∞—Ö –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –†–£–∑."
DENY_TEXT_UZ = "‚õî So‚Äòrov rad etildi. Men faqat O‚Äòzbekiston qonunchiligi doirasida javob beraman."

# ================== –ê–ù–¢–ò–°–°–´–õ–ö–ò =================
LINK_PAT = re.compile(r"https?://\S+")
MD_LINK_PAT = re.compile(r"\[([^\]]+)\]\((https?://[^\s)]+)\)")
SOURCES_BLOCK_PAT = re.compile(r"(?is)\n+–∏—Å—Ç–æ—á–Ω–∏–∫–∏:\s*.*$")

def strip_links(text: str) -> str:
    if not text:
        return text
    text = MD_LINK_PAT.sub(r"\1", text)
    text = LINK_PAT.sub("", text)
    text = SOURCES_BLOCK_PAT.sub("", text)
    text = re.sub(r"[ \t]+", " ", text)
    text = re.sub(r"\n{3,}", "\n\n", text).strip()
    return text

# ================== –¢–ï–ö–°–¢–´ –ü–û –Ø–ó–´–ö–£ =================
def t(lang: str, key: str) -> str:
    ru = {
        "welcome": ("üëã –ü—Ä–∏–≤–µ—Ç! –Ø SavolBot –æ—Ç TripleA.\n\n"
                    "–ú—ã –¥–µ–ª–∞–µ–º –∞–≤—Ç–æ–æ–±–∑–≤–æ–Ω—ã, —á–∞—Ç-–±–æ—Ç—ã –∏ GPT –ø—Ä—è–º–æ –≤ Telegram.\n"
                    "–ù–∞—à–∞ —Ñ–∏—à–∫–∞: –ø–æ—á—Ç–∏ –∫–∞–∫ ChatGPT –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º, –Ω–æ –≤ 2 —Ä–∞–∑–∞ –¥–µ—à–µ–≤–ª–µ –∏ –ø—Ä—è–º–æ –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ.\n\n"
                    f"–ü–µ—Ä–≤—ã–µ {FREE_LIMIT} –æ—Ç–≤–µ—Ç–æ–≤ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –î–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫/–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Ñ–æ—Ä–º–∏—Ç–µ —Ç–∞—Ä–∏—Ñ ¬´Creative¬ª.\n"
                    "–ö–æ–º–∞–Ω–¥—ã: /topics /tariffs /help"),
        "help": ("‚ÑπÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å (RU/UZ). –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –ø–æ–¥–∫–ª—é—á—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–∏—Å–∫. "
                 f"–ü–µ—Ä–≤—ã–µ {FREE_LIMIT} –æ—Ç–≤–µ—Ç–æ–≤ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ; –¥–∞–ª—å—à–µ /tariffs."),
        "thinking": "ü§î –î—É–º–∞—é‚Ä¶ —Å–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é‚Ä¶",
        "ready": "‚úÖ –ì–æ—Ç–æ–≤–æ. –û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç‚Ä¶",
        "paywall": "üí≥ –î–æ—Å—Ç—É–ø –∫ –æ—Ç–≤–µ—Ç–∞–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:",
        "plan_title": "–í–∞—à –ø–ª–∞–Ω",
        "choose_topic": "üóÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
        "tariff_title": "‚≠ê Creative (–¥–æ—Å—Ç—É–ø–µ–Ω)\n–¶–µ–Ω–∞: 10 $/–º–µ—Å\n‚Ä¢ GPT –≤ Telegram\n‚Ä¢ –ö–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –±–∞–∑–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤*",
        "thanks_paid": "–°–ø–∞—Å–∏–±–æ! –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –æ–ø–ª–∞—Ç—É –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É.",
        "sub_activated_user": "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ ¬´Creative¬ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!",
        "admin_only": "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        "context_cleared": "üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É.",
    }
    uz = {
        "welcome": ("üëã Assalomu alaykum! Men SavolBot, TripleA jamoasidan.\n\n"
                    "Biz autoqo‚Äòng‚Äòiroqlar, chat-botlar va GPT‚Äôni to‚Äòg‚Äòridan-to‚Äòg‚Äòri Telegram‚Äôda taqdim etamiz.\n"
                    "Afzallik: ChatGPT‚Äôga deyarli teng imkoniyatlar, lekin 2 baravar arzon va o‚Äòsha messenjerda.\n\n"
                    f"Dastlabki {FREE_LIMIT} javob ‚Äî bepul. Cheksiz va rasm/hujjat yaratish uchun ¬´Creative¬ª tarifini tanlang.\n"
                    "Buyruqlar: /topics /tariffs /help"),
        "help": (f"‚ÑπÔ∏è Savolingizni yozing (RU/UZ). Kerak bo‚Äòlsa, internet-qidiruvni qo‚Äòllayman. "
                 f"Dastlabki {FREE_LIMIT} javob ‚Äî bepul; keyin /tariffs."),
        "thinking": "ü§î O‚Äòylayapman‚Ä¶ ma‚Äôlumot to‚Äòplayapman‚Ä¶",
        "ready": "‚úÖ Tayyor. Javobni yuborayapman‚Ä¶",
        "paywall": "üí≥ Javoblar cheklangan. Obuna rasmiylashtiring:",
        "plan_title": "Sizning rejangiz",
        "choose_topic": "üóÇ Mavzuni tanlang:",
        "tariff_title": "‚≠ê Creative (faol)\nNarx: oyiga 10 $\n‚Ä¢ Telegram‚Äôda GPT\n‚Ä¢ Rasmlar va oddiy hujjatlar\n‚Ä¢ Cheksiz xabarlar*",
        "thanks_paid": "Rahmat! To‚Äòlovni tekshiramiz va obunani faollashtiramiz.",
        "sub_activated_user": "‚úÖ ¬´Creative¬ª obunasi faollashtirildi. Omad!",
        "admin_only": "Bu buyruq faqat administrator uchun.",
        "context_cleared": "üßπ Kontekst tozalandi. Yangi mavzuni boshlaymiz.",
    }
    return (uz if lang == "uz" else ru)[key]

# ================== SHEETS =================
_sheets_client: gspread.Client | None = None
LAST_SHEETS_ERROR: str | None = None

def _ts() -> str:
    return datetime.utcnow().isoformat()

def _open_spreadsheet():
    if not _sheets_client:
        return None
    try:
        return _sheets_client.open_by_key(SHEETS_SPREADSHEET_ID)
    except Exception:
        logging.exception("open_by_key failed")
        return None

def _users_ws():
    sh = _open_spreadsheet()
    if not sh:
        return None
    try:
        return sh.worksheet("Users")
    except gspread.WorksheetNotFound:
        try:
            ws = sh.add_worksheet(title="Users", rows=100000, cols=8)
            ws.append_row(["ts","user_id","username","first_name","last_name","lang","plan","free_used"], value_input_option="RAW")
            return ws
        except Exception:
            logging.exception("Create Users ws failed")
            return None
    except Exception:
        logging.exception("_users_ws failed")
        return None

def _history_ws():
    sh = _open_spreadsheet()
    if not sh:
        return None
    try:
        return sh.worksheet("History")
    except gspread.WorksheetNotFound:
        try:
            ws = sh.add_worksheet(title="History", rows=500000, cols=4)
            ws.append_row(["ts", "user_id", "role", "content"], value_input_option="RAW")
            return ws
        except Exception:
            logging.exception("Create History ws failed")
            return None
    except Exception:
        logging.exception("_history_ws failed")
        return None

def _metrics_ws():
    sh = _open_spreadsheet()
    if not sh:
        return None
    try:
        return sh.worksheet("Metrics")
    except gspread.WorksheetNotFound:
        try:
            ws = sh.add_worksheet(title="Metrics", rows=10000, cols=3)
            ws.append_row(["ts", "total_users", "active_subs"], value_input_option="RAW")
            return ws
        except Exception:
            logging.exception("Create Metrics ws failed")
            return None
    except Exception:
        logging.exception("_metrics_ws failed")
        return None

def _init_sheets():
    """
    –ñ—ë—Å—Ç–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets:
    - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ raw JSON –∏ base64
    - –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è private_key —Å \\n -> \n
    - –¥–æ–±–∞–≤–ª–µ–Ω Drive-scope
    - —Å–æ–∑–¥–∞—ë–º –ª–∏—Å—Ç—ã –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
    """
    global _sheets_client, LAST_SHEETS_ERROR

    if not (GOOGLE_CREDENTIALS and SHEETS_SPREADSHEET_ID):
        LAST_SHEETS_ERROR = "Sheets env not set: GOOGLE_CREDENTIALS / SHEETS_SPREADSHEET_ID"
        logging.error(LAST_SHEETS_ERROR)
        return

    try:
        raw = GOOGLE_CREDENTIALS.strip()
        try:
            import base64
            creds_text = base64.b64decode(raw).decode("utf-8") if not raw.lstrip().startswith("{") else raw
        except Exception:
            creds_text = raw

        creds_info = json.loads(creds_text)

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º private_key (–µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª —Å –ª–∏—Ç–µ—Ä–∞–ª—å–Ω—ã–º–∏ \n)
        if isinstance(creds_info, dict) and creds_info.get("private_key"):
            pk = creds_info["private_key"]
            if "BEGIN PRIVATE KEY" in pk and "\\n" in pk:
                creds_info["private_key"] = pk.replace("\\n", "\n")

        # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        for field in ("client_email", "private_key"):
            if not creds_info.get(field):
                raise ValueError(f"GOOGLE_CREDENTIALS is missing '{field}'")

        scopes = [
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive",
        ]
        creds = Credentials.from_service_account_info(creds_info, scopes=scopes)
        _sheets_client = gspread.authorize(creds)

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ª–∏—Å—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        _ = _users_ws()
        _ = _history_ws()
        _ = _metrics_ws()

        LAST_SHEETS_ERROR = None
        logging.info("Sheets OK: spreadsheet=%s", SHEETS_SPREADSHEET_ID)

    except Exception as e:
        LAST_SHEETS_ERROR = f"{type(e).__name__}: {e}"
        logging.exception("Sheets init failed")
        _sheets_client = None

async def _sheets_append_history_async(user_id: int, role: str, content: str):
    """–ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –∑–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—Å—Ç History."""
    try:
        def _do():
            ws = _history_ws()
            if not ws:
                return
            ws.append_row([datetime.utcnow().isoformat(), str(user_id), role, content], value_input_option="RAW")
        await asyncio.to_thread(_do)
    except Exception:
        logging.exception("append_history: sheets write failed")

async def _sheets_upsert_user_async(m: Message, plan: str):
    """–ü–µ—Ä–≤–∏—á–Ω–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏—Å—Ç Users (–∏–ª–∏ –¥—É–±–ª—å-—Å—Ç—Ä–æ–∫–∞, —ç—Ç–æ –æ–∫)."""
    try:
        def _do():
            ws = _users_ws()
            if not ws:
                return
            from_user = m.from_user
            ws.append_row([
                datetime.utcnow().isoformat(),
                str(from_user.id),
                (from_user.username or "")[:64],
                (from_user.first_name or "")[:64],
                (from_user.last_name or "")[:64],
                "uz" if is_uzbek(m.text or "") else "ru",
                plan,
                str(get_user(from_user.id).get("free_used", 0)),
            ], value_input_option="RAW")
        await asyncio.to_thread(_do)
    except Exception:
        logging.exception("upsert_user: sheets write failed")

async def _metrics_users_count_async():
    """–ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –∑–∞–ø–∏—Å—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –ª–∏—Å—Ç Metrics."""
    try:
        def _do():
            ws = _metrics_ws()
            if not ws:
                return
            total_users = len(USERS)
            active_subs = sum(1 for u in USERS.values() if has_active_sub(u))
            ws.append_row([datetime.utcnow().isoformat(), total_users, active_subs], value_input_option="RAW")
        await asyncio.to_thread(_do)
    except Exception:
        logging.exception("metrics users count failed")

# ================== –ê–ù–ê–õ–ò–¢–ò–ö–ê (file + Sheets) =================
def _log_to_file(row: dict):
    try:
        p = Path(ANALYTICS_DB_PATH); p.parent.mkdir(parents=True, exist_ok=True)
        with p.open("a", encoding="utf-8") as f:
            f.write(json.dumps(row, ensure_ascii=False) + "\n")
    except Exception as e:
        logging.warning("log_event file failed: %s", e)

def log_event(user_id: int, name: str, **payload):
    row = {"ts": _ts(), "user_id": user_id, "event": name, **payload}
    _log_to_file(row)
    # –í –æ—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –ª–∏—Å—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ (–æ—Å—Ç–∞–≤–∏–ª —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª)

def format_stats(days: int | None = 7):
    p = Path(ANALYTICS_DB_PATH)
    if not p.exists():
        return "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π."
    cutoff = datetime.utcnow() - timedelta(days=days) if days else None
    evs = []
    for line in p.read_text("utf-8").splitlines():
        try:
            e = json.loads(line)
            if cutoff:
                try:
                    ts = datetime.fromisoformat((e.get("ts", "") or "").split("+")[0])
                    if ts < cutoff:
                        continue
                except Exception:
                    pass
            evs.append(e)
        except Exception:
            continue
    total = len(evs)
    users = len({e.get("user_id") for e in evs if "user_id" in e})
    qs = [e for e in evs if e.get("event") == "question"]
    topics = Counter((e.get("topic") or "‚Äî") for e in qs)
    grants = sum(1 for e in evs if e.get("event") == "subscription_granted")
    paid_clicks = sum(1 for e in evs if e.get("event") == "paid_done_click")
    active_now = sum(1 for u in USERS.values() if has_active_sub(u))
    lines = [
        f"üìä –ó–∞ {days} –¥–Ω.",
        f"‚Ä¢ –°–æ–±—ã—Ç–∏–π: {total} | –£–Ω–∏–∫. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}",
        f"‚Ä¢ –í–æ–ø—Ä–æ—Å–æ–≤: {len(qs)}",
        f"‚Ä¢ –¢–æ–ø —Ç–µ–º: " + (", ".join(f"{k}:{v}" for k, v in topics.most_common(6)) if topics else "‚Äî"),
        f"‚Ä¢ ¬´–û–ø–ª–∞—Ç–∏–ª¬ª: {paid_clicks} | –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {grants}",
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–π—á–∞—Å: {active_now}",
    ]
    return "\n".join(lines)

# ================== –ò–ò =================
BASE_SYSTEM_PROMPT = (
    "–¢—ã ‚Äî SavolBot, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫: –∫—Ä–∞—Ç–∫–æ –∏ —è—Å–Ω–æ "
    "(–æ–±—ã—á–Ω–æ –¥–æ 6‚Äì8 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π), –±–µ–∑ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç–∞, —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ —Å–ø–∏—Å–∫–∞–º–∏, –∫–æ–≥–¥–∞ —É–º–µ—Å—Ç–Ω–æ. "
    "–ú–æ–∂–Ω–æ –ª—ë–≥–∫–∏–π —é–º–æ—Ä, –Ω–æ –ø–æ —Ç–µ–º–µ. –°–æ–±–ª—é–¥–∞–π –∑–∞–∫–æ–Ω—ã –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞. –ù–µ –¥–∞–≤–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π. "
    "–ü–æ –º–µ–¥–∏—Ü–∏–Ω–µ ‚Äî —Ç–æ–ª—å–∫–æ –æ–±—â–∞—è —Å–ø—Ä–∞–≤–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É. –Ø–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞ = —è–∑—ã–∫ –≤–æ–ø—Ä–æ—Å–∞ (RU/UZ). "
    "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—Å—Ç–∞–≤–ª—è–π —Å—Å—ã–ª–∫–∏ –∏ URL. –ù–µ –≥–æ–≤–æ—Ä–∏ —Ñ—Ä–∞–∑—ã –≤—Ä–æ–¥–µ ¬´—è –Ω–µ –ø–æ–º–Ω—é/–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é –∏—Å—Ç–æ—Ä–∏—é¬ª. "
    "–ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–∞–ª–æ ‚Äî –≤–µ–∂–ª–∏–≤–æ –ø–æ–ø—Ä–æ—Å–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ –¥–µ—Ç–∞–ª–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π. "
    "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ–¥–∫—É –∏–∑ –ø–æ–∏—Å–∫–∞, –Ω–æ –æ—Ç–≤–µ—á–∞–π —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏."
)

def build_messages(user_id: int, system: str, user_text: str) -> list[dict]:
    msgs = [{"role": "system", "content": system}]
    msgs.extend(get_recent_history(user_id))
    msgs.append({"role": "user", "content": user_text})
    return msgs

async def ask_gpt(user_text: str, topic_hint: str | None, user_id: int) -> str:
    if not OPENAI_API_KEY:
        return f"–í—ã —Å–ø—Ä–æ—Å–∏–ª–∏: {user_text}"
    system = BASE_SYSTEM_PROMPT + (f" –£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–º—ã: {topic_hint}" if topic_hint else "")
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
    payload = {"model": OPENAI_MODEL, "temperature": 0.6, "messages": build_messages(user_id, system, user_text)}
    r = await client_openai.post("/chat/completions", headers=headers, json=payload)
    r.raise_for_status()
    raw = r.json()["choices"][0]["message"]["content"].strip()
    return strip_links(raw)

# ================== LIVE SEARCH =================
TIME_SENSITIVE_PATTERNS = [
    r"\b(—Å–µ–≥–æ–¥–Ω—è|—Å–µ–π—á–∞—Å|–Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç|–∞–∫—Ç—É–∞–ª—å–Ω|–≤ \d{4} –≥–æ–¥—É|–≤ 20\d{2})\b",
    r"\b(–∫—É—Ä—Å|–∑–∞—Ä–ø–ª–∞—Ç|–∏–Ω—Ñ–ª—è—Ü|—Å—Ç–∞–≤–∫|—Ü–µ–Ω–∞|–Ω–æ–≤–æ—Å—Ç|—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫|–ø—Ä–æ–≥–Ω–æ–∑)\b",
    r"\b(bugun|hozir|narx|kurs|yangilik)\b",
    r"\b(–∫—Ç–æ|–∫–∞–∫ –∑–æ–≤—É—Ç|–ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª|–¥–∏—Ä–µ–∫—Ç–æ—Ä|ceo|—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª)\b",
]
def is_time_sensitive(q: str) -> bool:
    return any(re.search(rx, q.lower()) for rx in TIME_SENSITIVE_PATTERNS)

CACHE_TTL_SECONDS = int(os.getenv("LIVE_CACHE_TTL", "86400"))
CACHE_MAX_ENTRIES = int(os.getenv("LIVE_CACHE_MAX", "500"))
LIVE_CACHE: dict[str, dict] = {}

def _norm_query(q: str) -> str:
    return re.sub(r"\s+", " ", q.strip().lower())

def cache_get(q: str):
    k = _norm_query(q); it = LIVE_CACHE.get(k)
    if not it:
        return None
    if time.time() - it["ts"] > CACHE_TTL_SECONDS:
        LIVE_CACHE.pop(k, None); return None
    return it["answer"]

def cache_set(q: str, a: str):
    if len(LIVE_CACHE) >= CACHE_MAX_ENTRIES:
        oldest = min(LIVE_CACHE, key=lambda x: LIVE_CACHE[x]["ts"])
        LIVE_CACHE.pop(oldest, None)
    LIVE_CACHE[_norm_query(q)] = {"ts": time.time(), "answer": a}

async def web_search_tavily(query: str, max_results: int = 3) -> dict | None:
    if not TAVILY_API_KEY:
        return None
    depth = "advanced" if is_time_sensitive(query) else "basic"
    payload = {"api_key": TAVILY_API_KEY, "query": query, "search_depth": depth, "max_results": max_results,
               "include_answer": True, "include_domains": []}
    r = await client_http.post("https://api.tavily.com/search", json=payload)
    r.raise_for_status()
    return r.json()

async def answer_with_live_search(user_text: str, topic_hint: str | None, user_id: int) -> str:
    c = cache_get(user_text)
    if c:
        return c
    data = await web_search_tavily(user_text)
    if not data:
        return await ask_gpt(user_text, topic_hint, user_id)
    snippets = []
    for it in (data.get("results") or [])[:3]:
        title = (it.get("title") or "")[:80]
        content = (it.get("content") or "")[:350]
        snippets.append(f"- {title}\n{content}")
    system = BASE_SYSTEM_PROMPT + " –û—Ç–≤–µ—á–∞–π, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–Ω–æ –±–µ–∑ —Å—Å—ã–ª–æ–∫). –ö—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É."
    if topic_hint:
        system += f" –£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–º—ã: {topic_hint}"
    user_aug = f"{user_text}\n\n–ò–°–¢–û–ß–ù–ò–ö–ò (—Å–≤–æ–¥–∫–∞ –±–µ–∑ URL):\n" + "\n\n".join(snippets)
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
    payload = {"model": OPENAI_MODEL, "temperature": 0.3, "messages": build_messages(user_id, system, user_aug)}
    r = await client_openai.post("/chat/completions", headers=headers, json=payload)
    r.raise_for_status()
    answer = r.json()["choices"][0]["message"]["content"].strip()
    final = strip_links(answer)
    cache_set(user_text, final)
    return final

# ================== –ö–û–ú–ê–ù–î–´ =================
TOPICS = {
    "daily":   {"title_ru": "–ë—ã—Ç", "title_uz": "Maishiy", "hint": "–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã, —á–µ–∫-–ª–∏—Å—Ç—ã –∏ —à–∞–≥–∏."},
    "finance": {"title_ru": "–§–∏–Ω–∞–Ω—Å—ã", "title_uz": "Moliya", "hint": "–û–±—ä—è—Å–Ω—è–π —Å —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏. –ë–µ–∑ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."},
    "gov":     {"title_ru": "–ì–æ—Å—É—Å–ª—É–≥–∏", "title_uz": "Davlat xizmatlari", "hint": "–û–ø–∏—à–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —à–∞–≥–∏ –ø–æ–¥–∞—á–∏."},
    "biz":     {"title_ru": "–ë–∏–∑–Ω–µ—Å", "title_uz": "Biznes", "hint": "–ö—Ä–∞—Ç–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏/–¥–æ–∫—É–º–µ–Ω—Ç–∞–º."},
    "edu":     {"title_ru": "–£—á—ë–±–∞", "title_uz": "Ta‚Äôlim", "hint": "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ/–æ–±—É—á–µ–Ω–∏–µ –∏ —à–∞–≥–∏."},
    "it":      {"title_ru": "IT", "title_uz": "IT", "hint": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ. –ù–µ —Å–æ–≤–µ—Ç—É–π –Ω–∏—á–µ–≥–æ –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–≥–æ."},
    "health":  {"title_ru": "–ó–¥–æ—Ä–æ–≤—å–µ (–æ–±—â.)", "title_uz": "Sog‚Äòliq (umumiy)", "hint": "–¢–æ–ª—å–∫–æ –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –°–æ–≤–µ—Ç—É–π –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É."},
}
def topic_kb(lang="ru", current=None):
    rows = []
    for key, tdef in TOPICS.items():
        label = tdef["title_uz"] if lang == "uz" else tdef["title_ru"]
        if current == key:
            label = f"‚úÖ {label}"
        rows.append([InlineKeyboardButton(text=label, callback_data=f"topic:{key}")])
    rows.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ó–∞–∫—Ä—ã—Ç—å / Yopish", callback_data="topic:close")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def tariffs_text(lang='ru'):
    return t(lang, "tariff_title")

@dp.message(Command("start"))
async def cmd_start(message: Message):
    u = get_user(message.from_user.id)
    u["lang"] = "uz" if is_uzbek(message.text or "") else "ru"; save_users()
    log_event(message.from_user.id, "start", lang=u["lang"])
    # –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–æ–≤–æ–º –ª–∏—Å—Ç–µ Users
    try:
        loop = asyncio.get_running_loop()
        loop.create_task(_sheets_upsert_user_async(message, u["plan"]))
    except RuntimeError:
        pass
    await message.answer(t(u["lang"], "welcome"))

@dp.message(Command("help"))
async def cmd_help(message: Message):
    lang = "uz" if is_uzbek(message.text or "") else "ru"
    log_event(message.from_user.id, "help")
    await message.answer(t(lang, "help"))

@dp.message(Command("about"))
async def cmd_about(message: Message):
    lang = "uz" if is_uzbek(message.text or "") else "ru"
    log_event(message.from_user.id, "about")
    await message.answer(t(lang, "welcome"))

@dp.message(Command("tariffs"))
async def cmd_tariffs(message: Message):
    lang = get_user(message.from_user.id).get("lang", "ru")
    log_event(message.from_user.id, "view_tariffs")
    await message.answer(tariffs_text(lang), reply_markup=pay_kb())

@dp.message(Command("myplan"))
async def cmd_myplan(message: Message):
    u = get_user(message.from_user.id)
    status = "–∞–∫—Ç–∏–≤–Ω–∞" if has_active_sub(u) else "–Ω–µ—Ç"
    until = u["paid_until"].isoformat() if u["paid_until"] else "‚Äî"
    topic = u.get("topic") or "‚Äî"
    is_wl = is_whitelisted(message.from_user.id)
    plan_label = "whitelist (–±–µ–∑–ª–∏–º–∏—Ç)" if is_wl else u["plan"]
    free_info = "–±–µ–∑–ª–∏–º–∏—Ç" if is_wl else f"{u['free_used']}/{FREE_LIMIT}"
    log_event(message.from_user.id, "myplan_open", whitelisted=is_wl)
    await message.answer(
        f"{t(u['lang'],'plan_title')}: {plan_label}\n"
        f"–ü–æ–¥–ø–∏—Å–∫–∞: {status} (–¥–æ {until})\n"
        f"–¢–µ–º–∞: {topic}\n"
        f"–ë–µ—Å–ø–ª–∞—Ç–Ω–æ: {free_info}"
    )

@dp.message(Command("topics"))
async def cmd_topics(message: Message):
    u = get_user(message.from_user.id); lang = u["lang"]
    log_event(message.from_user.id, "topics_open")
    await message.answer(t(lang, "choose_topic"), reply_markup=topic_kb(lang, current=u.get("topic")))

@dp.message(Command("stats"))
async def cmd_stats(message: Message):
    if ADMIN_CHAT_ID and str(message.from_user.id) != str(ADMIN_CHAT_ID):
        return await message.answer(t(get_user(message.from_user.id)["lang"], "admin_only"))
    parts = message.text.strip().split()
    days = int(parts[1]) if len(parts) > 1 and parts[1].isdigit() else 7
    await message.answer(format_stats(days))

@dp.message(Command("new"))
async def cmd_new(message: Message):
    reset_history(message.from_user.id)
    await message.answer(t(get_user(message.from_user.id)["lang"], "context_cleared"))

# -------- Sheets –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ----------
@dp.message(Command("gs_debug"))
async def cmd_gs_debug(message: Message):
    has_env = all([GOOGLE_CREDENTIALS, SHEETS_SPREADSHEET_ID])
    await message.answer(
        "ENV OK: {env}\nID: {sid}\nCred len: {cl}\nErr: {err}".format(
            env=has_env,
            sid=SHEETS_SPREADSHEET_ID or "‚Äî",
            cl=len(GOOGLE_CREDENTIALS or ""),
            err=LAST_SHEETS_ERROR or "‚Äî",
        )
    )

@dp.message(Command("gs_reinit"))
async def cmd_gs_reinit(message: Message):
    _init_sheets()
    await message.answer("Reinit ‚Üí " + ("‚úÖ OK" if _sheets_client else f"‚ùå Fail: {LAST_SHEETS_ERROR}"))

@dp.message(Command("gs_list"))
async def cmd_gs_list(message: Message):
    try:
        if not _sheets_client:
            return await message.answer("‚ùå Sheets client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. /gs_reinit")
        sh = _sheets_client.open_by_key(SHEETS_SPREADSHEET_ID)
        titles = [ws.title for ws in sh.worksheets()]
        await message.answer("–õ–∏—Å—Ç—ã:\n" + "\n".join("‚Ä¢ " + t for t in titles))
    except Exception as e:
        logging.exception("gs_list failed")
        await message.answer(f"‚ùå gs_list –æ—à–∏–±–∫–∞: {e}")

# ================== CALLBACKS =================
@dp.callback_query(F.data == "show_tariffs")
async def cb_show_tariffs(call: CallbackQuery):
    u = get_user(call.from_user.id)
    log_event(call.from_user.id, "view_tariffs_click")
    await call.message.edit_text(tariffs_text(u["lang"]), reply_markup=pay_kb())
    await call.answer()

@dp.callback_query(F.data == "subscribe_creative")
async def cb_subscribe_creative(call: CallbackQuery):
    log_event(call.from_user.id, "subscribe_creative_open")
    pay_link = "https://pay.example.com/savolbot/creative"  # TODO: –∑–∞–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ò–ü
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ (—è –æ–ø–ª–∞—Ç–∏–ª)", callback_data="paid_creative_done")]
    ])
    price = TARIFFS["creative"]["price_usd"]
    await call.message.answer(f"üí≥ ¬´Creative¬ª ‚Äî {price} $/–º–µ—Å.\n–û–ø–ª–∞—Ç–∞: {pay_link}", reply_markup=kb)
    await call.answer()

@dp.callback_query(F.data == "paid_creative_done")
async def cb_paid_done(call: CallbackQuery):
    log_event(call.from_user.id, "paid_done_click")
    if ADMIN_CHAT_ID and bot:
        try:
            await bot.send_message(
                int(ADMIN_CHAT_ID),
                f"üë§ @{call.from_user.username or call.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–∫—Ç–∏–≤–∞—Ü–∏—é ¬´Creative¬ª.\n"
                f"TG ID: {call.from_user.id}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /grant_creative {call.from_user.id}"
            )
        except Exception:
            logging.exception("Notify admin failed")
    await call.message.answer(t(get_user(call.from_user.id)["lang"], "thanks_paid"))
    await call.answer()

@dp.message(Command("grant_creative"))
async def cmd_grant_creative(message: Message):
    if str(message.from_user.id) != str(ADMIN_CHAT_ID):
        return await message.answer(t(get_user(message.from_user.id)["lang"], "admin_only"))
    parts = message.text.strip().split()
    if len(parts) != 2 or not parts[1].isdigit():
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant_creative <tg_id>")
    target_id = int(parts[1]); u = get_user(target_id)
    u["plan"] = "creative"
    u["paid_until"] = datetime.utcnow() + timedelta(days=TARIFFS["creative"]["duration_days"]); save_users()
    log_event(message.from_user.id, "subscription_granted", target=target_id, plan="creative", paid_until=u["paid_until"].isoformat())
    await message.answer(f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ¬´Creative¬ª –¥–ª—è {target_id} –¥–æ {u['paid_until'].isoformat()}")
    try:
        if bot:
            await bot.send_message(target_id, t(get_user(target_id)["lang"], "sub_activated_user"))
    except Exception:
        logging.warning("Notify user failed")

# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–û–ü–†–û–°–û–í =================
@dp.message(F.text)
async def handle_text(message: Message):
    text = (message.text or "").strip()
    uid = message.from_user.id
    u = get_user(uid)

    # —è–∑—ã–∫ –ø–æ –≤—Ö–æ–¥—è—â–µ–º—É
    if is_uzbek(text):
        u["lang"] = "uz"; save_users()
    else:
        u["lang"] = "ru"; save_users()

    # –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä ¬´–¥—É–º–∞—é/—Å–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é¬ª –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    thinking_msg = await message.answer(t(u["lang"], "thinking"))

    if any(re.search(rx, text.lower()) for rx in [
        r"\b(–ø–æ–º–Ω–∏(—à—å|—Ç–µ)|–≤—Å–ø–æ–º–Ω–∏(—à—å|—Ç–µ))\b",
        r"\b(—á—Ç–æ|–æ\s*—á—ë–º|–æ\s*—á–µ–º)\b.*\b(—Å–ø—Ä–∞—à–∏–≤–∞–ª|–≥–æ–≤–æ—Ä–∏–ª–∏|–æ–±—Å—É–∂–¥–∞–ª–∏)\b",
        r"\b(–≤—á–µ—Ä–∞|—Å–µ–≥–æ–¥–Ω—è)\b.*\b(–¥–∏–∞–ª–æ–≥|—Ä–∞–∑–≥–æ–≤–æ—Ä|—á–∞—Ç)\b",
    ]):
        # –ö–æ—Ä–æ—Ç–∫–æ–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑—é–º–µ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
        recap = "Ha, eslayman." if u["lang"] == "uz" else "–î–∞, –ø–æ–º–Ω—é."
        try:
            await thinking_msg.edit_text(t(u["lang"], "ready"))
        except Exception:
            pass
        await message.answer(recap)
        append_history(uid, "user", text)
        append_history(uid, "assistant", recap)
        return

    # –º–æ–¥–µ—Ä–∞—Ü–∏—è/–ø–µ–π–≤–æ–ª–ª
    if any(re.search(rx, text.lower()) for rx in ILLEGAL_PATTERNS):
        try:
            await thinking_msg.delete()
        except Exception:
            pass
        log_event(uid, "question_blocked", reason="policy")
        return await message.answer(DENY_TEXT_UZ if u["lang"] == "uz" else DENY_TEXT_RU)

    if (not is_whitelisted(uid)) and (not has_active_sub(u)) and u["free_used"] >= FREE_LIMIT:
        try:
            await thinking_msg.delete()
        except Exception:
            pass
        log_event(uid, "paywall_shown")
        return await message.answer(t(u["lang"], "paywall"), reply_markup=pay_kb())

    topic_hint = TOPICS.get(u.get("topic"), {}).get("hint")
    use_live = True  # –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º live-–ø–æ–∏—Å–∫

    try:
        # —Å–º–µ–Ω–∏–º ¬´–¥—É–º–∞—é‚Ä¶¬ª –Ω–∞ ¬´–≥–æ—Ç–æ–≤–æ‚Ä¶¬ª –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
        try:
            await thinking_msg.edit_text(t(u["lang"], "ready"))
        except Exception:
            pass

        reply = await (answer_with_live_search(text, topic_hint, uid) if use_live else ask_gpt(text, topic_hint, uid))
        await message.answer(reply)

        append_history(uid, "user", text)
        append_history(uid, "assistant", reply)

        log_event(uid, "question", topic=u.get("topic"), live=use_live, time_sensitive=is_time_sensitive(text),
                  whitelisted=is_whitelisted(uid))
    except Exception:
        logging.exception("OpenAI error")
        try:
            await thinking_msg.delete()
        except Exception:
            pass
        return await message.answer("–ò–∑–≤–∏–Ω–∏, —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    if (not is_whitelisted(uid)) and (not has_active_sub(u)):
        u["free_used"] += 1; save_users()

# ================== Lifespan =================
@asynccontextmanager
async def lifespan(app: FastAPI):
    load_users()
    load_history()
    _init_sheets()

    HTTP2_ENABLED = os.getenv("HTTP2_ENABLED", "0") == "1"
    try:
        import h2  # noqa: F401
        _h2_ok = True
    except Exception:
        _h2_ok = False
    use_http2 = HTTP2_ENABLED and _h2_ok

    global client_openai, client_http
    client_openai = httpx.AsyncClient(base_url=OPENAI_API_BASE, timeout=HTTPX_TIMEOUT, http2=use_http2)
    client_http = httpx.AsyncClient(timeout=HTTPX_TIMEOUT, http2=use_http2)

    # –°—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫
    if TELEGRAM_TOKEN and WEBHOOK_URL and client_http:
        try:
            resp = await client_http.post(
                f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook",
                json={
                    "url": WEBHOOK_URL,
                    "secret_token": WEBHOOK_SECRET,
                    "drop_pending_updates": True,
                    "max_connections": 80,
                    "allowed_updates": ["message", "callback_query"],
                },
            )
            logging.info("setWebhook: %s %s", resp.status_code, resp.text)
        except Exception:
            logging.exception("Failed to set webhook")

    try:
        yield
    finally:
        try:
            if client_openai:
                await client_openai.aclose()
        except Exception:
            pass
        try:
            if client_http:
                await client_http.aclose()
        except Exception:
            pass

app = FastAPI(lifespan=lifespan)

# ================== WEBHOOK =================
@app.post("/webhook")
async def telegram_webhook(request: Request):
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        return {"ok": False, "error": "bad secret"}
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}

@app.get("/health")
async def health():
    return {"status": "ok"}
