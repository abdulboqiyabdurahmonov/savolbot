import os
import logging
import httpx
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, Update

logging.basicConfig(level=logging.INFO)

# === ENV ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # e.g. https://savolbot.onrender.com/webhook
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "savol_secret")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_API_BASE = os.getenv("OPENAI_API_BASE", "https://api.openai.com/v1")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")  # –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –≤ Env

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–±–µ–∑ –ø–∞–Ω–∏–∫–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥)
if not TELEGRAM_TOKEN:
    logging.warning("TELEGRAM_TOKEN is not set")
if not WEBHOOK_URL:
    logging.warning("WEBHOOK_URL is not set")
if not OPENAI_API_KEY:
    logging.warning("OPENAI_API_KEY is not set (–±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å —ç—Ö–æ-—Ç–µ–∫—Å—Ç–æ–º)")

# === APP/AIROGRAM ===
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
app = FastAPI()

# –ö–æ—Ä–æ—Ç–∫–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–µ, –ø–æ–Ω—è—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
SYSTEM_PROMPT = (
    "–¢—ã ‚Äî SavolBot, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É –∏ –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º. "
    "–ò–∑–±–µ–≥–∞–π –æ–ø–∞—Å–Ω—ã—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–π –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. "
    "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º ‚Äî –æ—Ç–≤–µ—á–∞–π –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º; –µ—Å–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º ‚Äî –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
)

async def ask_gpt(user_text: str) -> str:
    """–ó–∞–ø—Ä–æ—Å –∫ OpenAI Chat Completions —á–µ—Ä–µ–∑ httpx."""
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
    payload = {
        "model": OPENAI_MODEL,
        "temperature": 0.6,
        "messages": [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": user_text}
        ]
    }
    async with httpx.AsyncClient(timeout=30.0, base_url=OPENAI_API_BASE) as client:
        r = await client.post("/chat/completions", headers=headers, json=payload)
        r.raise_for_status()
        data = r.json()
        return data["choices"][0]["message"]["content"].strip()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø SavolBot.\n"
        "–ó–∞–¥–∞–π –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–Ω—è—Ç–Ω–æ –∏ –ø–æ –¥–µ–ª—É."
    )
    await message.answer(text)

@dp.message(F.text)
async def handle_text(message: Message):
    user_text = message.text.strip()
    # –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ–π —ç—Ö–æ, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –º–æ–ª—á–∞–ª
    if not OPENAI_API_KEY:
        await message.answer(f"–í—ã —Å–ø—Ä–æ—Å–∏–ª–∏: {user_text}")
        return
    try:
        reply = await ask_gpt(user_text)
        await message.answer(reply)
    except Exception as e:
        logging.exception("OpenAI error: %s", e)
        await message.answer("–ò–∑–≤–∏–Ω–∏, —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")

# === Webhook endpoints ===
@app.post("/webhook")
async def telegram_webhook(request: Request):
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        return {"ok": False, "error": "bad secret"}
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}

@app.on_event("startup")
async def on_startup():
    # –°—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if TELEGRAM_TOKEN and WEBHOOK_URL:
        async with httpx.AsyncClient(timeout=15.0) as client:
            resp = await client.post(
                f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook",
                json={"url": WEBHOOK_URL, "secret_token": WEBHOOK_SECRET}
            )
            logging.info("setWebhook status: %s %s", resp.status_code, resp.text)
    else:
        logging.warning("Webhook not set: no TELEGRAM_TOKEN or WEBHOOK_URL")

@app.get("/health")
async def health():
    return {"status": "ok"}
