import os
import re
import logging
from datetime import datetime, timedelta

import httpx
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, Update, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

# ================== –õ–û–ì–ò ==================
logging.basicConfig(level=logging.INFO)

# ================== ENV ==================
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # https://<your-app>.onrender.com/webhook
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "savol_secret")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_API_BASE = os.getenv("OPENAI_API_BASE", "https://api.openai.com/v1")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # –Ω–∞–ø—Ä–∏–º–µ—Ä 123456789

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
app = FastAPI()

# ================== –ú–û–î–ï–†–ê–¶–ò–Ø ==================
ILLEGAL_PATTERNS = [
    r"\b(–≤–∑–ª–æ–º|—Ö–∞–∫|–∫–µ–π–ª–æ–≥–≥–µ—Ä|—Ñ–∏—à–∏–Ω–≥|–±–æ—Ç–Ω–µ—Ç|–¥–¥–æ—Å|ddos)\b",
    r"\b(–∫–∞–∫\s+–ø–æ–ª—É—á–∏—Ç—å\s+–¥–æ—Å—Ç—É–ø|–æ–±–æ–π—Ç–∏|–≤–∑—è—Ç—å\s+–ø–∞—Ä–æ–ª—å)\b.*\b(–∞–∫–∫–∞—É–Ω—Ç|—Ç–µ–ª–µ–≥—Ä–∞–º|–∏–Ω—Å—Ç–∞–≥—Ä–∞–º|–±–∞–Ω–∫|–ø–æ—á—Ç)\b",
    r"\b(–ø–æ–¥–¥–µ–ª(–∞—Ç—å|–∫–∞)|—Ñ–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä|–ª–∏–ø–æ–≤(—ã–π|—ã–µ))\b.*\b(–ø–∞—Å–ø–æ—Ä—Ç|—Å–ø—Ä–∞–≤–∫|–¥–∏–ø–ª–æ–º|–¥–æ–≥–æ–≤–æ—Ä|–ø–µ—á–∞—Ç—å|—à—Ç–∞–º–ø)\b",
    r"\b(–Ω–∞—Ä–∫–æ—Ç–∏–∫|–∞–º—Ñ–µ—Ç–∞–º–∏–Ω|–º–∞—Ä–∏—Ö—É–∞–Ω|–∫–∞–Ω–Ω–∞–±–∏—Å|–æ–ø–∏—É–º|—Å–ø–∞–π—Å)\b.*\b(–∫—É–ø–∏—Ç—å|–≤—ã—Ä–∞—Å—Ç–∏—Ç—å|—Å–¥–µ–ª–∞—Ç—å)\b",
    r"\b(–æ—Ä—É–∂–∏–µ|–ø–∏—Å—Ç–æ–ª–µ—Ç|–∞–≤—Ç–æ–º–∞—Ç|–≤–∑—Ä—ã–≤—á–∞—Ç–∫|–±–æ–º–±—É|—Ç—Ä–æ—Ç–∏–ª)\b.*\b(—Å–¥–µ–ª–∞—Ç—å|–∫—É–ø–∏—Ç—å|–¥–æ—Å—Ç–∞—Ç—å)\b",
    r"\b(–≤–∑—è—Ç–∫|–æ—Ç–∫–∞—Ç|–æ–±–Ω–∞–ª–∏—á|–æ–±–Ω–∞–ª|—É—Ö–æ–¥\s+–æ—Ç\s+–Ω–∞–ª–æ–≥–æ–≤|—Å–µ—Ä–∞—è\s+–∑–∞—Ä–ø–ª–∞—Ç–∞)\b",
    r"\b(–ø—Ä–æ–±–∏—Ç—å\s+–ø–æ\s+–±–∞–∑–µ|—Å–ª–∏—Ç—å\s+–±–∞–∑—É|–±–∞–∑—É\s+–∫–ª–∏–µ–Ω—Ç–æ–≤|–Ω–∞–π—Ç–∏\s+–ø–æ\s+–ø–∞—Å–ø–æ—Ä—Ç)\b",
    r"\b(–æ—Ç—Ä–∞–≤–∏—Ç—å|–≤–∑–æ—Ä–≤–∞—Ç—å|—É–±–∏—Ç—å|–Ω–∞–Ω–µ—Å—Ç–∏\s+–≤—Ä–µ–¥)\b",
    r"\b(soxta|qalbakilashtir|soxtalashtir)\b.*\b(diplom|pasport|spravka|shartnoma)\b",
    r"\b(soliqdan\s+qochish|pora|otkat)\b",
    r"\b(hack|xak|parolni\s+olish|akkauntga\s+k(i|e)rish)\b",
]
DENY_TEXT_RU = "‚õî –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω. –Ø –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–º–∫–∞—Ö –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –†–£–∑."
DENY_TEXT_UZ = "‚õî So‚Äòrov rad etildi. Men faqat O‚Äòzbekiston qonunchiligi doirasida javob beraman."

def is_uzbek(text: str) -> bool:
    t = text.lower()
    return bool(re.search(r"[“ì“õ“≥—û]", t) or re.search(r"\b(ha|yo'q|iltimos|rahmat|salom)\b", t))

def violates_policy(text: str) -> bool:
    t = text.lower()
    return any(re.search(rx, t) for rx in ILLEGAL_PATTERNS)

# ================== –¢–ê–†–ò–§–´ ==================
FREE_LIMIT = 2
TARIFFS = {
    "start": {
        "title": "–°—Ç–∞—Ä—Ç",
        "price_uzs": 49_000,
        "desc": ["–î–æ 100 —Å–æ–æ–±—â–µ–Ω–∏–π/–º–µ—Å", "–ö—Ä–∞—Ç–∫–∏–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã", "–ë–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫"],
        "active": True,
        "duration_days": 30,
    },
    "business": {"title": "–ë–∏–∑–Ω–µ—Å", "price_uzs": 119_000, "desc": [
        "–î–æ 500 —Å–æ–æ–±—â–µ–Ω–∏–π/–º–µ—Å", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ —á–µ–∫-–ª–∏—Å—Ç—ã", "–ü—Ä–æ—Å—Ç—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (docx/pdf)"
    ], "active": False, "duration_days": 30},
    "pro": {"title": "PRO", "price_uzs": 249_000, "desc": [
        "–í—ã—Å–æ–∫–∏–µ –ª–∏–º–∏—Ç—ã", "–ö–∞—Ä—Ç–∏–Ω–∫–∏ –∏ —Å–ª–æ–∂–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å"
    ], "active": False, "duration_days": 30},
}

# ================== –¢–ï–ú–´ (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏) ==================
TOPICS = {
    "daily": {"title_ru": "–ë—ã—Ç", "title_uz": "Maishiy", "hint": "–î–∞—ë—à—å –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã, —á–µ–∫-–ª–∏—Å—Ç—ã –∏ —à–∞–≥–∏."},
    "finance": {"title_ru": "–§–∏–Ω–∞–Ω—Å—ã", "title_uz": "Moliya", "hint": "–û–±—ä—è—Å–Ω—è–π —Å–ø–æ–∫–æ–π–Ω–æ, —Å —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏. –ë–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∏–Ω—Å–æ–≤–µ—Ç–æ–≤ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞."},
    "gov": {"title_ru": "–ì–æ—Å—É—Å–ª—É–≥–∏", "title_uz": "Davlat xizmatlari", "hint": "–°—Å—ã–ª–∞–π—Å—è –Ω–∞ –æ–±—â–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —à–∞–≥–∏ –ø–æ–¥–∞—á–∏."},
    "biz": {"title_ru": "–ë–∏–∑–Ω–µ—Å", "title_uz": "Biznes", "hint": "–î–∞–≤–∞–π –∫—Ä–∞—Ç–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏/–¥–æ–∫—É–º–µ–Ω—Ç–∞–º."},
    "edu": {"title_ru": "–£—á—ë–±–∞", "title_uz": "Ta‚Äôlim", "hint": "–û–±—ä—è—Å–Ω—è–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —à–∞–≥–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è/–æ–±—É—á–µ–Ω–∏—è."},
    "it": {"title_ru": "IT", "title_uz": "IT", "hint": "–ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º, –∏–∑–±–µ–≥–∞–π –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–≥–æ —Å–æ—Ñ—Ç–∞/–≤–∑–ª–æ–º–∞."},
    "health": {"title_ru": "–ó–¥–æ—Ä–æ–≤—å–µ (–æ–±—â.)", "title_uz": "Sog‚Äòliq (umumiy)", "hint": "–¢–æ–ª—å–∫–æ –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É–π –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –ø—Ä–∏ —Å–∏–º–ø—Ç–æ–º–∞—Ö."},
}

def topic_kb(lang="ru", current=None):
    rows = []
    for key, t in TOPICS.items():
        label = t["title_uz"] if lang == "uz" else t["title_ru"]
        if current == key:
            label = f"‚úÖ {label}"
        rows.append([InlineKeyboardButton(text=label, callback_data=f"topic:{key}")])
    rows.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ó–∞–∫—Ä—ã—Ç—å / Yopish", callback_data="topic:close")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

# ================== –ü–ê–ú–Ø–¢–¨ (MVP, –±–µ–∑ –ë–î) ==================
USERS = {}  # tg_id -> {"free_used": int, "plan": str, "paid_until": datetime|None, "lang": "ru"|"uz", "topic": str|None}

def get_user(tg_id: int):
    if tg_id not in USERS:
        USERS[tg_id] = {"free_used": 0, "plan": "free", "paid_until": None, "lang": "ru", "topic": None}
    return USERS[tg_id]

def has_active_sub(user: dict) -> bool:
    return user["plan"] in ("start", "business", "pro") and user["paid_until"] and user["paid_until"] > datetime.utcnow()

def pay_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å ¬´–°—Ç–∞—Ä—Ç¬ª", callback_data="subscribe_start")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –¢–∞—Ä–∏—Ñ—ã", callback_data="show_tariffs")]
    ])

def tariffs_text(lang='ru'):
    def bullet(lines): return "\n".join(f"‚Ä¢ {x}" for x in lines)
    txt = []
    for key in ("start", "business", "pro"):
        t = TARIFFS[key]
        badge = "(–¥–æ—Å—Ç—É–ø–µ–Ω)" if t["active"] else "(—Å–∫–æ—Ä–æ)"
        if lang == 'uz':
            badge = "(faol)" if t["active"] else "(tez orada)"
            txt.append(f"‚≠ê {t['title']} {badge}\nNarx: {t['price_uzs']:,} so‚Äòm/oy\n{bullet(t['desc'])}")
        else:
            txt.append(f"‚≠ê {t['title']} {badge}\n–¶–µ–Ω–∞: {t['price_uzs']:,} —Å—É–º/–º–µ—Å\n{bullet(t['desc'])}")
    return "\n\n".join(txt)

# ================== –ò–ò ==================
BASE_SYSTEM_PROMPT = (
    "–¢—ã ‚Äî SavolBot, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ —è—Å–Ω–æ (–¥–æ 6‚Äì8 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π). "
    "–°–æ–±–ª—é–¥–∞–π –∑–∞–∫–æ–Ω—ã –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞. –ù–µ –¥–∞–≤–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º, –ø–æ–¥–¥–µ–ª–∫–∞–º, –≤–∑–ª–æ–º–∞–º, –æ–±—Ö–æ–¥—É —Å–∏—Å—Ç–µ–º. "
    "–ü–æ –º–µ–¥–∏—Ü–∏–Ω–µ ‚Äî —Ç–æ–ª—å–∫–æ –æ–±—â–∞—è —Å–ø—Ä–∞–≤–∫–∞ –∏ —Å–æ–≤–µ—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É. "
    "–Ø–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞ = —è–∑—ã–∫ –≤–æ–ø—Ä–æ—Å–∞ (RU/UZ)."
)

async def ask_gpt(user_text: str, topic_hint: str | None) -> str:
    if not OPENAI_API_KEY:
        return f"–í—ã —Å–ø—Ä–æ—Å–∏–ª–∏: {user_text}"
    system = BASE_SYSTEM_PROMPT
    if topic_hint:
        system += f" –£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–º—ã: {topic_hint}"
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
    payload = {"model": OPENAI_MODEL, "temperature": 0.6,
               "messages": [{"role": "system", "content": system},
                            {"role": "user", "content": user_text}]}
    async with httpx.AsyncClient(timeout=30.0, base_url=OPENAI_API_BASE) as client:
        r = await client.post("/chat/completions", headers=headers, json=payload)
        r.raise_for_status()
        return r.json()["choices"][0]["message"]["content"].strip()

# ================== –ö–û–ú–ê–ù–î–´ ==================
@dp.message(Command("start"))
async def cmd_start(message: Message):
    u = get_user(message.from_user.id)
    u["lang"] = "uz" if is_uzbek(message.text or "") else "ru"
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! / Assalomu alaykum!\n"
        "–Ø ‚Äî SavolBot –æ—Ç TripleA. –ü–µ—Ä–≤—ã–µ 2 –æ—Ç–≤–µ—Ç–∞ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –¥–∞–ª—å—à–µ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ ¬´–°—Ç–∞—Ä—Ç¬ª.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —á–µ—Ä–µ–∑ /topics."
    )

@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n"
        "1) –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º.\n"
        "2) –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —á–µ—Ä–µ–∑ /topics ‚Äî —Ç–∞–∫ –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –µ—â—ë —Ç–æ—á–Ω–µ–µ.\n"
        "3) –ü–µ—Ä–≤—ã–µ 2 –æ—Ç–≤–µ—Ç–∞ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ; –∑–∞—Ç–µ–º –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ /tariffs.\n"
        "4) –í—Å—ë —Å—Ç—Ä–æ–≥–æ –≤ —Ä–∞–º–∫–∞—Ö –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –†–£–∑."
    )

@dp.message(Command("about"))
async def cmd_about(message: Message):
    await message.answer(
        "ü§ñ SavolBot ‚Äî –ø—Ä–æ–µ–∫—Ç TripleA. –¶–µ–ª—å ‚Äî –±—ã—Å—Ç—Ä—ã–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã 24/7.\n"
        "–†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –±–∞–∑–µ GPT. –¢–µ–º—ã –∏ –¥–≤—É—è–∑—ã—á–Ω–æ—Å—Ç—å RU/UZ.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –∏ —Å–Ω—è—Ç—å –ª–∏–º–∏—Ç—ã –º–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∫–æ–π: /tariffs."
    )

@dp.message(Command("tariffs"))
async def cmd_tariffs(message: Message):
    u = get_user(message.from_user.id)
    await message.answer(tariffs_text(u["lang"]), reply_markup=pay_kb())

@dp.message(Command("myplan"))
async def cmd_myplan(message: Message):
    u = get_user(message.from_user.id)
    status = "–∞–∫—Ç–∏–≤–Ω–∞" if has_active_sub(u) else "–Ω–µ—Ç"
    until = u["paid_until"].isoformat() if u["paid_until"] else "‚Äî"
    topic = u["topic"] or "‚Äî"
    await message.answer(
        f"–í–∞—à –ø–ª–∞–Ω: {u['plan']}\n–ü–æ–¥–ø–∏—Å–∫–∞: {status}\n–û–ø–ª–∞—á–µ–Ω–æ –¥–æ: {until}\n"
        f"–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞: {topic}\n"
        f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {u['free_used']}/{FREE_LIMIT}"
    )

@dp.message(Command("topics"))
async def cmd_topics(message: Message):
    u = get_user(message.from_user.id)
    lang = u["lang"]
    head = "üóÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É (–Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ü–µ–Ω—É, —Ç–æ–ª—å–∫–æ –Ω–∞ —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞):" if lang == "ru" \
        else "üóÇ Mavzuni tanlang (narxga ta‚Äôsir qilmaydi, faqat javob ohangiga):"
    await message.answer(head, reply_markup=topic_kb(lang, current=u.get("topic")))

# ================== CALLBACKS ==================
@dp.callback_query(F.data == "show_tariffs")
async def cb_show_tariffs(call: CallbackQuery):
    u = get_user(call.from_user.id)
    await call.message.edit_text(tariffs_text(u["lang"]), reply_markup=pay_kb())
    await call.answer()

@dp.callback_query(F.data == "subscribe_start")
async def cb_subscribe_start(call: CallbackQuery):
    pay_link = "https://pay.example.com/savolbot/start"  # –∑–∞–≥–ª—É—à–∫–∞
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ (—è –æ–ø–ª–∞—Ç–∏–ª)", callback_data="paid_start_done")]
    ])
    await call.message.answer(f"üí≥ ¬´–°—Ç–∞—Ä—Ç¬ª ‚Äî {TARIFFS['start']['price_uzs']:,} —Å—É–º/–º–µ—Å.\n–û–ø–ª–∞—Ç–∞: {pay_link}", reply_markup=kb)
    await call.answer()

@dp.callback_query(F.data == "paid_start_done")
async def cb_paid_done(call: CallbackQuery):
    if ADMIN_CHAT_ID:
        await bot.send_message(
            int(ADMIN_CHAT_ID),
            f"üë§ @{call.from_user.username or call.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–∫—Ç–∏–≤–∞—Ü–∏—é ¬´–°—Ç–∞—Ä—Ç¬ª.\n"
            f"TG ID: {call.from_user.id}\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /grant_start {call.from_user.id}"
        )
    await call.message.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –æ–ø–ª–∞—Ç—É –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É.")
    await call.answer()

@dp.callback_query(F.data.startswith("topic:"))
async def cb_topic(call: CallbackQuery):
    u = get_user(call.from_user.id)
    _, key = call.data.split(":", 1)
    if key == "close":
        try:
            await call.message.delete()
        except Exception:
            pass
        return await call.answer("OK")
    if key in TOPICS:
        u["topic"] = key
        lang = u["lang"]
        title = TOPICS[key]["title_uz"] if lang == "uz" else TOPICS[key]["title_ru"]
        await call.message.edit_reply_markup(reply_markup=topic_kb(lang, current=key))
        await call.answer(f"–í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞: {title}" if lang == "ru" else f"Mavzu tanlandi: {title}")

# –∞–¥–º–∏–Ω—Å–∫–∞—è —Ä—É—á–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è (MVP)
@dp.message(Command("grant_start"))
async def cmd_grant_start(message: Message):
    if str(message.from_user.id) != str(ADMIN_CHAT_ID):
        return await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    parts = message.text.strip().split()
    if len(parts) != 2 or not parts[1].isdigit():
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant_start <tg_id>")
    target_id = int(parts[1])
    u = get_user(target_id)
    u["plan"] = "start"
    u["paid_until"] = datetime.utcnow() + timedelta(days=TARIFFS["start"]["duration_days"])
    await message.answer(f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ¬´–°—Ç–∞—Ä—Ç¬ª –¥–ª—è {target_id} –¥–æ {u['paid_until'].isoformat()}")
    try:
        await bot.send_message(target_id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ ¬´–°—Ç–∞—Ä—Ç¬ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!")
    except Exception as e:
        logging.warning("Notify user failed: %s", e)

# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–û–ü–†–û–°–û–í ==================
@dp.message(F.text)
async def handle_text(message: Message):
    text = message.text.strip()
    u = get_user(message.from_user.id)

    # –Ø–∑—ã–∫
    if is_uzbek(text):
        u["lang"] = "uz"

    # –ú–æ–¥–µ—Ä–∞—Ü–∏—è
    if violates_policy(text):
        return await message.answer(DENY_TEXT_UZ if u["lang"] == "uz" else DENY_TEXT_RU)

    # –õ–∏–º–∏—Ç—ã / –ø—ç–π–≤–æ–ª–ª
    if not has_active_sub(u) and u["free_used"] >= FREE_LIMIT:
        return await message.answer(
            "üí≥ –î–æ—Å—Ç—É–ø –∫ –æ—Ç–≤–µ—Ç–∞–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:",
            reply_markup=pay_kb()
        )

    # –¢–µ–º–∞ ‚Üí –Ω–∞–º—ë–∫ —Å–∏—Å—Ç–µ–º–µ
    topic_hint = TOPICS.get(u["topic"], {}).get("hint") if u.get("topic") else None

    # –û—Ç–≤–µ—Ç –ò–ò
    try:
        reply = await ask_gpt(text, topic_hint)
        await message.answer(reply)
    except Exception as e:
        logging.exception("OpenAI error: %s", e)
        return await message.answer("–ò–∑–≤–∏–Ω–∏, —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # –°–ø–∏—Å—ã–≤–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –µ—Å–ª–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
    if not has_active_sub(u):
        u["free_used"] += 1

# ================== WEBHOOK ==================
@app.post("/webhook")
async def telegram_webhook(request: Request):
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        return {"ok": False, "error": "bad secret"}
    update = Update.model_validate(await request.json())
    await dp.feed_update(bot, update)
    return {"ok": True}

@app.on_event("startup")
async def on_startup():
    if TELEGRAM_TOKEN and WEBHOOK_URL:
        async with httpx.AsyncClient(timeout=15.0) as client:
            resp = await client.post(
                f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook",
                json={"url": WEBHOOK_URL, "secret_token": WEBHOOK_SECRET}
            )
            logging.info("setWebhook: %s %s", resp.status_code, resp.text)

@app.get("/health")
async def health():
    return {"status": "ok"}
